{"version":3,"sources":["components/cards/cards.module.css","components/navigation/Navigation.module.css","components/tableSidebar/tableSidebar.module.css","components/404/Page_error_404.module.css","App.module.css","components/customInput/CustomInputText.module.css","components/confirmPassword/ConfirmPassword.module.css","components/table/TableGrid.module.css","components/loginPage/Login.module.css","style/Common.module.css","components/preloader/Preloader.module.css","components/registrations/Registrations.module.css","components/table/Range.module.css","components/customButton/CustomButton.module.css","components/table/Table.module.css","enum/pathes.ts","enum/requestStatus.ts","components/customInput/CustomInput.tsx","hooks/useAppDispatch.ts","hooks/useAppSelector.ts","hooks/useInput/useInput.ts","utils/emailValidation.ts","utils/passwordValidation.ts","utils/createRangedArray.ts","hooks/usePagination.ts","api/apiConfig/index.ts","api/cardsApi.ts","store/reducers/errorReducer.ts","store/reducers/profile.ts","api/loginApi.ts","store/reducers/login.ts","store/reducers/appInitialized.ts","store/reducers/cards.ts","api/forgotPasswordApi.ts","store/selectors/login/loginSelectors.ts","store/selectors/app/appSelectors.ts","store/selectors/confirmPassword/errorSelectors.ts","components/loginPage/Login.tsx","assets/avatar.png","assets/preloader1.gif","components/preloader/Preloader.tsx","components/profile/Profile.tsx","store/reducers/signUp.ts","components/registrations/signUp.tsx","components/registrations/signUpContainer.tsx","constants/Navigation/appNavigation.ts","components/navigation/Navigation.tsx","components/table/decksApi.ts","components/table/decksTC.tsx","components/pagination/Pagination.tsx","components/table/EditableSpan.tsx","components/table/Table.tsx","components/table/Range.tsx","components/tableSidebar/TableSidebar.tsx","components/customButton/CustomButton.tsx","assets/error404.gif","components/404/Page_error_404.tsx","components/confirmPassword/ConfirmPassword.tsx","store/middlewares/forgotPassAddEmailTC.ts","components/confirmPassword/CreateNewPassword.tsx","store/middlewares/forgotPassSetPassTC.ts","assets/letter.png","components/confirmPassword/Popup.tsx","components/cards/Cards.tsx","components/cards/Card.tsx","components/Test.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","PATH","requestStatus","CustomInput","memo","placeholder","typeInput","className","value","onChange","name","s","inputWrap","size","type","input","autoComplete","spellCheck","useAppSelector","useSelector","useInput","initialValue","useState","setValue","handleValue","e","target","resetValue","isEmailValid","email","test","isPasswordValid","password","createRangedArray","start","end","length","Array","from","_","idx","DOTS","instance","axios","create","baseURL","process","withCredentials","cardsAPI","cardsPackId","get","_id","delete","initialState","errorValidation","errorNetwork","setErrorMessagePassAC","setErrorMessageNetworkAC","profile","avatar","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","error","setUserProfile","authAPI","params","post","isAuth","setAuthLoginDataAC","status","idle","isInitialized","setAppStatusAC","cards","answer","question","cardsTotalCount","grade","shots","maxGrade","minGrade","page","pageCount","packUserId","addNewPassAPI","getIsDataLoaded","state","login","getIsInitialized","app","getStatus","getErrorNetworkMessage","errorMessage","getErrorValidMessage","Login","handleRememberMe","handleEmail","resetEmail","handlePassword","resetPassword","dispatch","useDispatch","isDataLoaded","isLoading","errorPassMessage","errorNetworkMessage","to","PROFILE","style","mainContainer","content","contentWrap","color","st","rememberMeInput","checked","currentTarget","CONFIRM_PASSWORD","minWidth","CustomButton","title","onClick","setTimeout","data","loading","then","res","succeeded","catch","response","message","finally","REGISTRATION","Preloader","loader","src","preloader1","alt","Profile","userData","profilePage","setName","setEmail","editMode","setEditMode","activateEditForm","hideEditForm","noneAvatarImage","event","files","btn","LOGIN","onBlur","onDoubleClick","isFetching","isSignUp","toggleIsFetchingAC","SignUp","props","errorValid","confirmPassword","handleConfirmPassword","onSendButtonClick","onCancelButtonClick","btns","disabled","SignUpContainer","resetConfirmPassword","signUp","isSignUpSuccessful","appNavigation","id","link","POPUP","CREATE_NEW_PASSWORD","CARDS","PAGE_404","Navigation","nav","wrap","navList","map","listItem","navElement","decksAPI","cardsPack","put","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","fetchDecksAC","payload","setDecksTC","getState","decks","Pagination","onPageChange","totalCount","siblingCount","currentPage","pageSize","paginationRange","useMemo","totalPageCount","Math","ceil","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftRange","rightRange","middleRange","usePagination","lastPage","ulClassName","liSelected","pageNumber","random","toString","liDisabled","EditableSpan","React","setTitle","autoFocus","upDateDeckAC","upDateDeckTC","Table","perPage","useEffect","onRemoveDeckClick","deleteDeckAC","removeDeckTC","styleTable","wrapper","TableSidebar","rightBlock","fontSize","searchInputSection","inputSearch","textArea","dataPayload","deck","newCardsPack","addDeckAC","tableCommon","element","elementPartOne","elementPartTwo","elementPartThree","elementPartFour","tableRow","cardPack","cardsCount","user_name","SuperRange","number","setNumber","range","myPacks","filter","tableSidebar","pickBlock","header3","buttonsContainer","button","PageError404","imagine","error404","page_404","linkContainer","ConfirmPassword","isShown","setShowMessage","inputCentering","forgotPassAddEmailTC","CreateNewPassword","isLoadedData","setLoadedData","newPassword","handleNewPassword","resetNewPassword","token","useParams","resetPasswordToken","forgotPassSetPassTC","Popup","letterImg","letter","heading","Cards","console","log","navigate","useNavigate","cardsPack_id","onClickRemoveCard","removeCardAC","removeCardTC","CARD","table","card","Card","handleQuestion","handleAnswer","contentCard","container","textarea","buttons","Test","App","showMenu","setShowMenu","preloaderWrap","layout","main","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","c","dataUpdate","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e702882.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentCard\":\"cards_contentCard__3XXzU\",\"textarea\":\"cards_textarea__2-SAh\",\"buttons\":\"cards_buttons__10cGS\",\"btn\":\"cards_btn__3vefF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__3CXyF\",\"wrap\":\"Navigation_wrap__3J-xK\",\"listItem\":\"Navigation_listItem__2wBIY\",\"navElement\":\"Navigation_navElement__3VPMA\",\"p\":\"Navigation_p__3EbMI\",\"navList\":\"Navigation_navList__FK_Ih\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableSidebar\":\"tableSidebar_tableSidebar__2Smyo\",\"buttonsContainer\":\"tableSidebar_buttonsContainer__fQj3x\",\"header3\":\"tableSidebar_header3__2O_h0\",\"pickBlock\":\"tableSidebar_pickBlock__1IgQE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Page_error_404_mainContainer__Bsswf\",\"linkContainer\":\"Page_error_404_linkContainer__22GLI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"preloaderWrap\":\"App_preloaderWrap__3Dkxz\",\"layout\":\"App_layout__1LipR\",\"main\":\"App_main__3ZkGI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrap\":\"CustomInputText_inputWrap__1SUXE\",\"input\":\"CustomInputText_input__3cd74\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"letterImg\":\"ConfirmPassword_letterImg__3UhNI\",\"errorImg\":\"ConfirmPassword_errorImg__1CPVm\",\"heading\":\"ConfirmPassword_heading__35OWf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"TableGrid_table__31DLv\",\"btns\":\"TableGrid_btns__3IOTp\",\"header3\":\"TableGrid_header3__2xkcE\",\"searchInputSection\":\"TableGrid_searchInputSection__8uiK6\",\"inputSearch\":\"TableGrid_inputSearch__qCm1c\",\"textArea\":\"TableGrid_textArea__2Mb6Y\",\"wrapper\":\"TableGrid_wrapper__3cbQU\",\"rightBlock\":\"TableGrid_rightBlock__3P3-D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rememberMeInput\":\"Login_rememberMeInput__2wEHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Common_mainContainer__1YbqG\",\"contentWrap\":\"Common_contentWrap__3cz03\",\"content\":\"Common_content__2nJCL\",\"btn\":\"Common_btn__3a_wE\",\"inputEmail\":\"Common_inputEmail__3iLZ5\",\"inputPassword\":\"Common_inputPassword__yLVis\",\"inputCentering\":\"Common_inputCentering__1z1RO\",\"avatar\":\"Common_avatar__1e9FW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__3R_QX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Registrations_btns__17Wql\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"Range_range__3HDfO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CustomButton_button__1kKFn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__2oJSk\",\"btns\":\"Table_btns__3lGSd\",\"wrap\":\"Table_wrap__1vyDk\",\"rightBlock\":\"Table_rightBlock__1yX5h\",\"decks\":\"Table_decks__1RT47\",\"element\":\"Table_element__3yp2c\",\"elementPart\":\"Table_elementPart__2gjva\",\"tableCaption\":\"Table_tableCaption__uPa1x\",\"captionElement\":\"Table_captionElement__1Jtlm\",\"btn\":\"Table_btn__182RP\",\"searchInputSection\":\"Table_searchInputSection__UbmZC\",\"inputSearch\":\"Table_inputSearch__2W4-b\",\"textArea\":\"Table_textArea__2rCMa\",\"elementPartOne\":\"Table_elementPartOne__1B9jO\",\"elementPartTwo\":\"Table_elementPartTwo__37-gV\",\"elementPartThree\":\"Table_elementPartThree__1PRlU\",\"elementPartFour\":\"Table_elementPartFour__WC-lW\"};","export enum PATH {\n  REGISTRATION = '/registration',\n  LOGIN = '/login',\n  PROFILE = '/profile',\n  CONFIRM_PASSWORD = '/confirmPassword/*',\n  POPUP = '/popup',\n  CREATE_NEW_PASSWORD = '/createNewPassword/:token',\n  PAGE_404 = '/*',\n  CARDS = '/cards',\n  CARD = '/card',\n}\n","export enum requestStatus {\n  idle = 'idle',\n  loading = 'loading',\n  succeeded = 'succeeded',\n  failed = 'failed',\n}\n","import { memo } from 'react';\n\nimport s from './CustomInputText.module.css';\n\nimport { ReturnComponentType } from 'types';\n\ntype InputProps = {\n  placeholder: string;\n  typeInput: string;\n  className?: string;\n  onChange: () => void;\n  value: string;\n  name?: string;\n};\n\nexport const CustomInput = memo(\n  ({\n    placeholder,\n    typeInput,\n    className,\n    value,\n    onChange,\n    name,\n  }: InputProps): ReturnComponentType => (\n    <div className={s.inputWrap}>\n      <input\n        size={40}\n        type={typeInput}\n        name={name}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        className={className ?? s.input}\n        autoComplete=\"off\"\n        spellCheck={false}\n        aria-autocomplete=\"list\"\n      />\n    </div>\n  ),\n);\n","import { useDispatch } from 'react-redux';\n\nimport { AppDispatch } from 'store/types';\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\n\nimport { RootStateType } from 'store/types';\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\n","import { ChangeEvent, useState } from 'react';\n\nexport const useInput = (initialValue: string): any => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleValue = (e: ChangeEvent<HTMLInputElement>): void =>\n    setValue(e.target.value);\n\n  const resetValue = (): void => setValue(initialValue);\n\n  return { value, handleValue, resetValue };\n};\n","export const isEmailValid = (email: string): boolean => {\n  const EMAIL_REGEX =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return EMAIL_REGEX.test(email);\n};\n","export const isPasswordValid = (password: string): boolean => {\n  const PASSWORD_REGEX = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\n  return PASSWORD_REGEX.test(password);\n};\n/* /^\n  (?=.*\\d)          // should contain at least one digit\n  (?=.*[a-z])       // should contain at least one lower case\n  (?=.*[A-Z])       // should contain at least one upper case\n  [a-zA-Z0-9]{8,}   // should contain at least 8 from the mentioned characters\n$/ */\n","export const createRangedArray = (start: number, end: number): number[] => {\n  // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n  const length = end - start + 1;\n  /*\n  \tCreate an array of certain length and set the elements within it from\n    start value to end value.\n  */\n  return Array.from({ length }, (_, idx) => idx + start);\n};\n","/* eslint-disable @typescript-eslint/no-magic-numbers */\n\nimport { useMemo } from 'react';\n\nimport { createRangedArray } from 'utils';\n\nexport const DOTS = '...';\n\nexport type UsePaginationType = {\n  totalCount: number;\n  pageSize: number;\n  siblingCount: number;\n  currentPage: number;\n};\n\nexport const usePagination = ({\n  totalCount,\n  pageSize,\n  siblingCount = 1,\n  currentPage,\n}: UsePaginationType): any =>\n  // eslint-disable-next-line consistent-return\n  useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize);\n\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n    const totalPageNumbers = siblingCount + 5;\n\n    /*\n          Case 1:\n          If the number of pages is less than the page numbers we want to show in our\n          paginationComponent, we return the range [1..totalPageCount]\n        */\n    if (totalPageNumbers >= totalPageCount) {\n      return createRangedArray(1, totalPageCount);\n    }\n\n    /*\n            Calculate left and right sibling index and make sure they are within range 1 and totalPageCount\n        */\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n\n    /*\n          We do not show dots just when there is just one page number to be inserted between the extremes of sibling and the page limits i.e 1 and totalPageCount. Hence we are using leftSiblingIndex > 2 and rightSiblingIndex < totalPageCount - 2\n        */\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n\n    /*\n            Case 2: No left dots to show, but rights dots to be shown\n        */\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = 3 + 2 * siblingCount;\n      const leftRange = createRangedArray(1, leftItemCount);\n\n      return [...leftRange, DOTS, totalPageCount];\n    }\n\n    /*\n            Case 3: No right dots to show, but left dots to be shown\n        */\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = 3 + 2 * siblingCount;\n      const rightRange = createRangedArray(\n        totalPageCount - rightItemCount + 1,\n        totalPageCount,\n      );\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n\n    /*\n            Case 4: Both left and right dots to be shown\n        */\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      const middleRange = createRangedArray(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n","import axios from 'axios';\n\nconst baseUrl = process.env.REACT_APP_BASE_URL; // Достаем базовый юрл из .env(ссылка на хироку)\n\nexport const instance = axios.create({\n  baseURL: baseUrl,\n  withCredentials: true,\n});\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from './apiConfig';\n\nexport const cardsAPI = {\n  getCards(cardsPackId: string) {\n    return instance.get<ResponseType>(`cards/card?cardsPack_id=${cardsPackId}`);\n  },\n  deleteCard(_id: string) {\n    return instance.delete<AxiosResponse<ResponseType>>(`cards/card?id=${_id}`);\n  },\n  addNewCard(card: AddCardType) {\n    return instance.post<cardType, AxiosResponse<any>>('cards/card', { card });\n  },\n  updateCard(updateCard: updateCardType) {\n    return instance.put<cardType, any>('cards/card', { updateCard });\n  },\n};\n\n// types\n\nexport type AddCardType = {\n  cardsPack_id: string;\n  answer: string;\n  question: string;\n  grade: number;\n  shots: number;\n};\n\nexport type cardType = {\n  _id: string;\n  user_id: string;\n  answer: string;\n  question: string;\n  cardsPack_id: string;\n  grade?: number;\n  shots?: number;\n  rating?: number;\n  type?: string;\n  created?: string;\n  updated?: string;\n  __v?: number;\n};\nexport type ResponseType = {\n  cards: cardType[];\n  cardsTotalCount: number;\n  maxGrade: number;\n  minGrade: number;\n  page: number;\n  pageCount: number;\n  packUserId: string;\n};\n\nexport type updateCardType = {\n  _id: string;\n  question: string;\n  answer: string;\n};\n","import { Nullable } from '../../types';\n\nexport type InitialStateDataType = {\n  errorValidation?: Nullable<string>;\n  errorNetwork?: Nullable<string>;\n};\n\nconst initialState: InitialStateDataType = {\n  errorValidation: null,\n  errorNetwork: null,\n};\n\nexport const errorForgotPasswordReducer = (\n  state: InitialStateDataType = initialState,\n  action: ActionTypes,\n): InitialStateDataType => {\n  switch (action.type) {\n    case 'FORGOT_PASSWORD/SET_VALIDATION_ERROR_MESSAGE':\n      return {\n        ...state,\n        errorValidation: action.errorValidation,\n      };\n    case 'FORGOT_PASSWORD/SET_NETWORK_ERROR_MESSAGE':\n      return {\n        ...state,\n        errorNetwork: action.errorNetwork,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setErrorMessagePassAC = (errorValidation: Nullable<string>) =>\n  ({ type: 'FORGOT_PASSWORD/SET_VALIDATION_ERROR_MESSAGE', errorValidation } as const);\n\nexport const setErrorMessageNetworkAC = (errorNetwork: Nullable<string>) =>\n  ({ type: 'FORGOT_PASSWORD/SET_NETWORK_ERROR_MESSAGE', errorNetwork } as const);\n\ntype SetErrorMessagePassType = ReturnType<typeof setErrorMessagePassAC>;\nexport type SetErrorMessageNetworkType = ReturnType<typeof setErrorMessageNetworkAC>;\n\ntype ActionTypes = SetErrorMessagePassType | SetErrorMessageNetworkType;\n","import { Nullable } from '../../types';\n\nexport type ProfileResponseDataType = null | {\n  _id: Nullable<string>;\n  email: string;\n  name: string;\n  avatar?: Nullable<string>;\n  publicCardPacksCount: Nullable<number>;\n  created: Date | null;\n  updated: Date | null;\n  isAdmin: Nullable<boolean>;\n  verified: Nullable<boolean>;\n  rememberMe: Nullable<boolean>;\n  error?: Nullable<string>;\n};\n\nconst initialState = {\n  profile: {\n    _id: null as string | null,\n    avatar: null as string | null,\n    name: '',\n    email: '',\n    publicCardPacksCount: null as number | null,\n    created: null as Date | null,\n    updated: null as Date | null,\n    isAdmin: null as boolean | null,\n    verified: null as boolean | null,\n    rememberMe: null as boolean | null,\n    error: null as string | null,\n  },\n};\n\nexport type InitialStateProfileType = typeof initialState;\n\nexport const profileReducer = (\n  state: InitialStateProfileType = initialState,\n  action: ActionTypes,\n): InitialStateProfileType => {\n  switch (action.type) {\n    case 'SET_USER_DATA':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    case 'SET_USER_PROFILE':\n      return {\n        ...state,\n        profile: { ...state.profile, ...action.profile },\n      };\n    case 'LOGOUT_USER_PROFILE':\n      return {\n        ...state,\n        profile: {\n          _id: null as string | null,\n          avatar: null as string | null,\n          name: '',\n          email: '',\n          publicCardPacksCount: null as number | null,\n          created: null as Date | null,\n          updated: null as Date | null,\n          isAdmin: null as boolean | null,\n          verified: null as boolean | null,\n          rememberMe: null as boolean | null,\n          error: null as string | null,\n        },\n      };\n    // case 'SET_ERROR_MESSAGE':\n    //   return {\n    //     ...state,\n    //     error: action.error,\n    //   };\n    default:\n      return state;\n  }\n};\n\nexport const setUserData = (_id: string, name: string, avatar: string) =>\n  ({\n    type: 'SET_USER_DATA',\n    payload: { _id, name, avatar },\n  } as const);\nexport const setUserProfile = (profile: ProfileResponseDataType) =>\n  ({\n    type: 'SET_USER_PROFILE',\n    profile,\n  } as const);\nexport const setErrorMessage = (error: Nullable<string>) =>\n  ({ type: 'SET_ERROR_MESSAGE', error } as const);\nexport const logOutUserProfile = (profile: ProfileResponseDataType) =>\n  ({\n    type: 'LOGOUT_USER_PROFILE',\n    profile,\n  } as const);\n\n// export const getAuthLoginData = () => (dispatch: ThunkDispatch<AppStateType, undefined, ActionTypes>) => {\n//   return authAPI.me()\n//     .then(response => {\n//       if (response.data.resultCode === 0) {                     //проверка залогинен пользователь или нет\n//         let {id, login, email} = response.data.data\n//         dispatch(setAuthUserData(id, login, email, true));\n//\n//       }\n//     });\n// }\n\n// export const logIn =\n//   (data: LoginParamsType) =>\n//     (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//       authAPI\n//         .login(data)\n//         .then(response => {\n//           const { email, rememberMe } = response.data;\n//           dispatch(setAuthLoginData(email, rememberMe, true));\n//         })\n//         .catch(e => {\n//           const error = e.response\n//             ? e.response.data.error\n//             : `${e.message}, more details in the console`;\n//           dispatch(setErrorMessage(error));\n//         });\n//     };\n//\n// export const getUserData = () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//   (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//     authAPI.logOut().then(() => {\n//       const { _id, name, verified } = response.data;\n//       dispatch(setUserData(_id, name, verified));\n//     }\n//     });\n// }\n\n// export const uploadUserPhotoThunk = (image: File) => async (dispatch: Dispatch) => {\n//   const response = await ProfileAPI.uploadUserPhoto(image)\n//   if (response.data.resultCode === 0) {\n//     dispatch(UploadUserPhoto(response.data.data.photos))\n//   }\n// }\n\n// type;\nexport type setUserProfileType = ReturnType<typeof setUserProfile>;\ntype setAuthUserDataType = ReturnType<typeof setUserData>;\ntype setErrorMessageLoginType = ReturnType<typeof setErrorMessage>;\nexport type logOutUserProfileType = ReturnType<typeof logOutUserProfile>;\ntype ActionTypes =\n  | setAuthUserDataType\n  | setErrorMessageLoginType\n  | setUserProfileType\n  | logOutUserProfileType;\n","import { AxiosResponse } from 'axios';\n\nimport { Nullable } from '../types';\n\nimport { instance } from './apiConfig';\n\nexport const authAPI = {\n  login(params: LoginParamsType) {\n    return instance.post<\n      LoginParamsType,\n      /* 'сам объект сервера который отправляет игнат' */\n      /* AxiosResponse нужен только у методов put и post */\n      AxiosResponse<ResponseType>\n    >('auth/login', params);\n  },\n  logOut() {\n    return instance.delete<ResponseType>('auth/me', {});\n  },\n  me() {\n    return instance.post<ResponseType>('auth/me');\n  },\n  register(params: RegisterParamsType) {\n    return instance.post<RegisterParamsType, any>('auth/register', params);\n  },\n};\n\nexport const profileAPI = {\n  updateProfile(paramsUpdate: UpdateProfileType) {\n    return instance.put('/auth/me', paramsUpdate);\n  },\n};\n\n// types\nexport type UpdateProfileType = {\n  name: string;\n  avatar: Nullable<string>;\n};\nexport type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n};\nexport type RegisterParamsType = {\n  email: string;\n  password: string;\n};\n\nexport type ResponseType = {\n  _id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  publicCardPacksCount: number;\n  created: Date;\n  updated: Date;\n  isAdmin: boolean;\n  verified: boolean;\n  rememberMe: boolean;\n  error?: string;\n};\n","import { ThunkDispatch } from 'redux-thunk';\n\nimport { setAppStatusAC, SetAppStatusActionType } from './appInitialized';\nimport { setErrorMessageNetworkAC } from './errorReducer';\nimport { logOutUserProfileType, setUserProfile, setUserProfileType } from './profile';\n\nimport { authAPI, LoginParamsType } from 'api/loginApi';\nimport { requestStatus } from 'enum';\nimport { RootStoreType } from 'store';\nimport { Nullable } from 'types';\n\nexport type InitialStateDataType = {\n  isAuth: boolean;\n  error?: Nullable<string>;\n};\n\nexport const initialState: InitialStateDataType = {\n  isAuth: false,\n  error: null,\n};\n\nexport const loginReducer = (\n  state: InitialStateDataType = initialState,\n  action: ActionTypesLogin,\n): InitialStateDataType => {\n  switch (action.type) {\n    case 'LOGIN/SET_AUTH_LOGIN_DATA':\n      return {\n        ...state,\n        isAuth: action.isAuth,\n      };\n    case 'LOGIN/SET_ERROR_MESSAGE':\n      return {\n        ...state,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setAuthLoginDataAC = (isAuth: boolean) =>\n  ({ type: 'LOGIN/SET_AUTH_LOGIN_DATA', isAuth } as const);\n\nexport const setErrorMessageAC = (error: Nullable<string>) =>\n  ({ type: 'LOGIN/SET_ERROR_MESSAGE', error } as const);\n\nexport const logInTC =\n  (data: LoginParamsType) =>\n  (\n    dispatch: ThunkDispatch<\n      RootStoreType,\n      undefined,\n      ActionTypesLogin | ReturnType<typeof setErrorMessageNetworkAC>\n    >,\n  ) => {\n    dispatch(setAppStatusAC(requestStatus.loading));\n    authAPI\n      .login(data)\n      .then(res => {\n        dispatch(setAuthLoginDataAC(true));\n        dispatch(setUserProfile(res.data));\n        dispatch(setAppStatusAC(requestStatus.succeeded));\n      })\n      .catch(e => {\n        dispatch(setAppStatusAC(requestStatus.succeeded));\n        const errorNetwork = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\n        const timeOut = 2000;\n        setTimeout(() => {\n          dispatch(setErrorMessageNetworkAC(''));\n        }, timeOut);\n      })\n      .finally(() => {\n        dispatch(setAppStatusAC(requestStatus.idle));\n      });\n  };\n\nexport const logOutTC =\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesLogin>) => {\n    dispatch(setAppStatusAC(requestStatus.loading));\n    authAPI.logOut().then(() => {\n      dispatch(setAuthLoginDataAC(false));\n      dispatch(setUserProfile(null));\n      dispatch(setErrorMessageAC(''));\n      dispatch(setAppStatusAC(requestStatus.idle));\n    });\n  };\n\n// type;\nexport type setLoginData = ReturnType<typeof setAuthLoginDataAC>;\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessageAC>;\nexport type ActionTypesLogin =\n  | setLoginData\n  | setErrorMessageLogin\n  | SetAppStatusActionType\n  | logOutUserProfileType\n  | setUserProfileType;\n","import { ThunkDispatch } from 'redux-thunk';\n\nimport { setAuthLoginDataAC, setLoginData } from './login';\nimport { setUserProfile, setUserProfileType } from './profile';\n\nimport { authAPI } from 'api/loginApi';\nimport { requestStatus } from 'enum';\nimport { RootStoreType } from 'store';\nimport { Nullable, RequestStatusType } from 'types';\n\nexport const initialState: InitialStateType = {\n  status: requestStatus.idle,\n  error: null,\n  isInitialized: false,\n};\n\nexport const appReducer = (\n  state: InitialStateType = initialState,\n  action: ActionTypes,\n): InitialStateType => {\n  switch (action.type) {\n    case 'APP/SET_STATUS':\n      return { ...state, status: action.status };\n    case 'APP/SET_ERROR':\n      return { ...state, error: action.error };\n    case 'APP/SET_IS_INITIALIZED':\n      return { ...state, isInitialized: action.isInitialized };\n    default:\n      return { ...state };\n  }\n};\n\nexport const setAppErrorAC = (error: Nullable<string>) =>\n  ({ type: 'APP/SET_ERROR', error } as const);\nexport const setAppStatusAC = (status: RequestStatusType) =>\n  ({ type: 'APP/SET_STATUS', status } as const);\n\nexport const setIsInitializedAC = (isInitialized: boolean) =>\n  ({ type: 'APP/SET_IS_INITIALIZED', isInitialized } as const);\n\nexport const initializeAppTC =\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n    authAPI\n      .me()\n      .then(res => {\n        dispatch(setAuthLoginDataAC(true));\n        dispatch(setUserProfile(res.data));\n      })\n      .finally(() => {\n        dispatch(setIsInitializedAC(true));\n      });\n  };\n\n// types\n\nexport type InitialStateType = {\n  // происходит ли сейчас взаимодействие с сервером\n  status: RequestStatusType;\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n  error: Nullable<string>;\n  isInitialized: boolean;\n};\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\nexport type setIsInitializedType = ReturnType<typeof setIsInitializedAC>;\n\ntype ActionTypes =\n  | SetAppErrorActionType\n  | SetAppStatusActionType\n  | setIsInitializedType\n  | setLoginData\n  | setUserProfileType;\n","import { AxiosError } from 'axios';\nimport { ThunkDispatch } from 'redux-thunk';\n\nimport { AddCardType, cardsAPI, cardType } from '../../api/cardsApi';\nimport { requestStatus } from '../../enum';\nimport { RootStoreType } from '../store';\n\nimport { setAppStatusAC, SetAppStatusActionType } from './appInitialized';\nimport { setErrorMessageNetworkAC, SetErrorMessageNetworkType } from './errorReducer';\n\ntype initStateType = {\n  cards: cardType[];\n  answer: string;\n  question: string;\n  cardsTotalCount: number;\n  grade: number;\n  shots: number;\n  maxGrade: number;\n  minGrade: number;\n  page: number;\n  pageCount: number;\n  packUserId: string;\n};\nconst initialState: initStateType = {\n  cards: [],\n  answer: '',\n  question: '',\n  cardsTotalCount: 5,\n  grade: 5,\n  shots: 1,\n  maxGrade: 5,\n  minGrade: 3,\n  page: 1,\n  pageCount: 4,\n  packUserId: '',\n};\nexport const cardReducer = (\n  state: initStateType = initialState,\n  action: ActionTypesCards,\n): initStateType => {\n  switch (action.type) {\n    case 'CARDS/SET_DATA_CARDS':\n      return { ...state, cards: action.cards };\n    case 'CARDS/REMOVE_CARD':\n      return { ...state, cards: state.cards.filter(c => c._id !== action._id) };\n    case 'CARDS/ADD_CARD':\n      return { ...state, cards: [action.card, ...state.cards] };\n    case 'CARDS/UPDATE_CARD':\n      return {\n        ...state,\n        cards: state.cards.map(c =>\n          c._id === action.dataUpdate._id\n            ? {\n                ...c,\n                question: action.dataUpdate.question,\n                answer: action.dataUpdate.answer,\n              }\n            : c,\n        ),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setCardsAC = (cards: cardType[]) =>\n  ({ type: 'CARDS/SET_DATA_CARDS', cards } as const);\n\nexport const removeCardAC = (_id: string) =>\n  ({ type: 'CARDS/REMOVE_CARD', _id } as const);\n\nexport const addCardAC = (card: cardType) => ({ type: 'CARDS/ADD_CARD', card } as const);\n\nexport const updateCardAC = (_id: string, answer: string, question: string) =>\n  ({\n    type: 'CARDS/UPDATE_CARD',\n    dataUpdate: {\n      _id,\n      answer,\n      question,\n    },\n  } as const);\n\nexport const getCardsTC =\n  (cardsPackId: string) =>\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\n    // const { answer, question } = getState().cards;\n    dispatch(setAppStatusAC(requestStatus.loading));\n    cardsAPI\n      .getCards(cardsPackId)\n      .then(res => {\n        dispatch(setCardsAC(res.data.cards));\n        dispatch(setAppStatusAC(requestStatus.succeeded));\n      })\n      .catch(e => {\n        dispatch(setAppStatusAC(requestStatus.succeeded));\n        const errorNetwork = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\n        const timeOut = 2000;\n        setTimeout(() => {\n          dispatch(setErrorMessageNetworkAC(''));\n        }, timeOut);\n      })\n      .finally(() => {\n        dispatch(setAppStatusAC(requestStatus.idle));\n      });\n  };\nexport const removeCardTC =\n  (_id: string) =>\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\n    dispatch(setAppStatusAC(requestStatus.loading));\n    cardsAPI\n      .deleteCard(_id)\n      .then(() => {\n        dispatch(removeCardAC(_id));\n        dispatch(setAppStatusAC(requestStatus.succeeded));\n      })\n      .catch((e: AxiosError) => {\n        dispatch(setAppStatusAC(requestStatus.succeeded));\n        const errorNetwork = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\n      });\n  };\n\nexport const addCardTC =\n  (payload: AddCardType) =>\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\n    dispatch(setAppStatusAC(requestStatus.loading));\n    cardsAPI.addNewCard(payload).then(res => {\n      const newCard = res.data.cards;\n      dispatch(addCardAC(newCard));\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n    });\n  };\n\nexport const updateCardTC =\n  (dataUpdate: cardType) =>\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesCards>) => {\n    dispatch(setAppStatusAC(requestStatus.loading));\n    cardsAPI.updateCard(dataUpdate).then(res => {\n      const { _id, question, answer } = res.data.cards;\n      dispatch(updateCardAC(_id, question, answer));\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n    });\n  };\n\n// types\nexport type getCardsType = ReturnType<typeof setCardsAC>;\nexport type removeCardType = ReturnType<typeof removeCardAC>;\nexport type addCardType = ReturnType<typeof addCardAC>;\nexport type updateCardType = ReturnType<typeof updateCardAC>;\n\nexport type ActionTypesCards =\n  | getCardsType\n  | SetAppStatusActionType\n  | removeCardType\n  | SetErrorMessageNetworkType\n  | addCardType\n  | updateCardType;\n","import { AxiosResponse } from 'axios';\n\nimport { Nullable } from '../types';\n\nimport { instance } from './apiConfig';\n\nexport type AddNewPassType = {\n  email: Nullable<string>;\n  from?: Nullable<string>;\n  message?: Nullable<string>;\n};\n\nexport type SetNewPassType = {\n  password: Nullable<string>;\n  resetPasswordToken?: Nullable<string>;\n};\n\nexport type AddNewPassResponseType = {\n  info: Nullable<string>;\n  error: Nullable<string>;\n};\n\nexport const addNewPassAPI = {\n  addNewPass(params: AddNewPassType) {\n    return instance.post<AddNewPassType, AxiosResponse<AddNewPassResponseType>>(\n      'auth/forgot',\n      params,\n    );\n  },\n  setNewPass(params: SetNewPassType) {\n    return instance.post<SetNewPassType, AxiosResponse<AddNewPassResponseType>>(\n      'auth/set-new-password',\n      params,\n    );\n  },\n};\n","import { RootStateType } from '../../types';\n\nexport const getIsDataLoaded = (state: RootStateType): boolean => state.login.isAuth;\nexport const getErrorMessage = (state: RootStateType): any => state.login.error;\n","import { RootStateType } from '../../types';\n\nexport const getIsInitialized = (state: RootStateType): boolean =>\n  state.app.isInitialized;\nexport const getStatus = (state: RootStateType): string => state.app.status;\n","import { RootStateType } from '../../types';\n\nimport { Nullable } from 'types';\n\nexport const getErrorNetworkMessage = (\n  state: RootStateType,\n): Nullable<string> | undefined => state.errorMessage.errorNetwork;\nexport const getErrorValidMessage = (\n  state: RootStateType,\n): Nullable<string> | undefined => state.errorMessage.errorValidation;\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Link, Navigate } from 'react-router-dom';\n\nimport { CustomInput } from '../customInput';\n\nimport st from './Login.module.css';\n\nimport { CustomButton, Preloader } from 'components';\nimport { PATH, requestStatus } from 'enum';\nimport { useAppSelector, useInput } from 'hooks';\nimport {\n  getErrorNetworkMessage,\n  getErrorValidMessage,\n  setErrorMessagePassAC,\n  logInTC,\n} from 'store';\nimport { setAppStatusAC } from 'store/reducers';\nimport { getIsDataLoaded, getStatus } from 'store/selectors';\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types';\nimport { isEmailValid, isPasswordValid } from 'utils';\n\nexport const Login = (): ReturnComponentType => {\n  const [rememberMe, handleRememberMe] = useState<boolean>(false);\n  const { value: email, handleValue: handleEmail, resetValue: resetEmail } = useInput('');\n  const {\n    value: password,\n    handleValue: handlePassword,\n    resetValue: resetPassword,\n  } = useInput('');\n\n  const dispatch = useDispatch();\n\n  const isDataLoaded = useAppSelector(getIsDataLoaded);\n  /* const errorMessage = useAppSelector(getErrorMessage); */\n  const isLoading = useAppSelector(getStatus);\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\n\n  const onChangeCheckBox = (e: ChangeEvent<HTMLInputElement>): void =>\n    handleRememberMe(e.currentTarget.checked);\n  const timeOut = 2000;\n\n  const onClickHandlerLogin = (): void => {\n    if (!isPasswordValid(password) || !isEmailValid(email)) {\n      dispatch(setErrorMessagePassAC('invalid data ;-('));\n      setTimeout(() => {\n        dispatch(setErrorMessagePassAC(''));\n      }, timeOut);\n      return;\n    }\n    if (isPasswordValid(password) && isEmailValid(email)) {\n      dispatch(logInTC({ email, password, rememberMe }));\n      resetEmail('');\n      resetPassword('');\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n    }\n  };\n  if (isDataLoaded) {\n    return <Navigate to={PATH.PROFILE} />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {isLoading === 'loading' ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <div className={style.contentWrap}>\n            <h2> Login </h2>\n            {errorPassMessage && (\n              <span style={{ color: 'red' }}> {errorPassMessage} </span>\n            )}\n            {errorNetworkMessage && (\n              <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\n            )}\n            <CustomInput\n              onChange={handleEmail}\n              value={email}\n              placeholder=\"Email\"\n              typeInput=\"text\"\n            />\n            <CustomInput\n              placeholder=\"password\"\n              typeInput=\"password\"\n              value={password}\n              onChange={handlePassword}\n            />\n            <div className={st.rememberMeInput}>\n              remember me\n              <input type=\"checkbox\" checked={rememberMe} onChange={onChangeCheckBox} />\n            </div>\n            <div>\n              <Link to={PATH.CONFIRM_PASSWORD}> Forgot password </Link>\n            </div>\n            <div style={{ minWidth: '50px' }}>\n              <CustomButton title=\"Sign In\" onClick={onClickHandlerLogin} />\n            </div>\n            {/* <button onClick={onClickHandlerLogin} className={style.btn}>\n              Sign In\n            </button> */}\n            <p> Do not have an account? </p>\n            <Link to={PATH.REGISTRATION}> Sign Up </Link>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/avatar.4f216192.png\";","export default __webpack_public_path__ + \"static/media/preloader1.9c1d25d2.gif\";","import React from 'react';\n\nimport { ReturnComponentType } from '../../types';\n\nimport style from './Preloader.module.css';\n\nimport preloader1 from 'assets/preloader1.gif';\n\nexport const Preloader = (): ReturnComponentType => (\n  <div>\n    <img className={style.loader} src={preloader1} alt=\"preloader\" />\n  </div>\n);\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, NavLink } from 'react-router-dom';\n\nimport noneAvatarImage from '../../assets/avatar.png';\nimport { InitialStateProfileType } from '../../store/reducers/profile';\n\nimport { Preloader } from 'components/preloader/Preloader';\nimport { PATH } from 'enum/pathes';\nimport { useAppSelector } from 'hooks/useAppSelector';\nimport { RootStoreType } from 'store';\nimport { logOutTC } from 'store/reducers/login';\nimport { getStatus } from 'store/selectors/app/appSelectors';\nimport { getIsDataLoaded } from 'store/selectors/login/loginSelectors';\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types';\n\nexport const Profile = (): ReturnComponentType => {\n  // const userName = useSelector<RootStoreType, any>(state => state.login.name);\n  const userData = useSelector<RootStoreType, InitialStateProfileType>(\n    state => state.profilePage,\n  );\n  const dispatch = useDispatch();\n  const isAuth = useAppSelector(getIsDataLoaded);\n  const isLoading = useAppSelector(getStatus);\n\n  const { avatar } = userData.profile;\n\n  const [name, setName] = useState(userData.profile.name);\n  const [email, setEmail] = useState(userData.profile.email);\n\n  const [editMode, setEditMode] = useState<boolean>(false);\n\n  const onChangeHandlerName = (event: ChangeEvent<HTMLInputElement>): void => {\n    setName(event.currentTarget.value);\n  };\n  const onChangeHandlerEmail = (event: ChangeEvent<HTMLInputElement>): void => {\n    setEmail(event.currentTarget.value);\n  };\n\n  const activateEditForm = (): void => setEditMode(true);\n  const hideEditForm = (): void => {\n    setEditMode(false);\n  };\n  const onPhotoSelected = (event: ChangeEvent<HTMLInputElement>): void => {\n    if (event.target.files) {\n      // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n      // updateProfileTC(event.target.files[0]);\n    }\n  };\n\n  const onClickLogOut = (): void => {\n    dispatch(logOutTC());\n  };\n\n  if (!isAuth) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {isLoading === 'loading' ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <h2> Profile </h2>\n          <img\n            alt=\"avatar_image\"\n            className={style.avatar}\n            src={avatar !== null ? avatar : noneAvatarImage}\n          />\n          <input type=\"file\" className={style.avatar} onChange={onPhotoSelected} />\n          {isAuth ? (\n            <div>\n              <button className={style.btn} onClick={onClickLogOut}>\n                Log out\n              </button>\n            </div>\n          ) : (\n            <NavLink to={PATH.LOGIN}>Login</NavLink>\n          )}\n          <br />\n          {editMode ? (\n            <input\n              name=\"name\"\n              value={name}\n              onChange={onChangeHandlerName}\n              onBlur={hideEditForm}\n            />\n          ) : (\n            <span onDoubleClick={activateEditForm}>{name}</span>\n          )}\n          <br />\n          {editMode ? (\n            <input\n              name=\"email\"\n              value={email}\n              onChange={onChangeHandlerEmail}\n              onBlur={hideEditForm}\n            />\n          ) : (\n            <span onDoubleClick={activateEditForm}>{email}</span>\n          )}\n          <br />\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Dispatch } from 'redux';\n\nimport { setAppStatusAC } from './appInitialized';\nimport { setErrorMessageNetworkAC } from './errorReducer';\n\nimport { authAPI, RegisterParamsType } from 'api';\nimport { requestStatus } from 'enum';\n\nconst initialState = {\n  isFetching: false,\n  isSignUp: false,\n};\ntype InitialStateType = typeof initialState;\n\nexport const signUpReducer = (\n  state = initialState,\n  action: SignUpActionTypes,\n): InitialStateType => {\n  switch (action.type) {\n    case 'REGISTRATION/IS_FETCHING':\n      return { ...state, isFetching: action.isFetching };\n    case 'REGISTRATION/IS_SIGNUP_SUCCESSFUL': {\n      return {\n        ...state,\n        isSignUp: action.isSignUpSuccessful,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const toggleIsFetchingAC = (isFetching: boolean) =>\n  ({\n    type: 'REGISTRATION/IS_FETCHING',\n    isFetching,\n  } as const);\nexport const toggleIsSignUpAC = (isSignUpSuccessful: boolean) =>\n  ({\n    type: 'REGISTRATION/IS_SIGNUP_SUCCESSFUL',\n    isSignUpSuccessful,\n  } as const);\nexport const setErrorAC = (error: null | string) =>\n  ({ type: 'RECOVERY/ERROR', payload: { error } } as const);\n\nexport const signUpTC =\n  (params: RegisterParamsType) =>\n  (\n    dispatch: Dispatch<\n      | SignUpActionTypes\n      | ReturnType<typeof setErrorMessageNetworkAC>\n      | ReturnType<typeof setAppStatusAC>\n    >,\n  ) => {\n    dispatch(toggleIsFetchingAC(true));\n    dispatch(setAppStatusAC(requestStatus.loading));\n    authAPI\n      .register(params)\n      .then(() => {\n        dispatch(toggleIsSignUpAC(true));\n        dispatch(setAppStatusAC(requestStatus.succeeded));\n      })\n      .catch(e => {\n        dispatch(setAppStatusAC(requestStatus.succeeded));\n        const errorNetwork = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\n        const timeOut = 2000;\n        setTimeout(() => {\n          dispatch(setErrorMessageNetworkAC(''));\n        }, timeOut);\n      })\n      .finally(() => {\n        dispatch(toggleIsFetchingAC(false));\n      });\n  };\nexport type SetErrorType = ReturnType<typeof setErrorAC>;\n\ntype SignUpActionTypes =\n  | ReturnType<typeof toggleIsFetchingAC>\n  | ReturnType<typeof toggleIsSignUpAC>\n  | SetErrorType;\n","import React from 'react';\n\nimport st from './Registrations.module.css';\n\nimport { CustomButton, CustomInput } from 'components';\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\ntype PropsType = {\n  email: string;\n  password: string;\n  handleEmail: () => void;\n  confirmPassword: string;\n  handlePassword: () => void;\n  handleConfirmPassword: () => void;\n  isFetching: boolean;\n  onSendButtonClick: () => void;\n  onCancelButtonClick: () => void;\n  errorValid: any;\n  errorNetwork: any;\n};\n\nexport const SignUp = (props: PropsType): ReturnComponentType => {\n  const {\n    email,\n    handleEmail,\n    errorValid,\n    errorNetwork,\n    password,\n    confirmPassword,\n    handlePassword,\n    handleConfirmPassword,\n    onSendButtonClick,\n    onCancelButtonClick,\n    isFetching,\n  } = props;\n  return (\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <div className={style.contentWrap}>\n          <h2>Registration</h2>\n          <span style={{ color: 'red' }}> {errorValid} </span>\n          <span style={{ color: 'red' }}> {errorNetwork} </span>\n          <CustomInput\n            placeholder=\"Email\"\n            typeInput=\"email\"\n            onChange={handleEmail}\n            value={email}\n            name=\"user[email]\"\n          />\n          <CustomInput\n            placeholder=\"Password\"\n            typeInput=\"password\"\n            onChange={handlePassword}\n            value={password}\n            name=\"user[password]\"\n          />\n          <CustomInput\n            placeholder=\"Confirm Password\"\n            typeInput=\"password\"\n            onChange={handleConfirmPassword}\n            value={confirmPassword}\n            name=\"user[password]\"\n          />\n          <p> Have fun! </p>\n          <div className={st.btns}>\n            <CustomButton title=\"Cancel\" onClick={onCancelButtonClick} />\n            <CustomButton\n              title=\"Create\"\n              onClick={onSendButtonClick}\n              disabled={isFetching}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { RootStoreType } from '../../store';\nimport { setErrorMessagePassAC } from '../../store/reducers/errorReducer';\nimport { signUpTC } from '../../store/reducers/signUp';\nimport {\n  getErrorNetworkMessage,\n  getErrorValidMessage,\n} from '../../store/selectors/confirmPassword';\n\nimport { SignUp } from './signUp';\n\nimport { PATH } from 'enum/pathes';\nimport { useAppSelector, useInput } from 'hooks';\nimport { ReturnComponentType } from 'types';\nimport { isEmailValid, isPasswordValid } from 'utils';\n\nexport const SignUpContainer = (): ReturnComponentType => {\n  const { value: email, handleValue: handleEmail, resetValue: resetEmail } = useInput('');\n  const {\n    value: password,\n    handleValue: handlePassword,\n    resetValue: resetPassword,\n  } = useInput('');\n  const {\n    value: confirmPassword,\n    handleValue: handleConfirmPassword,\n    resetValue: resetConfirmPassword,\n  } = useInput('');\n\n  const isFetching = useSelector<RootStoreType, boolean>(\n    state => state.signUp.isFetching,\n  );\n  const isSignUp = useSelector<RootStoreType, boolean>(state => state.signUp.isSignUp);\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\n\n  const dispatch = useDispatch();\n\n  const data: any = {\n    email,\n    password,\n  };\n  const timeOut = 1000;\n\n  const onCancelButtonClick = (): void => {\n    resetEmail('');\n    resetPassword('');\n    resetConfirmPassword('');\n  };\n\n  const onSendButtonClick = (): void => {\n    if (\n      password !== confirmPassword ||\n      password === null ||\n      confirmPassword === null ||\n      !isPasswordValid(password) ||\n      !isEmailValid(email)\n    ) {\n      dispatch(setErrorMessagePassAC('invalid data ;-('));\n      setTimeout(() => {\n        dispatch(setErrorMessagePassAC(''));\n      }, timeOut);\n    }\n    if (isPasswordValid(password) && isEmailValid(email)) {\n      dispatch(signUpTC(data));\n      resetPassword('');\n      resetEmail('');\n      resetConfirmPassword('');\n    }\n  };\n  if (isSignUp) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n  return (\n    <SignUp\n      email={email}\n      password={password}\n      confirmPassword={confirmPassword}\n      handleEmail={handleEmail}\n      handlePassword={handlePassword}\n      handleConfirmPassword={handleConfirmPassword}\n      isFetching={isFetching}\n      onSendButtonClick={onSendButtonClick}\n      onCancelButtonClick={onCancelButtonClick}\n      errorValid={errorPassMessage}\n      errorNetwork={errorNetworkMessage}\n    />\n  );\n};\n","import { PATH } from 'enum';\n\nexport const appNavigation: appNavigationType = [\n  { id: 1, title: 'registration', link: PATH.REGISTRATION },\n  { id: 2, title: 'login', link: PATH.LOGIN },\n  { id: 3, title: 'profile', link: PATH.PROFILE },\n  { id: 4, title: 'confirmPassword', link: PATH.CONFIRM_PASSWORD },\n  { id: 5, title: 'popup', link: PATH.POPUP },\n  { id: 6, title: 'createNewPassword', link: PATH.CREATE_NEW_PASSWORD },\n  { id: 7, title: 'cards', link: PATH.CARDS },\n  { id: 8, title: 'page404', link: PATH.PAGE_404 },\n];\n\ntype appNavigationType = { id: number; title: string; link: string }[];\n","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nimport style from './Navigation.module.css';\n\nimport { appNavigation } from 'constants/Navigation';\nimport { ReturnComponentType } from 'types';\n\nexport const Navigation = (): ReturnComponentType => (\n  <div className={style.nav}>\n    <div className={style.wrap}>\n      <div className={style.navList}>\n        {appNavigation.map(({ id, title, link }) => (\n          <NavLink className={style.listItem} to={link} key={id}>\n            <div className={style.navElement}>{title}</div>\n          </NavLink>\n        ))}\n      </div>\n    </div>\n  </div>\n);\n","import { AxiosResponse } from 'axios';\n\nimport { ResponseDeckType } from './decksTC';\n\nimport { instance } from 'api/apiConfig';\n\nexport type addNewDeckType = {\n  name: string;\n};\n\nexport type updateDeckType = {\n  _id: string;\n};\n\nexport const decksAPI = {\n  fetchDecks(page: number, pageCount: number) {\n    return instance.get<any, AxiosResponse<ResponseDeckType>>('cards/pack', {\n      params: { page, pageCount },\n    });\n  },\n  addNewDeck(cardsPack: addNewDeckType) {\n    return instance.post<addNewDeckType, AxiosResponse<any>>('cards/pack', { cardsPack });\n  },\n\n  removeDeck(id: string) {\n    return instance.delete<string, any>(`cards/pack/?id=${id}`);\n  },\n\n  updateDeck(cardsPack: updateDeckType) {\n    return instance.put<string, any>('cards/pack', { cardsPack });\n  },\n};\n","import { AxiosError } from 'axios';\nimport { Dispatch } from 'redux';\n\nimport { AppThunk } from '../../types/AppThunkType';\n\nimport { addNewDeckType, decksAPI } from './decksApi';\n\nimport { requestStatus } from 'enum';\nimport { setErrorMessageNetworkAC } from 'store';\nimport { setAppStatusAC } from 'store/reducers';\n\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\n\nexport type deckTemplate = {\n  _id: string;\n  userId?: string | undefined;\n  name?: string;\n  path?: string;\n  cardsCount?: number;\n  grade?: number;\n  shots?: number;\n  rating?: number;\n  type?: string;\n  created?: string;\n  updated?: string;\n  __v?: number;\n  user_name?: string;\n};\n\nexport type ResponseDeckType = {\n  cardPacks: deckTemplate[];\n  cardPacksTotalCount: number; // totalCount\n  maxCardsCount: number;\n  minCardsCount: number;\n  page: number; // currentPage\n  pageCount: number; // perPage\n};\nconst initialState: ResponseDeckType = {\n  cardPacks: [],\n  cardPacksTotalCount: 0,\n  maxCardsCount: 0,\n  minCardsCount: 0,\n  page: 1,\n  pageCount: 10,\n};\n\nexport const decksReducer = (\n  state: ResponseDeckType = initialState,\n  action: ActionsType,\n): ResponseDeckType => {\n  switch (action.type) {\n    case 'FETCH_DECKS':\n      // return [...state, ...action.decks];\n      return { ...state, ...action.payload };\n    case 'REMOVE_DECK':\n      // return state.filter(deck => deck._id !== action.id);\n      return {\n        ...state,\n        cardPacks: state.cardPacks.filter(deck => deck._id !== action.id),\n      };\n    case 'ADD_DECK':\n      // return [{ ...action.deck }, ...state];\n      return { ...state, cardPacks: [action.deck, ...state.cardPacks] };\n    case 'UPDATE_DECK':\n      // return state.map(deck =>\n      //   deck._id === action.id ? { ...deck, name: action.title } : deck,\n      // );\n      // debugger;\n      return {\n        ...state,\n        cardPacks: state.cardPacks.map(deck =>\n          deck._id === action.id ? { ...deck, name: action.title } : deck,\n        ),\n      };\n    case 'SET_CURRENT_PAGE':\n      return { ...state, page: action.pageNumber };\n    default:\n      return state;\n  }\n};\n\n// actions\nexport const fetchDecksAC = (payload: any) =>\n  ({\n    type: 'FETCH_DECKS',\n    payload,\n  } as const);\nexport const deleteDeckAC = (id: string) =>\n  ({\n    type: 'REMOVE_DECK',\n    id,\n  } as const);\nexport const addDeckAC = (deck: any) =>\n  ({\n    type: 'ADD_DECK',\n    deck,\n  } as const);\n\nexport const upDateDeckAC = (title: any, id: string) =>\n  ({\n    type: 'UPDATE_DECK',\n    title,\n    id,\n  } as const);\nexport const setCurrentPageAC = (pageNumber: number) =>\n  ({\n    type: SET_CURRENT_PAGE,\n    pageNumber,\n  } as const);\n\ntype ActionsType =\n  | ReturnType<typeof fetchDecksAC>\n  | ReturnType<typeof deleteDeckAC>\n  | ReturnType<typeof addDeckAC>\n  | ReturnType<typeof upDateDeckAC>\n  | ReturnType<typeof setCurrentPageAC>;\n\n// thunk\n\nexport const setDecksTC = (): AppThunk => (dispatch: Dispatch, getState) => {\n  const { page, pageCount } = getState().decks;\n  dispatch(setAppStatusAC(requestStatus.loading));\n  decksAPI\n    .fetchDecks(page, pageCount)\n    .then(res => {\n      dispatch(fetchDecksAC(res.data));\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n    })\n    .catch((e: AxiosError) => {\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n      const errorNetwork = e.response\n        ? e.response.data.error\n        : `${e.message}, more details in the console`;\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\n    });\n};\nexport const removeDeckTC = (id: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC(requestStatus.loading));\n  decksAPI\n    .removeDeck(id)\n    .then(() => {\n      dispatch(deleteDeckAC(id));\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n    })\n    .catch((e: AxiosError) => {\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n      const errorNetwork = e.response\n        ? e.response.data.error\n        : `${e.message}, more details in the console`;\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\n    });\n};\n\nexport const addDeckTC = (dataPayload: addNewDeckType) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC(requestStatus.loading));\n  decksAPI\n    .addNewDeck(dataPayload)\n    .then(res => {\n      const deck = res.data.newCardsPack;\n      dispatch(addDeckAC(deck));\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n    })\n    .catch((e: AxiosError) => {\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n      const errorNetwork = e.response\n        ? e.response.data.error\n        : `${e.message}, more details in the console`;\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\n    });\n};\n\nexport const upDateDeckTC = (title: any, _id: string) => (dispatch: Dispatch) => {\n  dispatch(setAppStatusAC(requestStatus.loading));\n  decksAPI\n    .updateDeck({ _id })\n    .then(() => {\n      dispatch(upDateDeckAC(title, _id));\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n    })\n    .catch((e: AxiosError) => {\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n      const errorNetwork = e.response\n        ? e.response.data.error\n        : `${e.message}, more details in the console`;\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\n    });\n};\n","/* eslint-disable @typescript-eslint/no-magic-numbers */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable react/jsx-key */\nimport React from 'react';\n\nimport './pagination.scss';\n\nimport { DOTS, usePagination } from 'hooks';\nimport { ReturnComponentType } from 'types';\n\ntype PaginationPropsType = {\n  currentPage: number;\n  onPageChange: (page: number) => void;\n  totalCount: number;\n  siblingCount?: number;\n  pageSize: number;\n};\n\n// export const Pagination = React.memo((props: PaginationPropsType) => {\n//   const { pages, currentPage } = props;\n//   const dispatch = useDispatch();\n//   const onPageClick = (newCurrentPage: number): void => {\n//     dispatch(setCurrentPageAC(newCurrentPage));\n//   };\n//   return (\n//     <div className={s.pagination}>\n//       {pages.map((page, index) => {\n//         const pageClassName = page === currentPage ? s.activePage : s.page;\n//         return (\n//           // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions\n//           <div\n//             // eslint-disable-next-line react/no-array-index-key\n//             key={index}\n//             className={pageClassName}\n//             onClick={() => onPageClick(page)}\n//           >\n//             {page}\n//           </div>\n//         );\n//       })}\n//     </div>\n//   );\n// });\n\nexport const Pagination = (props: PaginationPropsType): ReturnComponentType => {\n  const { onPageChange, totalCount, siblingCount = 1, currentPage, pageSize } = props;\n\n  const paginationRange = usePagination({\n    currentPage,\n    totalCount,\n    siblingCount,\n    pageSize,\n  });\n\n  if (currentPage === 0 || paginationRange.length < 2) {\n    return null;\n  }\n\n  const onNext = (): void => {\n    onPageChange(currentPage + 1);\n  };\n\n  const onPrevious = (): void => {\n    onPageChange(currentPage - 1);\n  };\n  const lastPage = paginationRange[paginationRange.length - 1];\n  const ulClassName = currentPage === 1 ? 'pagination-item disabled' : 'pagination-item';\n  const liSelected =\n    currentPage === lastPage ? 'pagination-item disabled' : 'pagination-item';\n\n  return (\n    <ul className=\"pagination-container\">\n      {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n      <li className={ulClassName} onClick={onPrevious}>\n        <div className=\"arrow left\" />\n      </li>\n      {paginationRange.map((pageNumber: any) => {\n        if (pageNumber === DOTS) {\n          return (\n            <li\n              className=\"pagination-item dots\"\n              key={pageNumber + Math.random().toString()}\n            >\n              &#8230;\n            </li>\n          );\n        }\n        const liDisabled =\n          pageNumber === currentPage ? 'pagination-item selected' : 'pagination-item';\n\n        return (\n          <li\n            className={liDisabled}\n            onClick={() => onPageChange(pageNumber)}\n            key={pageNumber}\n          >\n            {pageNumber}\n          </li>\n        );\n      })}\n      <li className={liSelected} onClick={onNext}>\n        <div className=\"arrow right\" />\n      </li>\n    </ul>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\n\nimport { upDateDeckTC } from './decksTC';\n\ntype EditableSpanPropsType = {\n  value: any;\n  id: string;\n};\n\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n  const [editMode, setEditMode] = useState(false);\n  const [title, setTitle] = useState(props.value);\n\n  const dispatch = useDispatch();\n\n  const activateEditMode = (): void => {\n    setEditMode(true);\n    setTitle(props.value);\n  };\n  const activateViewMode = (): void => {\n    dispatch(upDateDeckTC(title, props.id));\n    setEditMode(false);\n  };\n  const changeTitle = (e: ChangeEvent<HTMLTextAreaElement>): void => {\n    setTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    // eslint-disable-next-line jsx-a11y/no-autofocus\n    <textarea value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\n  ) : (\n    <span onDoubleClick={activateEditMode}>{props.value}</span>\n  );\n});\n","import React, { ChangeEvent, useEffect, useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport style from '../../style/Common.module.css';\nimport { Pagination } from '../pagination';\n\nimport {\n  addDeckTC,\n  deckTemplate,\n  removeDeckTC,\n  setCurrentPageAC,\n  setDecksTC,\n} from './decksTC';\nimport { EditableSpan } from './EditableSpan';\nimport styleTable from './Table.module.css';\n\nimport { Preloader, TableSidebar } from 'components';\nimport { useAppSelector } from 'hooks';\nimport { getErrorNetworkMessage, setErrorMessageNetworkAC } from 'store';\nimport { getStatus } from 'store/selectors';\nimport { ReturnComponentType } from 'types';\n\nexport const Table = (): ReturnComponentType => {\n  const [title, setTitle] = useState('');\n\n  const dispatch = useDispatch();\n\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\n  const isLoading = useAppSelector(getStatus);\n  const cardPacks = useAppSelector(state => state.decks.cardPacks);\n  const totalCount = useAppSelector(state => state.decks.cardPacksTotalCount);\n  const currentPage = useAppSelector(state => state.decks.page);\n  const perPage = useAppSelector(state => state.decks.pageCount);\n  // const pagesCount = Math.ceil(totalCount / perPage);\n\n  useEffect(() => {\n    dispatch(setDecksTC());\n  }, [dispatch, currentPage]);\n\n  const random = 100000;\n\n  const onRemoveDeckClick = (id: string): void => {\n    dispatch(removeDeckTC(id));\n    dispatch(setErrorMessageNetworkAC(''));\n  };\n\n  const onTitleEnterChange = (e: ChangeEvent<HTMLTextAreaElement>): void => {\n    setTitle(e.currentTarget.value);\n  };\n  const addButtonClick = (): void => {\n    dispatch(addDeckTC({ name: title }));\n    setTitle('');\n  };\n\n  /* const onClickCards = (cardsPack_id: string): void => {\n    dispatch(getCardsTC(cardsPack_id));\n  }; */\n  // const onFilterMyPacksClick = (): void => {};\n\n  return (\n    <div className={styleTable.wrap}>\n      <div className={styleTable.wrapper}>\n        <TableSidebar />\n        {isLoading === 'loading' ? (\n          <Preloader />\n        ) : (\n          <div className={styleTable.rightBlock}>\n            <div className={styleTable.decks}>\n              <h3 style={{ fontSize: '1.1em' }}> Packs list </h3>\n              <div className={styleTable.searchInputSection}>\n                <input\n                  className={styleTable.inputSearch}\n                  id=\"decks\"\n                  placeholder=\"Search\"\n                  type=\"search\"\n                />\n                <textarea\n                  className={styleTable.textArea}\n                  placeholder=\"name pack\"\n                  value={title}\n                  onChange={onTitleEnterChange}\n                />\n                <button className={style.btn} onClick={addButtonClick}>\n                  Add new pack\n                </button>\n              </div>\n\n              <div className={styleTable.tableCommon}>\n                <div className={styleTable.element}>\n                  <div className={styleTable.elementPartOne} style={{ fontSize: '16px' }}>\n                    Name\n                  </div>\n                  <div className={styleTable.elementPartTwo} style={{ fontSize: '16px' }}>\n                    CardsCount\n                  </div>\n                  <div\n                    className={styleTable.elementPartThree}\n                    style={{ fontSize: '16px' }}\n                  >\n                    Updated\n                  </div>\n                  <div\n                    className={styleTable.elementPartFour}\n                    style={{ fontSize: '16px' }}\n                  >\n                    Created by\n                  </div>\n                </div>\n\n                <div className={styleTable.tableRow}>\n                  {errorNetworkMessage && (\n                    <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\n                  )}\n                  {cardPacks.map((cardPack: deckTemplate) => (\n                    <div className={styleTable.element} key={Math.random() * random}>\n                      <div className={styleTable.elementPartOne}>\n                        <EditableSpan value={cardPack.name} id={cardPack._id} />\n                      </div>\n                      <div className={styleTable.elementPartTwo}>\n                        {cardPack.cardsCount}\n                      </div>\n                      <div className={styleTable.elementPartThree}>\n                        {cardPack.updated}\n                      </div>\n                      <div className={styleTable.elementPartFour}>\n                        {cardPack.user_name}\n                      </div>\n                      <button className={styleTable.btn}>update</button>\n                      <button\n                        className={styleTable.btn}\n                        onClick={() => onRemoveDeckClick(cardPack._id)}\n                      >\n                        delete\n                      </button>\n                      <Link to={`/cards/${cardPack._id}`}>cards</Link>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      <Pagination\n        // className=\"pagination-bar\"\n        currentPage={currentPage}\n        totalCount={totalCount}\n        pageSize={perPage}\n        onPageChange={(page: number) => dispatch(setCurrentPageAC(page))}\n      />\n    </div>\n  );\n};\n","import React, { ChangeEvent, useState } from 'react';\n\nimport style from './Range.module.css';\n\nexport const SuperRange = (): any => {\n  const initialValue = 0;\n  const [number, setNumber] = useState<number>(initialValue);\n  const onChangeRange = (e: ChangeEvent<HTMLInputElement>): void => {\n    setNumber(+e.currentTarget.value);\n  };\n  return (\n    <div>\n      {number}\n      <input\n        type=\"range\"\n        onChange={onChangeRange}\n        value={number}\n        className={style.range}\n      />\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RootStoreType } from '../../store';\nimport { deckTemplate, fetchDecksAC, setDecksTC } from '../table/decksTC';\n\nimport s from './tableSidebar.module.css';\n\nimport { CustomButton } from 'components';\nimport { SuperRange } from 'components/table';\n\nexport const TableSidebar = React.memo(() => {\n  const dispatch = useDispatch();\n  const decks = useSelector<RootStoreType, deckTemplate[]>(\n    state => state.decks.cardPacks,\n  );\n\n  const myPacks = decks.filter(deck => deck.user_name === 'samutic40@gmail.com');\n\n  const onFilterMyPacksClick = (): void => {\n    dispatch(\n      fetchDecksAC({\n        cardPacksTotalCount: 0,\n        maxCardsCount: 0,\n        minCardsCount: 0,\n        page: 0,\n        pageCount: 0,\n        cardPacks: myPacks,\n      }),\n    );\n  };\n  const onAllButtonClick = (): void => {\n    dispatch(setDecksTC());\n  };\n  return (\n    <div className={s.tableSidebar}>\n      <div className={s.pickBlock}>\n        <h3 className={s.header3}>Show cards packs</h3>\n        <div className={s.buttonsContainer}>\n          <CustomButton title=\"My\" onClick={onFilterMyPacksClick} />\n          <CustomButton title=\"All\" onClick={onAllButtonClick} />\n        </div>\n      </div>\n      <div className={s.pickBlock}>\n        <div>Number of cards</div>\n        <SuperRange />\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\n\nimport s from './CustomButton.module.css';\n\ntype ButtonPropsType = {\n  title: string;\n  onClick: () => void;\n  disabled?: boolean;\n};\n\nexport const CustomButton = React.memo((props: ButtonPropsType) => {\n  const { onClick, title, disabled } = props;\n  const onButtonClick = (): void => {\n    onClick();\n  };\n  return (\n    <button className={s.button} onClick={onButtonClick} disabled={disabled}>\n      {title}\n    </button>\n  );\n});\n","export default __webpack_public_path__ + \"static/media/error404.688fee4d.gif\";","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport error404 from '../../assets/error404.gif';\nimport { ReturnComponentType } from '../../types';\n\nimport st from './Page_error_404.module.css';\n\nexport const PageError404 = (): ReturnComponentType => (\n  <div>\n    <div className={st.mainContainer}>\n      <div className={st.imagine}>\n        <img src={error404} alt=\"error404\" className={st.page_404} />\n      </div>\n      <div className={st.linkContainer}>\n        {' '}\n        <Link to=\"/profile\" className={st.link}>\n          Back to home\n        </Link>\n      </div>\n    </div>\n  </div>\n);\n","import React, { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Link, Navigate } from 'react-router-dom';\n\nimport style from '../../style/Common.module.css';\nimport { CustomButton } from '../customButton';\nimport { CustomInput } from '../customInput';\nimport { Preloader } from '../preloader';\n\nimport { AddNewPassType } from 'api';\nimport { useAppSelector, useInput } from 'hooks';\nimport {\n  setErrorMessagePassAC,\n  getErrorNetworkMessage,\n  getErrorValidMessage,\n  getStatus,\n  forgotPassAddEmailTC,\n} from 'store';\nimport { ReturnComponentType } from 'types';\nimport { isEmailValid } from 'utils';\n\nexport const ConfirmPassword = (): ReturnComponentType => {\n  const [isShown, setShowMessage] = useState(false);\n  const { value: email, handleValue: handleEmail, resetValue: resetEmail } = useInput('');\n\n  const dispatch = useDispatch();\n\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\n  const isLoading = useAppSelector(getStatus);\n\n  const dataPayload: AddNewPassType = {\n    email,\n    from: 'test-front-admin <samutic40@gmail.com>',\n    message: `<div style='background-color: #ffd500; \npadding: 15px; \nborder-color: #ff9900; \nwidth: 250px;\nheight: 30px'> \npassword recovery link: <a href='https://or1ginald.github.io/gameCards/#/createNewPassword/$token$'> recovery link </a></div>`,\n  };\n\n  const timeOut = 2000;\n  const onSendButtonClick = (): void => {\n    if (isEmailValid(email)) {\n      dispatch(forgotPassAddEmailTC(dataPayload, setShowMessage));\n      resetEmail('');\n    } else {\n      dispatch(setErrorMessagePassAC('invalid email ;-('));\n      setTimeout(() => {\n        dispatch(setErrorMessagePassAC(''));\n      }, timeOut);\n    }\n  };\n\n  if (isShown) {\n    return <Navigate to=\"/popup\" />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {isLoading === 'loading' ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <div className={style.contentWrap}>\n            <h2>Forgot your password?</h2>\n            {errorPassMessage && (\n              <span style={{ color: 'red' }}> {errorPassMessage} </span>\n            )}\n            {errorNetworkMessage && (\n              <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\n            )}\n            <div className={style.inputCentering}>\n              <CustomInput\n                placeholder=\"Email\"\n                typeInput=\"email\"\n                onChange={handleEmail}\n                value={email}\n              />\n            </div>\n            <p> Enter your email and we will send you further instructions</p>\n            <div>\n              <CustomButton title=\"Send instructions\" onClick={onSendButtonClick} />\n              {/* <button className={style.btn} onClick={onSendButtonClick}>\n                send instructions\n              </button> */}\n            </div>\n            <span>Did you remember your password?</span>\n            <Link to=\"/login\"> Try logging in </Link>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Dispatch } from 'redux';\n\nimport { setAppStatusAC } from '../reducers';\nimport { setErrorMessageNetworkAC } from '../reducers/errorReducer';\n\nimport { addNewPassAPI, AddNewPassType } from 'api/forgotPasswordApi';\nimport { requestStatus } from 'enum';\n\nexport const forgotPassAddEmailTC =\n  (dataPayload: AddNewPassType, setShowMessage: any) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC(requestStatus.loading));\n    addNewPassAPI\n      .addNewPass(dataPayload)\n      .then(() => {\n        setShowMessage(true);\n        dispatch(setAppStatusAC(requestStatus.succeeded));\n      })\n      .catch(e => {\n        dispatch(setAppStatusAC(requestStatus.succeeded));\n        const errorNetwork = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\n        const timeOut = 2000;\n        setTimeout(() => {\n          dispatch(setErrorMessageNetworkAC(''));\n        }, timeOut);\n      });\n  };\n","import React, { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Navigate, useParams } from 'react-router-dom';\n\nimport style from '../../style/Common.module.css';\nimport { CustomButton } from '../customButton';\nimport { CustomInput } from '../customInput';\nimport { Preloader } from '../preloader';\n\nimport { SetNewPassType } from 'api';\nimport { PATH, requestStatus } from 'enum';\nimport { useAppSelector, useInput } from 'hooks';\nimport {\n  setAppStatusAC,\n  setErrorMessagePassAC,\n  getErrorNetworkMessage,\n  getErrorValidMessage,\n  getStatus,\n  forgotPassSetPassTC,\n} from 'store';\nimport { ReturnComponentType } from 'types';\nimport { isPasswordValid } from 'utils';\n\nexport const CreateNewPassword = (): ReturnComponentType => {\n  const [isLoadedData, setLoadedData] = useState(false);\n  const {\n    value: newPassword,\n    handleValue: handleNewPassword,\n    resetValue: resetNewPassword,\n  } = useInput('');\n\n  const dispatch = useDispatch();\n\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\n  const isLoading = useAppSelector(getStatus);\n\n  const params = useParams<'token'>();\n  const { token } = params as { token: string };\n\n  const data: SetNewPassType = {\n    password: newPassword,\n    resetPasswordToken: token,\n  };\n\n  const timeOut = 2000;\n  const onCreateButtonClick = (): void => {\n    if (isPasswordValid(newPassword)) {\n      dispatch(setAppStatusAC(requestStatus.loading));\n      dispatch(forgotPassSetPassTC(data, setLoadedData));\n\n      dispatch(setAppStatusAC(requestStatus.succeeded));\n      resetNewPassword();\n    } else {\n      dispatch(setErrorMessagePassAC('invalid password ;-('));\n      setTimeout(() => {\n        dispatch(setErrorMessagePassAC(''));\n      }, timeOut);\n    }\n  };\n\n  if (isLoadedData) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {isLoading === requestStatus.loading ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <div className={style.contentWrap}>\n            <h2>Create new password</h2>\n            {errorPassMessage && (\n              <span style={{ color: 'red' }}> {errorPassMessage} </span>\n            )}\n            {errorNetworkMessage && (\n              <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\n            )}\n            <div className={style.inputCentering}>\n              <CustomInput\n                placeholder=\"Password\"\n                typeInput=\"password\"\n                onChange={handleNewPassword}\n                value={newPassword}\n              />\n            </div>\n            <p> Create new password and we will send you further instructions to email</p>\n            <div>\n              <CustomButton title=\"Create new password\" onClick={onCreateButtonClick} />\n              {/* <button className={style.btn} onClick={onCreateButtonClick}>\n                Create new password\n              </button> */}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Dispatch } from 'redux';\n\nimport { addNewPassAPI, SetNewPassType } from '../../api/forgotPasswordApi';\nimport { setErrorMessageNetworkAC } from '../reducers/errorReducer';\n\nexport const forgotPassSetPassTC =\n  (data: SetNewPassType, setLoadedData: any) => (dispatch: Dispatch) => {\n    addNewPassAPI\n      .setNewPass(data)\n      .then(() => {\n        setLoadedData(true);\n      })\n      .catch(e => {\n        const errorNetwork = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\n        const timeOut = 2000;\n        setTimeout(() => {\n          dispatch(setErrorMessageNetworkAC(''));\n        }, timeOut);\n      });\n  };\n","export default __webpack_public_path__ + \"static/media/letter.3761fe05.png\";","import React from 'react';\n\nimport letter from '../../assets/letter.png';\nimport style from '../../style/Common.module.css';\n\nimport st from './ConfirmPassword.module.css';\n\nimport { ReturnComponentType } from 'types';\n\nexport const Popup = (): ReturnComponentType => (\n  <div>\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <img className={st.letterImg} src={letter} alt=\"letter\" />\n        <div className={style.contentWrap}>\n          <h2 className={st.heading}>Check Email</h2>\n          <p>We have sent the Email with instructions to your email </p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n","import React, { useEffect } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\n\nimport { cardType } from '../../api/cardsApi';\nimport { useAppSelector } from '../../hooks';\nimport { getErrorNetworkMessage, setErrorMessageNetworkAC } from '../../store';\nimport { getCardsTC, removeCardTC } from '../../store/reducers/cards';\nimport { ReturnComponentType } from '../../types';\nimport { CustomButton } from '../customButton';\nimport style from '../table/TableGrid.module.css';\n\nimport s from './cards.module.css';\n\nimport { PATH } from 'enum/pathes';\n\nexport const Cards = (): ReturnComponentType => {\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\n  const cards = useAppSelector(state => state.cards.cards);\n  // const userId = useAppSelector(state => state.cards.packUserId);\n  console.log('cards', cards);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const random = 100000;\n  const params = useParams<'cardsPack_id'>();\n  const { cardsPack_id } = params as { cardsPack_id: string };\n  const onClickRemoveCard = (_id: string): void => {\n    dispatch(removeCardTC(_id));\n    dispatch(setErrorMessageNetworkAC(''));\n  };\n  const onClickAddCard = (): void => {\n    navigate(PATH.CARD);\n  };\n\n  useEffect(() => {\n    dispatch(getCardsTC(cardsPack_id));\n  }, [cardsPack_id]);\n  return (\n    <div>\n      <button className={s.btn} onClick={onClickAddCard}>\n        Add new card\n      </button>\n      <table className={style.table}>\n        <thead>\n          <tr>\n            <th>Question</th>\n            <th>Answer</th>\n            <th>Last Updated</th>\n            <th>Created</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        {/* */}\n        <tbody>\n          {cards.map((card: cardType) => (\n            <tr key={Math.random() * random}>\n              <td>{card.question}</td>\n              <td>{card.answer}</td>\n              <td>{card.updated}</td>\n              <td>{card.created}</td>\n              <td>\n                {/* {userId ? ( */}\n                <div className={style.btns}>\n                  <CustomButton\n                    title=\"delete\"\n                    onClick={() => onClickRemoveCard(card._id)}\n                  />\n                  <CustomButton title=\"update\" onClick={() => {}} />\n                  {/* <button>update</button>\n                  <button onClick={() => onRemoveDeckClick(cardPack._id)}>delete</button> */}\n                </div>\n                {/*  ) : (\n                  ''\n                )} */}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      {errorNetworkMessage && (\n        <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { useNavigate } from 'react-router-dom';\n\nimport s from './cards.module.css';\n\nimport { Preloader } from 'components';\nimport { PATH, requestStatus } from 'enum';\nimport { useAppSelector, useInput } from 'hooks';\nimport { getStatus } from 'store/selectors';\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types';\n\nexport const Card = (): ReturnComponentType => {\n  const { value: question, handleValue: handleQuestion } = useInput('');\n  const { value: answer, handleValue: handleAnswer } = useInput('');\n  /* const grade = useAppSelector(state => state.cards.grade);\n  const shots = useAppSelector(state => state.cards.shots);\n  // const cardsPackId = useAppSelector(state => state.decks);\n  const dispatch = useDispatch(); */\n  const navigate = useNavigate();\n  const isLoading = useAppSelector(getStatus);\n  const onClickHandlerCancel = (): void => {\n    navigate(PATH.CARDS);\n  };\n\n  /* const onClickAddCard = (): void => {\n    dispatch(addCardTC({ cardsPack_id, question, answer, grade, shots }));\n  }; */\n  return (\n    <div className={style.mainContainer}>\n      {isLoading === requestStatus.loading ? (\n        <Preloader />\n      ) : (\n        <div className={s.contentCard}>\n          <div className={style.contentWrap}>\n            <h2> Card </h2>\n            <div className={s.container}>\n              <textarea\n                className={s.textarea}\n                placeholder=\"Question\"\n                value={question}\n                onChange={handleQuestion}\n              />\n              <textarea\n                className={s.textarea}\n                placeholder=\"Answer\"\n                value={answer}\n                onChange={handleAnswer}\n              />\n            </div>\n            <div className={s.buttons}>\n              <button className={s.btn} onClick={onClickHandlerCancel}>\n                Cancel\n              </button>\n              <button className={s.btn} onClick={() => {}}>\n                Add card\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Table } from './table/Table';\n\nimport { ReturnComponentType } from 'types';\n\nexport const Test = (): ReturnComponentType => (\n  /*  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setDecksTC());\n  }, []); */\n  /* const isLoading = useAppSelector(getStatus); */\n  <div>\n    <Table />\n    {/* <Screen /> */}\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Route, Routes } from 'react-router-dom';\n\nimport s from './App.module.css';\nimport style from './components/navigation/Navigation.module.css';\nimport { ReturnComponentType } from './types';\n\nimport {\n  Popup,\n  ConfirmPassword,\n  CreateNewPassword,\n  Login,\n  Navigation,\n  Preloader,\n  Profile,\n  SignUpContainer,\n  PageError404,\n  Cards,\n} from 'components';\nimport { Card } from 'components/cards/Card';\nimport { Test } from 'components/Test';\nimport { PATH } from 'enum';\nimport { useAppSelector } from 'hooks';\nimport { initializeAppTC } from 'store';\nimport { getIsInitialized } from 'store/selectors';\nimport st from 'style/Common.module.css';\n\nexport const App = (): ReturnComponentType => {\n  const [showMenu, setShowMenu] = useState(false);\n  const isInitialized = useAppSelector(getIsInitialized);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(initializeAppTC());\n  }, [dispatch]);\n  if (!isInitialized) {\n    return (\n      <div className={s.preloaderWrap}>\n        <Preloader />\n      </div>\n    );\n  }\n\n  // 1\n\n  const showMenuHandler = (): void => {\n    setShowMenu(!showMenu);\n  };\n  return (\n    <div className={s.app}>\n      <div className={s.layout}>\n        <div>\n          <button className={st.btn} onClick={showMenuHandler}>\n            Show menu\n          </button>\n        </div>\n        {showMenu ? <Navigation /> : <div className={style.nav} />}\n\n        <div className={s.main}>\n          <Routes>\n            <Route path={PATH.LOGIN} element={<Login />} />\n            <Route path={PATH.REGISTRATION} element={<SignUpContainer />} />\n            <Route path={PATH.PROFILE} element={<Profile />} />\n            <Route path={PATH.PAGE_404} element={<PageError404 />} />\n            <Route path={PATH.CONFIRM_PASSWORD} element={<ConfirmPassword />} />\n            <Route path={PATH.POPUP} element={<Popup />} />\n            <Route path={PATH.CREATE_NEW_PASSWORD} element={<CreateNewPassword />} />\n            <Route path={PATH.CARDS} element={<Cards />}>\n              <Route path=\":cardsPack_id\" element={<Cards />} />\n            </Route>\n            <Route path={PATH.CARD} element={<Card />} />\n            <Route path=\"/\" element={<Test />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { decksReducer } from '../components/table/decksTC';\n\nimport { errorForgotPasswordReducer } from './reducers/errorReducer';\nimport { signUpReducer } from './reducers/signUp';\n\nimport { appReducer, cardReducer, loginReducer, profileReducer } from 'store';\n\nexport const rootReducer = combineReducers({\n  cards: cardReducer,\n  signUp: signUpReducer,\n  login: loginReducer,\n  profilePage: profileReducer,\n  errorMessage: errorForgotPasswordReducer,\n  app: appReducer,\n  decks: decksReducer,\n});\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStoreType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\n\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/navigation/Navigation.module.css","components/confirmPassword/ConfirmPassword.module.css","components/404/Page_error_404.module.css","style/Common.module.css","App.module.css","components/customInput/CustomInputText.module.css","components/preloader/Preloader.module.css","components/loginPage/Login.module.css","components/registrations/Registrations.module.css","components/table/Range.module.css","components/table/Table.module.css","enum/pathes.ts","assets/error404.gif","components/404/Page_error_404.tsx","hooks/useAppSelector.ts","hooks/useInput/useInput.ts","store/reducers/cards.ts","api/apiConfig/index.ts","api/loginApi.ts","store/reducers/appInitialized.ts","store/reducers/login.ts","store/reducers/profile.ts","store/selectors/login/loginSelectors.ts","store/selectors/app/appSelectors.ts","components/customInput/CustomInput.tsx","assets/preloader1.gif","components/preloader/Preloader.tsx","components/loginPage/Login.tsx","components/profile/Profile.tsx","api/forgotPasswordApi.ts","store/reducers/signUp.ts","components/registrations/signUp.tsx","utils/emailValidation.ts","utils/passwordValidation.ts","components/registrations/signUpContainer.tsx","constants/Navigation/appNavigation.ts","components/navigation/Navigation.tsx","store/reducers/errorReducer.ts","store/selectors/confirmPassword/errorSelectors.ts","components/confirmPassword/ConfirmPassword.tsx","store/middlewares/forgotPassAddEmailTC.ts","components/confirmPassword/CreateNewPassword.tsx","store/middlewares/forgotPassSetPassTC.ts","assets/letter.png","components/confirmPassword/Popup.tsx","assets/error.png","components/table/decksApi.ts","components/table/decksTC.tsx","components/table/Range.tsx","components/table/Table.tsx","components/Test.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","PATH","PageError404","className","st","mainContainer","src","error404","alt","page_404","linkContainer","to","link","useAppSelector","useSelector","useInput","initialValue","useState","value","setValue","handleValue","e","target","resetValue","initState","instance","axios","create","baseURL","process","withCredentials","authAPI","params","post","delete","initialState","status","error","isInitialized","setAppStatusAC","type","isAuth","setAuthLoginDataAC","setErrorMessageAC","_id","avatar","name","email","rememberMe","getIsDataLoaded","state","login","getErrorMessage","getIsInitialized","app","getStatus","CustomInput","memo","placeholder","typeInput","onChange","s","inputWrap","input","autoComplete","spellCheck","Preloader","style","loader","preloader1","Login","handleRememberMe","handleEmail","password","handlePassword","dispatch","useDispatch","isDataLoaded","errorMessage","isLoading","PROFILE","content","contentWrap","color","display","justifyContent","alignItems","flexWrap","rememberMeInput","checked","currentTarget","CONFIRM_PASSWORD","onClick","data","then","catch","response","message","finally","btn","REGISTRATION","Profile","isAuthUser","LOGIN","addNewPassAPI","isFetching","isSignUp","toggleIsFetchingAC","setErrorAC","payload","SignUp","props","handleConfirmPassword","onSendButtonClick","btns","disabled","isEmailValid","test","isPasswordValid","SignUpContainer","confirmPassword","signUp","isSignUpSuccessful","appNavigation","id","title","POPUP","CREATE_NEW_PASSWORD","PAGE_404","Navigation","nav","wrap","navList","map","listItem","navElement","errorValidation","errorNetwork","setErrorMessagePassAC","setErrorMessageNetworkAC","getErrorNetworkMessage","getErrorValidMessage","ConfirmPassword","isShown","setShowMessage","setEmail","errorPassMessage","errorNetworkMessage","dataPayload","from","inputCentering","inputEmail","forgotPassAddEmailTC","CreateNewPassword","isLoadedData","setLoadedData","newPassword","setPassword","partPath","useLocation","pathname","split","token","length","resetPasswordToken","inputPassword","forgotPassSetPassTC","Popup","letterImg","letter","heading","decksAPI","get","SuperRange","number","setNumber","range","Table","useEffect","res","console","log","decks","cardPacks","styleTable","wrapper","leftBlock","rightBlock","searchInputSection","inputSearch","tableCommon","tableCaption","captionElement","tableRow","deck","element","elementPart","cardsCount","updated","Math","random","Test","App","showMenu","setShowMenu","position","top","textAlign","width","layout","main","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","cards","action","profilePage","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,IAAM,wBAAwB,KAAO,yBAAyB,SAAW,6BAA6B,WAAa,+BAA+B,EAAI,sBAAsB,QAAU,8B,mBCAxMD,EAAOC,QAAU,CAAC,UAAY,mCAAmC,SAAW,kCAAkC,QAAU,mC,mBCAxHD,EAAOC,QAAU,CAAC,cAAgB,sCAAsC,cAAgB,wC,kBCAxFD,EAAOC,QAAU,CAAC,cAAgB,8BAA8B,YAAc,4BAA4B,QAAU,wBAAwB,IAAM,oBAAoB,WAAa,2BAA2B,cAAgB,8BAA8B,eAAiB,iC,mBCA7QD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,KAAO,oB,mBCA7ED,EAAOC,QAAU,CAAC,WAAa,oCAAoC,MAAQ,+BAA+B,WAAa,oCAAoC,MAAQ,+BAA+B,UAAY,qC,mBCA9MD,EAAOC,QAAU,CAAC,OAAS,4B,mBCA3BD,EAAOC,QAAU,CAAC,gBAAkB,iC,mBCApCD,EAAOC,QAAU,CAAC,KAAO,8B,mBCAzBD,EAAOC,QAAU,CAAC,MAAQ,uB,uCCA1BD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,UAAY,yBAAyB,KAAO,oBAAoB,WAAa,0BAA0B,MAAQ,qBAAqB,QAAU,uBAAuB,YAAc,2BAA2B,aAAe,4BAA4B,eAAiB,8BAA8B,IAAM,mBAAmB,mBAAqB,kCAAkC,YAAc,6B,2CCD7aC,E,sFCAG,MAA0B,qC,wBCS5BC,EAAe,kBAC1B,8BACE,sBAAKC,UAAWC,IAAGC,cAAnB,UACE,8BACE,qBAAKC,IAAKC,EAAUC,IAAI,WAAWL,UAAWC,IAAGK,aAEnD,sBAAKN,UAAWC,IAAGM,cAAnB,UACG,IACD,cAAC,IAAD,CAAMC,GAAG,WAAWR,UAAWC,IAAGQ,KAAlC,mC,iBCbKC,EAAsDC,ICQtDC,EAAW,SAACC,GACvB,MAA0BC,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KAMA,MAAO,CAAED,QAAOE,YAJI,SAACC,GAAD,OAClBF,EAASE,EAAEC,OAAOJ,QAGSK,WAFV,kBAAYJ,EAASH,MCjBpCQ,EAAY,G,eCILC,E,OAAWC,EAAMC,OAAO,CACnCC,QAHcC,sCAIdC,iBAAiB,ICFNC,EAAU,SACfC,GACJ,OAAOP,EAASQ,KAKd,aAAcD,IAPPD,EAAU,WAUnB,OAAON,EAASS,OAAqB,UAAW,KAVvCH,EAAU,WAanB,OAAON,EAASQ,KAAmB,YAb1BF,EAAU,SAeZC,GACP,OAAOP,EAASQ,KAA8B,gBAAiBD,ICXtDG,EAAiC,CAC5CC,OAAQ,OACRC,MAAO,KACPC,eAAe,GAqBJC,EAAiB,SAACH,GAAD,MAC3B,CAAEI,KAAM,iBAAkBJ,WCrBhBD,EAAqC,CAChDM,QAAQ,EACRJ,MAAO,MAuBIK,EAAqB,SAACD,GAAD,MAC/B,CAAED,KAAM,4BAA6BC,WAE3BE,EAAoB,SAACN,GAAD,MAC9B,CAAEG,KAAM,0BAA2BH,UChChCF,EAAqC,CACzCS,IAAK,KACLC,OAAQ,KACRC,KAAM,KACNC,MAAO,KACPC,YAAY,GCbDC,EAAkB,SAACC,GAAD,OAAmCA,EAAMC,MAAMV,QACjEW,EAAkB,SAACF,GAAD,OAA+BA,EAAMC,MAAMd,OCD7DgB,EAAmB,SAACH,GAAD,OAC9BA,EAAMI,IAAIhB,eACCiB,EAAY,SAACL,GAAD,OAAkCA,EAAMI,IAAIlB,Q,iBCYxDoB,EAAcC,gBACzB,gBACEC,EADF,EACEA,YADF,IAEEC,iBAFF,MAEc,OAFd,EAGExD,EAHF,EAGEA,UACAe,EAJF,EAIEA,MACA0C,EALF,EAKEA,SACAd,EANF,EAMEA,KANF,OAQE,qBAAK3C,UAAW0D,IAAEC,UAAlB,SACE,uBACEtB,KAAMmB,EACNb,KAAMA,EACN5B,MAAOA,EACP0C,SAAUA,EACVF,YAAaA,EACbvD,UAAS,OAAEA,QAAF,IAAEA,IAAa0D,IAAEE,MAC1BC,aAAa,MACbC,YAAY,EACZ,oBAAkB,c,iBCnCX,MAA0B,uCCQ5BC,EAAY,kBACvB,8BACE,qBAAK/D,UAAWgE,IAAMC,OAAQ9D,IAAK+D,EAAY7D,IAAI,iB,2BfV3CP,K,6BAAAA,E,eAAAA,E,mBAAAA,E,sCAAAA,E,eAAAA,E,yCAAAA,E,eAAAA,M,yBgBiBCqE,EAAQ,WACnB,MAAuCrD,oBAAkB,GAAzD,mBAAO+B,EAAP,KAAmBuB,EAAnB,KACA,EAAmDxD,EAAS,IAA7CgC,EAAf,EAAQ7B,MAA2BsD,EAAnC,EAAsBpD,YACtB,EAAyDL,EAAS,IAAnD0D,EAAf,EAAQvD,MAA8BwD,EAAtC,EAAyBtD,YACnBuD,EAAWC,cACXC,EAAehE,EAAeoC,GAC9B6B,EAAejE,EAAeuC,GAC9B2B,EAAYlE,EAAe0C,GAOjC,OAAIsB,EACK,cAAC,IAAD,CAAUlE,GAAIV,EAAK+E,UAI1B,qBAAK7E,UAAWgE,IAAM9D,cAAtB,SACiB,YAAd0E,EACC,cAAC,EAAD,IAEA,qBAAK5E,UAAWgE,IAAMc,QAAtB,SACE,sBAAK9E,UAAWgE,IAAMe,YAAtB,UACE,yCACA,cAAC1B,EAAD,CACEI,SAAUY,EACVtD,MAAO6B,EACPW,YAAY,QACZC,UAAU,SAGZ,cAACH,EAAD,CACEE,YAAY,WACZC,UAAU,WACVzC,MAAOuD,EACPb,SAAUc,IAEXI,EACC,sBACEX,MAAO,CACLgB,MAAO,MACPC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,SAAU,QANd,UASG,IACAT,EAAc,OAGjB,GAEF,sBAAK3E,UAAWC,IAAGoF,gBAAnB,wBAEE,uBAAOhD,KAAK,WAAWiD,QAASzC,EAAYY,SAjD/B,SAACvC,GAAD,OACvBkD,EAAiBlD,EAAEqE,cAAcD,eAkDzB,8BACE,cAAC,IAAD,CAAM9E,GAAIV,EAAK0F,iBAAf,iCAEF,wBAAQC,QAnDU,WPiB5B,IAACC,EOhBClB,GPgBDkB,EOhBkB,CAAE9C,QAAO0B,WAAUzB,cPiBtC,SAAC2B,GACCA,EAASpC,EAAe,YACxBR,EACS8D,GACNC,MAAK,WACJnB,EAASjC,GAAmB,IAC5BiC,EAASpC,EAAe,iBAEzBwD,OAAM,SAAA1E,GACL,IAAMgB,EAAQhB,EAAE2E,SACZ3E,EAAE2E,SAASH,KAAKxD,MADN,UAEPhB,EAAE4E,QAFK,iCAGdtB,EAAShC,EAAkBN,IAC3BsC,EAASpC,EAAe,cAEzB2D,SAAQ,WACPvB,EAASpC,EAAe,gBOiBkBpC,UAAWgE,IAAMgC,IAAvD,qBAGA,0DACA,cAAC,IAAD,CAAMxF,GAAIV,EAAKmG,aAAf,+BCrECC,EAAU,WAErB,IAAMC,EAAazF,EAAeoC,GAC5B8B,EAAYlE,EAAe0C,GAC3BoB,EAAWC,cAIjB,OAAK0B,EAIH,qBAAKnG,UAAWgE,IAAM9D,cAAtB,SACiB,YAAd0E,EACC,cAAC,EAAD,IAEA,sBAAK5E,UAAWgE,IAAMc,QAAtB,UACE,2CACCqB,EACC,8BACE,wBAAQnG,UAAWgE,IAAMgC,IAAKP,QAfpB,WACpBjB,GR+CI,SAACA,GACLA,EAASpC,EAAe,YACxBR,IAAiB+D,MAAK,WACpBnB,EAASjC,GAAmB,IAC5BiC,EAAShC,EAAkB,KAC3BgC,EAASpC,EAAe,gBQtChB,uBAKF,cAAC,IAAD,CAAS5B,GAAIV,EAAKsG,MAAlB,wBAhBD,cAAC,IAAD,CAAU5F,GAAIV,EAAKsG,SCDjBC,GAAgB,SAChBxE,GACT,OAAOP,EAASQ,KACd,cACAD,IAJOwE,GAAgB,SAOhBxE,GACT,OAAOP,EAASQ,KACd,wBACAD,IC5BAG,GAAe,CACnBsE,YAAY,EACZpE,MAAO,KACPqE,UAAU,GAwBCC,GAAqB,SAACF,GAAD,MAC/B,CACCjE,KAAM,2BACNiE,eAOSG,GAAa,SAACvE,GAAD,MACvB,CAAEG,KAAM,iBAAkBqE,QAAS,CAAExE,W,oBCjB3ByE,GAAS,SAACC,GACrB,IACEhE,EASEgE,EATFhE,MACAyB,EAQEuC,EARFvC,YACAnC,EAOE0E,EAPF1E,MACAoC,EAMEsC,EANFtC,SACAC,EAKEqC,EALFrC,eACAsC,EAIED,EAJFC,sBACAC,EAGEF,EAHFE,kBAEAR,EACEM,EADFN,WAEF,OACE,qBAAKtG,UAAWgE,IAAM9D,cAAtB,SACE,qBAAKF,UAAWgE,IAAMc,QAAtB,SACE,sBAAK9E,UAAWgE,IAAMe,YAAtB,UACE,8CACA,+BAAO7C,IACP,cAACmB,EAAD,CACEE,YAAY,QACZC,UAAU,QAEVC,SAAUY,EACVtD,MAAO6B,EACPD,KAAK,gBAEP,cAACU,EAAD,CACEE,YAAY,WACZC,UAAU,WAEVC,SAAUc,EACVxD,MAAOuD,EACP3B,KAAK,mBAEP,cAACU,EAAD,CACEE,YAAY,mBACZC,UAAU,WAEVC,SAAUoD,EACV9F,MAAOuD,EACP3B,KAAK,mBAEP,4CACA,sBAAK3C,UAAWC,KAAG8G,KAAnB,UACE,wBAAQ/G,UAAWgE,IAAMgC,IAAzB,oBACA,wBACEhG,UAAWgE,IAAMgC,IACjBP,QAASqB,EACTE,SAAUV,EAHZ,+BCtECW,GAAe,SAACrE,GAG3B,MADE,uJACiBsE,KAAKtE,ICHbuE,GAAkB,SAAC7C,GAE9B,MADuB,kDACD4C,KAAK5C,ICahB8C,GAAkB,WAC7B,MAAmDxG,EAAS,IAA7CgC,EAAf,EAAQ7B,MAA2BsD,EAAnC,EAAsBpD,YACtB,EAAyDL,EAAS,IAAnD0D,EAAf,EAAQvD,MAA8BwD,EAAtC,EAAyBtD,YACzB,EAAuEL,EAAS,IAAjEyG,EAAf,EAAQtG,MAAqC8F,EAA7C,EAAgC5F,YAC1BiB,EAAQvB,aAA0C,SAAAoC,GAAK,OAAIA,EAAMuE,OAAOpF,SACxEoE,EAAa3F,aACjB,SAAAoC,GAAK,OAAIA,EAAMuE,OAAOhB,cAElBC,EAAW5F,aAAoC,SAAAoC,GAAK,OAAIA,EAAMuE,OAAOf,YACrE/B,EAAWC,cAEXiB,EAAY,CAChB9C,QACA0B,YAWF,OAAIiC,EACK,cAAC,IAAD,CAAU/F,GAAIV,EAAKsG,QAG1B,cAAC,GAAD,CACExD,MAAOA,EACPyB,YAAaA,EACbC,SAAUA,EACVC,eAAgBA,EAChBsC,sBAAuBA,EAEvBP,WAAYA,EACZQ,kBApBsB,WJc1B,IAACjF,EIbKyC,IAAa+C,GACf7C,EAASiC,GAAWvE,IAElBiF,GAAgB7C,IAAa2C,GAAarE,IAC5C4B,GJSH3C,EITqB6D,EJSU,SAAClB,GAC/BA,EAASgC,IAAmB,IAC5B5E,EACYC,GACT8D,MAAK,WACJnB,EAbL,CACCnC,KAAM,oCACNkF,oBAW8B,OAE3B3B,OAAM,SAAA1D,GACLsC,EAASiC,GAAWvE,EAAM2D,SAASH,KAAKxD,WAEzC6D,SAAQ,WACPvB,EAASgC,IAAmB,WIJ9BtE,MAAOA,KClDAsF,GAAmC,CAC9C,CAAEC,GAAI,EAAGC,MAAO,eAAgBjH,KAAMX,EAAKmG,cAC3C,CAAEwB,GAAI,EAAGC,MAAO,QAASjH,KAAMX,EAAKsG,OACpC,CAAEqB,GAAI,EAAGC,MAAO,UAAWjH,KAAMX,EAAK+E,SACtC,CAAE4C,GAAI,EAAGC,MAAO,kBAAmBjH,KAAMX,EAAK0F,kBAC9C,CAAEiC,GAAI,EAAGC,MAAO,QAASjH,KAAMX,EAAK6H,OACpC,CAAEF,GAAI,EAAGC,MAAO,oBAAqBjH,KAAMX,EAAK8H,qBAChD,CAAEH,GAAI,EAAGC,MAAO,UAAWjH,KAAMX,EAAK+H,WCA3BC,GAAa,kBACxB,qBAAK9H,UAAWgE,IAAM+D,IAAtB,SACE,qBAAK/H,UAAWgE,IAAMgE,KAAtB,SACE,qBAAKhI,UAAWgE,IAAMiE,QAAtB,SACGT,GAAcU,KAAI,gBAAGT,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOjH,EAAd,EAAcA,KAAd,OACjB,cAAC,IAAD,CAAST,UAAWgE,IAAMmE,SAAU3H,GAAIC,EAAxC,SACE,qBAAKT,UAAWgE,IAAMoE,WAAtB,SAAmCV,KADcD,aCPvDzF,GAAqC,CACzCqG,gBAAiB,KACjBC,aAAc,MAwBHC,GAAwB,SAACF,GAAD,MAClC,CAAEhG,KAAM,+CAAgDgG,oBAE9CG,GAA2B,SAACF,GAAD,MACrC,CAAEjG,KAAM,4CAA6CiG,iBClC3CG,GAAyB,SACpC1F,GADoC,OAEHA,EAAM4B,aAAa2D,cACzCI,GAAuB,SAClC3F,GADkC,OAEDA,EAAM4B,aAAa0D,iBCezCM,GAAkB,WAC7B,MAAkC7H,oBAAS,GAA3C,mBAAO8H,EAAP,KAAgBC,EAAhB,KACA,EAA0B/H,mBAAS,IAAnC,mBAAO8B,EAAP,KAAckG,EAAd,KAEMtE,EAAWC,cAEXsE,EAAmBrI,EAAegI,IAClCM,EAAsBtI,EAAe+H,IACrC7D,EAAYlE,EAAe0C,GAE3B6F,EAA8B,CAClCrG,QACAsG,KAAM,yCACNpD,QAAQ,oPAuBV,OAAI8C,EACK,cAAC,IAAD,CAAUpI,GAAG,WAIpB,qBAAKR,UAAWgE,IAAM9D,cAAtB,SACiB,YAAd0E,EACC,cAAC,EAAD,IAEA,qBAAK5E,UAAWgE,IAAMc,QAAtB,SACE,sBAAK9E,UAAWgE,IAAMe,YAAtB,UACE,uDACCgE,GACC,uBAAM/E,MAAO,CAAEgB,MAAO,OAAtB,cAAiC+D,EAAjC,OAEDC,GACC,uBAAMhF,MAAO,CAAEgB,MAAO,OAAtB,cAAiCgE,EAAjC,OAEF,qBAAKhJ,UAAWgE,IAAMmF,eAAtB,SACE,uBACE5F,YAAY,QACZlB,KAAK,QACLrC,UAAWgE,IAAMoF,WACjB3F,SAtCkB,SAACvC,GAC/B4H,EAAS5H,EAAEqE,cAAcxE,OACzByD,EAAS+D,GAAsB,KAC/B/D,EAASgE,GAAyB,UAsC1B,4FACA,8BACE,wBAAQxI,UAAWgE,IAAMgC,IAAKP,QArChB,WACpBwB,GAAarE,IACf4B,EC7CJ,SAACyE,EAA6BJ,GAA9B,OAAsD,SAACrE,GACrDA,EAASpC,EAAe,YACxBiE,GACc4C,GACXtD,MAAK,WACJkD,GAAe,GACfrE,EAASpC,EAAe,iBAEzBwD,OAAM,SAAA1E,GACLsD,EAASpC,EAAe,cACxB,IAAMkG,EAAepH,EAAE2E,SACnB3E,EAAE2E,SAASH,KAAKxD,MADC,UAEdhB,EAAE4E,QAFY,iCAGrBtB,EAASgE,GAAyBF,QDgC3Be,CAAqBJ,EAAaJ,IAC3CC,EAAS,KAETtE,EAAS+D,GAAsB,uBAgCvB,iCAIF,mEACA,cAAC,IAAD,CAAM/H,GAAG,SAAT,sCEpEC8I,GAAoB,WAC/B,MAAsCxI,oBAAS,GAA/C,mBAAOyI,EAAP,KAAqBC,EAArB,KACA,EAAmC1I,mBAAS,IAA5C,mBAAO2I,EAAP,KAAoBC,EAApB,KAEMlF,EAAWC,cAEXsE,EAAmBrI,EAAegI,IAClCM,EAAsBtI,EAAe+H,IACrC7D,EAAYlE,EAAe0C,GAI3BuG,EAFWC,cAESC,SAASC,MAAM,KACnCC,EAAQJ,EAASA,EAASK,OAFZ,GAIdtE,EAAuB,CAC3BpB,SAAUmF,EACVQ,mBAAoBF,GAmBtB,OAAIR,EACK,cAAC,IAAD,CAAU/I,GAAG,WAIpB,qBAAKR,UAAWgE,IAAM9D,cAAtB,SACiB,YAAd0E,EACC,cAAC,EAAD,IAEA,qBAAK5E,UAAWgE,IAAMc,QAAtB,SACE,sBAAK9E,UAAWgE,IAAMe,YAAtB,UACE,qDACCgE,GACC,uBAAM/E,MAAO,CAAEgB,MAAO,OAAtB,cAAiC+D,EAAjC,OAEDC,GACC,uBAAMhF,MAAO,CAAEgB,MAAO,OAAtB,cAAiCgE,EAAjC,OAEF,qBAAKhJ,UAAWgE,IAAMmF,eAAtB,SACE,uBACE5F,YAAY,WACZlB,KAAK,WACLrC,UAAWgE,IAAMkG,cACjBzG,SAxCqB,SAACvC,GAClCwI,EAAYxI,EAAEqE,cAAcxE,OAC5ByD,EAAS+D,GAAsB,KAC/B/D,EAASgE,GAAyB,UAwC1B,wGACA,8BACE,wBAAQxI,UAAWgE,IAAMgC,IAAKP,QAvCd,WACtB0B,GAAgBsC,IAClBjF,EAASpC,EAAe,YACxBoC,EC9CJ,SAACkB,EAAsB8D,GAAvB,OAA8C,SAAChF,GAC7C6B,GACcX,GACXC,MAAK,WACJ6D,GAAc,MAEf5D,OAAM,SAAA1E,GACL,IAAMoH,EAAepH,EAAE2E,SACnB3E,EAAE2E,SAASH,KAAKxD,MADC,UAEdhB,EAAE4E,QAFY,iCAGrBtB,EAASgE,GAAyBF,QDoC3B6B,CAAoBzE,EAAM8D,IACnChF,EAASpC,EAAe,cACxBsH,EAAY,KAEZlF,EAAS+D,GAAsB,0BAgCvB,2CExFC,OAA0B,mC,oBCQ5B6B,GAAQ,kBACnB,8BACE,qBAAKpK,UAAWgE,IAAM9D,cAAtB,SACE,sBAAKF,UAAWgE,IAAMc,QAAtB,UACE,qBAAK9E,UAAWC,KAAGoK,UAAWlK,IAAKmK,GAAQjK,IAAI,WAC/C,sBAAKL,UAAWgE,IAAMe,YAAtB,UACE,oBAAI/E,UAAWC,KAAGsK,QAAlB,yBACA,mG,ICfK,I,OCUFC,GAAW,WAEpB,OAAOlJ,EAASmJ,IAA0C,eCexDzI,GAA+B,G,oBCJtB0I,GAnBI,WACjB,IACA,EAA4B5J,mBADP,GACrB,mBAAO6J,EAAP,KAAeC,EAAf,KAIA,OACE,gCACGD,EACD,uBACEtI,KAAK,QACLoB,SARgB,SAACvC,GACrB0J,GAAW1J,EAAEqE,cAAcxE,QAQvBA,MAAO4J,EACP3K,UAAWgE,KAAM6G,Y,mBCLZC,GAAQ,WACnB,IAAMtG,EAAWC,cACjBsG,qBAAU,WACRvG,GF+C4B,SAACA,GAC/BgG,KAEG7E,MAAK,SAAAqF,GACJC,QAAQC,IAAIF,EAAItF,MAChBlB,EApBH,CACCnC,KAAM,cACN8I,MAkBwBH,EAAItF,KAAK0F,eAEhCxF,OAAM,SAAC1D,GACN+I,QAAQC,IAAIhJ,EAAMwD,cEtDnB,CAAClB,IAEJ,IAAM2G,EAAQxK,aAAgC,SAAAoC,GAAK,OAAIA,EAAMoI,SAG7D,OACE,sBAAKnL,UAAWqL,KAAWC,QAA3B,UACE,sBAAKtL,UAAWqL,KAAWE,UAA3B,UACE,sBAAKvL,UAAWqL,KAAWtE,KAA3B,UACE,wBAAQ/G,UAAWgE,IAAMgC,IAAzB,gBACA,wBAAQhG,UAAWgE,IAAMgC,IAAzB,oBAEF,mDACA,cAAC,GAAD,OAGF,qBAAKhG,UAAWqL,KAAWG,WAA3B,SACE,sBAAKxL,UAAWqL,KAAWF,MAA3B,UACE,gDACA,sBAAKnL,UAAWqL,KAAWI,mBAA3B,UACE,uBACEzL,UAAWqL,KAAWK,YACtBjE,GAAG,QACHlE,YAAY,SACZlB,KAAK,WAEP,wBAAQrC,UAAWgE,IAAMgC,IAAzB,6BAGF,sBAAKhG,UAAWqL,KAAWM,YAA3B,UACE,sBAAK3L,UAAWqL,KAAWO,aAA3B,UACE,qBAAK5L,UAAWqL,KAAWQ,eAA3B,kBACA,qBAAK7L,UAAWqL,KAAWQ,eAA3B,wBACA,qBAAK7L,UAAWqL,KAAWQ,eAA3B,wBAGF,qBAAK7L,UAAWqL,KAAWS,SAA3B,SACGX,EAAMjD,KAAI,SAAC6D,GAAD,OACT,sBAAK/L,UAAWqL,KAAWW,QAA3B,UACE,qBAAKhM,UAAWqL,KAAWY,YAA3B,SAAyCF,EAAKpJ,OAC9C,qBAAK3C,UAAWqL,KAAWY,YAA3B,SAAyCF,EAAKG,aAC9C,qBAAKlM,UAAWqL,KAAWY,YAA3B,SAAyCF,EAAKI,UAC9C,wBAAQnM,UAAWqL,KAAWrF,IAA9B,oBACA,wBAAQhG,UAAWqL,KAAWrF,IAA9B,sBAxCD,IAmCwCoG,KAAKC,2BChDjDC,GAAO,kBAClB,8BAIE,cAAC,GAAD,OCiBSC,GAAM,WACjB,MAAgCzL,oBAAS,GAAzC,mBAAO0L,EAAP,KAAiBC,EAAjB,KACMtK,EAAgBzB,EAAewC,GAC/BsB,EAAWC,cAIjB,GAHAsG,qBAAU,WACRvG,GhCOI,SAACA,GACL5C,IAEG+D,MAAK,WACJnB,EAASjC,GAAmB,OAE7BwD,SAAQ,WACPvB,EAVL,CAAEnC,KAAM,yBAA0BF,eAUD,YgCb/B,KACEA,EACH,OACE,qBAAK6B,MAAO,CAAE0I,SAAU,QAASC,IAAK,MAAOC,UAAW,SAAUC,MAAO,QAAzE,SACE,cAAC,EAAD,MAUN,OACE,qBAAK7M,UAAW0D,IAAEP,IAAlB,SACE,sBAAKnD,UAAW0D,IAAEoJ,OAAlB,UACE,8BACE,wBAAQ9M,UAAWC,IAAG+F,IAAKP,QAPX,WACtBgH,GAAaD,IAMP,0BAIY,IAAbA,EAAoB,cAAC,GAAD,IAAiB,qBAAKxM,UAAWgE,IAAM+D,MAE5D,qBAAK/H,UAAW0D,IAAEqJ,KAAlB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAMlN,EAAKsG,MAAO4F,QAAS,cAAC,EAAD,MAClC,cAAC,IAAD,CAAOgB,KAAMlN,EAAKmG,aAAc+F,QAAS,cAAC,GAAD,MACzC,cAAC,IAAD,CAAOgB,KAAMlN,EAAK+E,QAASmH,QAAS,cAAC,EAAD,MACpC,cAAC,IAAD,CAAOgB,KAAK,KAAKhB,QAAS,cAAC,EAAD,MAC1B,cAAC,IAAD,CAAOgB,KAAMlN,EAAK0F,iBAAkBwG,QAAS,cAAC,GAAD,MAC7C,cAAC,IAAD,CAAOgB,KAAMlN,EAAK6H,MAAOqE,QAAS,cAAC,GAAD,MAClC,cAAC,IAAD,CAAOgB,KAAMlN,EAAK8H,oBAAqBoE,QAAS,cAAC,GAAD,MAChD,cAAC,IAAD,CAAOgB,KAAK,IAAIhB,QAAS,cAAC,GAAD,iBCrDtBiB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBxH,MAAK,YAAkD,IAA/CyH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCCDO,GAAcC,aAAgB,CACzCC,MrCPyB,WAGN,IAFnB5K,EAEkB,uDAFK1B,EACvBuM,EACkB,uCAMd,OALIA,EAAOvL,KAKJU,GqCDXuE,OvBD2B,WAGL,IAFtBvE,EAEqB,uDAFbf,GACR4L,EACqB,uCACrB,OAAQA,EAAOvL,MACb,IAAK,2BACH,OAAO,2BAAKU,GAAZ,IAAmBuD,WAAYsH,EAAOtH,aACxC,IAAK,iBACH,OAAO,2BAAKvD,GAAZ,IAAmBb,MAAO0L,EAAOlH,QAAQxE,QAC3C,IAAK,oCACH,OAAO,2BACFa,GADL,IAEEwD,SAAUqH,EAAOrG,qBAGrB,QACE,OAAOxE,IuBdXC,MjCK0B,WAGA,IAF1BD,EAEyB,uDAFKf,EAC9B4L,EACyB,uCACzB,OAAQA,EAAOvL,MACb,IAAK,4BACH,OAAO,2BACFU,GADL,IAEET,OAAQsL,EAAOtL,SAEnB,IAAK,0BACH,OAAO,2BACFS,GADL,IAEEb,MAAO0L,EAAO1L,QAElB,QACE,OAAOa,IiCpBX8K,YhCI4B,WAGF,IAF1B9K,EAEyB,uDAFKf,EAC9B4L,EACyB,uCACzB,MACO,kBADCA,EAAOvL,KAEJ,2BACFU,GACA6K,EAAOlH,SAQL3D,GgCnBX4B,ahBHwC,WAGd,IAF1B5B,EAEyB,uDAFKf,GAC9B4L,EACyB,uCACzB,OAAQA,EAAOvL,MACb,IAAK,+CACH,OAAO,2BACFU,GADL,IAEEsF,gBAAiBuF,EAAOvF,kBAE5B,IAAK,4CACH,OAAO,2BACFtF,GADL,IAEEuF,aAAcsF,EAAOtF,eAGzB,QACE,OAAOvF,IgBbXI,IlCDwB,WAGF,IAFtBJ,EAEqB,uDAFKf,EAC1B4L,EACqB,uCACrB,OAAQA,EAAOvL,MACb,IAAK,iBACH,OAAO,2BAAKU,GAAZ,IAAmBd,OAAQ2L,EAAO3L,SACpC,IAAK,gBACH,OAAO,2BAAKc,GAAZ,IAAmBb,MAAO0L,EAAO1L,QACnC,IAAK,yBACH,OAAO,2BAAKa,GAAZ,IAAmBZ,cAAeyL,EAAOzL,gBAC3C,QACE,OAAO,eAAKY,KkCVhBoI,MNY0B,WAGN,IAFpBpI,EAEmB,uDAFKf,GACxB4L,EACmB,uCACnB,OAAQA,EAAOvL,MACb,IAAK,cACH,MAAM,GAAN,oBAAWU,GAAX,aAAqB6K,EAAOzC,QAC9B,IAAK,cAEH,OAAOpI,EAAM+K,QAAO,SAAA/B,GAAI,OAAIA,EAAKtJ,MAAQmL,EAAOnG,MAElD,QACE,OAAO1E,MMtBAgL,GAAQC,aAAYP,GAAaQ,aAAgBC,OAM9DC,OAAOJ,MAAQA,GCdfK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACE,cAAC,GAAD,UAINQ,SAASC,eAAe,SAM1BvB,O","file":"static/js/main.8504c94d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__3CXyF\",\"wrap\":\"Navigation_wrap__3J-xK\",\"listItem\":\"Navigation_listItem__2wBIY\",\"navElement\":\"Navigation_navElement__3VPMA\",\"p\":\"Navigation_p__3EbMI\",\"navList\":\"Navigation_navList__FK_Ih\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"letterImg\":\"ConfirmPassword_letterImg__3UhNI\",\"errorImg\":\"ConfirmPassword_errorImg__1CPVm\",\"heading\":\"ConfirmPassword_heading__35OWf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Page_error_404_mainContainer__Bsswf\",\"linkContainer\":\"Page_error_404_linkContainer__22GLI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Common_mainContainer__1YbqG\",\"contentWrap\":\"Common_contentWrap__3cz03\",\"content\":\"Common_content__2nJCL\",\"btn\":\"Common_btn__3a_wE\",\"inputEmail\":\"Common_inputEmail__3iLZ5\",\"inputPassword\":\"Common_inputPassword__yLVis\",\"inputCentering\":\"Common_inputCentering__1z1RO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"layout\":\"App_layout__1LipR\",\"main\":\"App_main__3ZkGI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"CustomInputText_superInput__1rT3h\",\"input\":\"CustomInputText_input__3cd74\",\"errorInput\":\"CustomInputText_errorInput__1Hzuo\",\"error\":\"CustomInputText_error__zMENZ\",\"inputWrap\":\"CustomInputText_inputWrap__1SUXE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__3R_QX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rememberMeInput\":\"Login_rememberMeInput__2wEHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Registrations_btns__17Wql\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"Range_range__3HDfO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__2oJSk\",\"leftBlock\":\"Table_leftBlock__2T92C\",\"btns\":\"Table_btns__3lGSd\",\"rightBlock\":\"Table_rightBlock__1yX5h\",\"decks\":\"Table_decks__1RT47\",\"element\":\"Table_element__3yp2c\",\"elementPart\":\"Table_elementPart__2gjva\",\"tableCaption\":\"Table_tableCaption__uPa1x\",\"captionElement\":\"Table_captionElement__1Jtlm\",\"btn\":\"Table_btn__182RP\",\"searchInputSection\":\"Table_searchInputSection__UbmZC\",\"inputSearch\":\"Table_inputSearch__2W4-b\"};","export enum PATH {\n  REGISTRATION = '/registration',\n  LOGIN = '/login',\n  PROFILE = '/profile',\n  CONFIRM_PASSWORD = '/confirmPassword/*',\n  POPUP = '/popup',\n  CREATE_NEW_PASSWORD = '/createNewPassword',\n  PAGE_404 = '/*',\n}\n","export default __webpack_public_path__ + \"static/media/error404.688fee4d.gif\";","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport error404 from '../../assets/error404.gif';\nimport { ReturnComponentType } from '../../types';\n\nimport st from './Page_error_404.module.css';\n\nexport const PageError404 = (): ReturnComponentType => (\n  <div>\n    <div className={st.mainContainer}>\n      <div>\n        <img src={error404} alt=\"error404\" className={st.page_404} />\n      </div>\n      <div className={st.linkContainer}>\n        {' '}\n        <Link to=\"/profile\" className={st.link}>\n          Back to home\n        </Link>\n      </div>\n    </div>\n  </div>\n);\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\n\nimport { RootStateType } from 'store/types';\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\n","import { ChangeEvent, useState } from 'react';\n\n// type useInputPropsType = {\n//   value: string;\n//   setValue: any;\n//   reset: any;\n//   bind: {\n//     value: string;\n//     onChange: (event: any) => void;\n//   };\n// };\n\nexport const useInput = (initialValue: string): any => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleValue = (e: ChangeEvent<HTMLInputElement>): void =>\n    setValue(e.target.value);\n  const resetValue = (): void => setValue(initialValue);\n\n  return { value, handleValue, resetValue };\n};\n\n// return {\n//   value,\n//   setValue,\n//   reset: () => setValue(''),\n//   bind: {\n//     value,\n//     onChange: (event: any) => {\n//       setValue(event.target.value);\n//     },\n//   },\n// };\n\n// export const useInput = (initialValue: string): any => {\n//   const [inputValue, setInputValue] = useState(initialValue);\n//\n//   const handleInputValueChange = useCallback(\n//     (newValue: string) => setInputValue(newValue),\n//     [],\n//   );\n//\n//   return useMemo(\n//     () => ({ inputValue, handleInputValueChange }),\n//     [inputValue, handleInputValueChange],\n//   );\n// };\n","const initState = {};\n\ntype initStateType = {};\n\nexport const cardReducer = (\n  state: initStateType = initState,\n  action: any,\n): initStateType => {\n  switch (action.type) {\n    case '': {\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n","import axios from 'axios';\n\nconst baseUrl = process.env.REACT_APP_BASE_URL; // Достаем базовый юрл из .env(ссылка на хироку)\n\nexport const instance = axios.create({\n  baseURL: baseUrl,\n  withCredentials: true,\n});\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from './apiConfig';\n\nexport const authAPI = {\n  login(params: LoginParamsType) {\n    return instance.post<\n      LoginParamsType,\n      /* 'сам объект сервера который отправляет игнат' */\n      /* AxiosResponse нужен только у методов put и post */\n      AxiosResponse<ResponseType>\n    >('auth/login', params);\n  },\n  logOut() {\n    return instance.delete<ResponseType>('auth/me', {});\n  },\n  me() {\n    return instance.post<ResponseType>('auth/me');\n  },\n  register(params: RegisterParamsType) {\n    return instance.post<RegisterParamsType, any>('auth/register', params);\n  },\n};\n\n// types\n\nexport type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n};\nexport type RegisterParamsType = {\n  email: string;\n  password: string;\n};\n\nexport type ResponseType = {\n  _id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  publicCardPacksCount: number;\n  created: Date;\n  updated: Date;\n  verified: boolean;\n  rememberMe: boolean;\n  error?: string;\n};\n","import { ThunkDispatch } from 'redux-thunk';\n\nimport { RootStoreType } from '../store';\n\nimport { setAuthLoginDataAC, setLoginData } from './login';\n\nimport { authAPI } from 'api/loginApi';\nimport { Nullable } from 'types';\n\nexport const initialState: InitialStateType = {\n  status: 'idle',\n  error: null,\n  isInitialized: false,\n};\n\nexport const appReducer = (\n  state: InitialStateType = initialState,\n  action: ActionTypes,\n): InitialStateType => {\n  switch (action.type) {\n    case 'APP/SET_STATUS':\n      return { ...state, status: action.status };\n    case 'APP/SET_ERROR':\n      return { ...state, error: action.error };\n    case 'APP/SET_IS_INITIALIZED':\n      return { ...state, isInitialized: action.isInitialized };\n    default:\n      return { ...state };\n  }\n};\n\nexport const setAppErrorAC = (error: Nullable<string>) =>\n  ({ type: 'APP/SET_ERROR', error } as const);\nexport const setAppStatusAC = (status: RequestStatusType) =>\n  ({ type: 'APP/SET_STATUS', status } as const);\n\nexport const setIsInitializedAC = (isInitialized: boolean) =>\n  ({ type: 'APP/SET_IS_INITIALIZED', isInitialized } as const);\n\nexport const initializeAppTC =\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n    authAPI\n      .me()\n      .then(() => {\n        dispatch(setAuthLoginDataAC(true));\n      })\n      .finally(() => {\n        dispatch(setIsInitializedAC(true));\n      });\n  };\n\n// types\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\nexport type InitialStateType = {\n  // происходит ли сейчас взаимодействие с сервером\n  status: RequestStatusType;\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n  error: Nullable<string>;\n  isInitialized: boolean;\n};\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\nexport type setIsInitializedType = ReturnType<typeof setIsInitializedAC>;\n\ntype ActionTypes =\n  | SetAppErrorActionType\n  | SetAppStatusActionType\n  | setIsInitializedType\n  | setLoginData;\n","import { ThunkDispatch } from 'redux-thunk';\n\nimport { setAppStatusAC, SetAppStatusActionType } from './appInitialized';\n\nimport { authAPI, LoginParamsType } from 'api/loginApi';\nimport { RootStoreType } from 'store';\nimport { Nullable } from 'types';\n\nexport type InitialStateDataType = {\n  isAuth: boolean;\n  error?: Nullable<string>;\n};\n\nexport const initialState: InitialStateDataType = {\n  isAuth: false,\n  error: null,\n};\n\nexport const loginReducer = (\n  state: InitialStateDataType = initialState,\n  action: ActionTypesLogin,\n): InitialStateDataType => {\n  switch (action.type) {\n    case 'LOGIN/SET_AUTH_LOGIN_DATA':\n      return {\n        ...state,\n        isAuth: action.isAuth,\n      };\n    case 'LOGIN/SET_ERROR_MESSAGE':\n      return {\n        ...state,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setAuthLoginDataAC = (isAuth: boolean) =>\n  ({ type: 'LOGIN/SET_AUTH_LOGIN_DATA', isAuth } as const);\n\nexport const setErrorMessageAC = (error: Nullable<string>) =>\n  ({ type: 'LOGIN/SET_ERROR_MESSAGE', error } as const);\n\nexport const logInTC =\n  (data: LoginParamsType) =>\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesLogin>) => {\n    dispatch(setAppStatusAC('loading'));\n    authAPI\n      .login(data)\n      .then(() => {\n        dispatch(setAuthLoginDataAC(true));\n        dispatch(setAppStatusAC('succeeded'));\n      })\n      .catch(e => {\n        const error = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n        dispatch(setErrorMessageAC(error));\n        dispatch(setAppStatusAC('failed'));\n      })\n      .finally(() => {\n        dispatch(setAppStatusAC('idle'));\n      });\n  };\n\nexport const logOutTC =\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesLogin>) => {\n    dispatch(setAppStatusAC('loading'));\n    authAPI.logOut().then(() => {\n      dispatch(setAuthLoginDataAC(false));\n      dispatch(setErrorMessageAC(''));\n      dispatch(setAppStatusAC('idle'));\n    });\n  };\n\n// type;\nexport type setLoginData = ReturnType<typeof setAuthLoginDataAC>;\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessageAC>;\nexport type ActionTypesLogin =\n  | setLoginData\n  | setErrorMessageLogin\n  | SetAppStatusActionType;\n","import { Nullable } from '../../types';\n\nexport type InitialStateDataType = {\n  _id: Nullable<string>;\n  avatar?: Nullable<string>;\n  name: Nullable<string>;\n  email: Nullable<string>;\n  rememberMe: boolean;\n};\n\nconst initialState: InitialStateDataType = {\n  _id: null,\n  avatar: null,\n  name: null,\n  email: null,\n  rememberMe: false,\n};\n\nexport const profileReducer = (\n  state: InitialStateDataType = initialState,\n  action: ActionTypes,\n): InitialStateDataType => {\n  switch (action.type) {\n    case 'SET_USER_DATA':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    // case 'SET_ERROR_MESSAGE':\n    //   return {\n    //     ...state,\n    //     error: action.error,\n    //   };\n    default:\n      return state;\n  }\n};\n\nexport const setUserData = (_id: Nullable<string>, name: Nullable<string>) =>\n  ({\n    type: 'SET_USER_DATA',\n    payload: { _id, name },\n  } as const);\n\nexport const setErrorMessage = (error: Nullable<string>) =>\n  ({ type: 'SET_ERROR_MESSAGE', error } as const);\n\n// export const getAuthLoginData = () => (dispatch: ThunkDispatch<AppStateType, undefined, ActionTypes>) => {\n//   return authAPI.me()\n//     .then(response => {\n//       if (response.data.resultCode === 0) {                     //проверка залогинен пользователь или нет\n//         let {id, login, email} = response.data.data\n//         dispatch(setAuthUserData(id, login, email, true));\n//\n//       }\n//     });\n// }\n\n// export const logIn =\n//   (data: LoginParamsType) =>\n//     (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//       authAPI\n//         .login(data)\n//         .then(response => {\n//           const { email, rememberMe } = response.data;\n//           dispatch(setAuthLoginData(email, rememberMe, true));\n//         })\n//         .catch(e => {\n//           const error = e.response\n//             ? e.response.data.error\n//             : `${e.message}, more details in the console`;\n//           dispatch(setErrorMessage(error));\n//         });\n//     };\n//\n// export const getUserData = () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//   (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//     authAPI.logOut().then(() => {\n//       const { _id, name, verified } = response.data;\n//       dispatch(setUserData(_id, name, verified));\n//     }\n//     });\n// }\n\n// type;\ntype setAuthUserData = ReturnType<typeof setUserData>;\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessage>;\ntype ActionTypes = setAuthUserData | setErrorMessageLogin;\n","import { RootStateType } from '../../types';\n\nexport const getIsDataLoaded = (state: RootStateType): boolean => state.login.isAuth;\nexport const getErrorMessage = (state: RootStateType): any => state.login.error;\n","import { RootStateType } from '../../types';\n\nexport const getIsInitialized = (state: RootStateType): boolean =>\n  state.app.isInitialized;\nexport const getStatus = (state: RootStateType): string => state.app.status;\n","import { memo } from 'react';\n\nimport s from './CustomInputText.module.css';\n\nimport { ReturnComponentType } from 'types';\n\ntype InputProps = {\n  placeholder: string;\n  typeInput: string;\n  className?: string;\n  onChange: () => void;\n  value: string;\n  name?: string;\n  // bind: any;\n};\n\nexport const CustomInput = memo(\n  ({\n    placeholder,\n    typeInput = 'text',\n    className,\n    value,\n    onChange,\n    name,\n  }: InputProps): ReturnComponentType => (\n    <div className={s.inputWrap}>\n      <input\n        type={typeInput}\n        name={name}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        className={className ?? s.input}\n        autoComplete=\"off\"\n        spellCheck={false}\n        aria-autocomplete=\"list\"\n      />\n    </div>\n  ),\n);\n// ({\n//   placeholder,\n//   typeInput = 'text',\n//   className,\n//   bind,\n// }: InputProps): ReturnComponentType => (\n//   <input type={typeInput} {...bind} placeholder={placeholder} className={className} />\n// ),\n","export default __webpack_public_path__ + \"static/media/preloader1.9c1d25d2.gif\";","import React from 'react';\n\nimport { ReturnComponentType } from '../../types';\n\nimport style from './Preloader.module.css';\n\nimport preloader1 from 'assets/preloader1.gif';\n\nexport const Preloader = (): ReturnComponentType => (\n  <div>\n    <img className={style.loader} src={preloader1} alt=\"preloader\" />\n  </div>\n);\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Link, Navigate } from 'react-router-dom';\n\nimport { CustomInput } from '../customInput';\nimport { Preloader } from '../preloader';\n\nimport st from './Login.module.css';\n\nimport { PATH } from 'enum';\nimport { useAppSelector, useInput } from 'hooks';\nimport { logInTC } from 'store';\nimport { getErrorMessage, getIsDataLoaded, getStatus } from 'store/selectors';\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types';\n\nexport const Login = (): ReturnComponentType => {\n  const [rememberMe, handleRememberMe] = useState<boolean>(false);\n  const { value: email, handleValue: handleEmail } = useInput('');\n  const { value: password, handleValue: handlePassword } = useInput('');\n  const dispatch = useDispatch();\n  const isDataLoaded = useAppSelector(getIsDataLoaded);\n  const errorMessage = useAppSelector(getErrorMessage);\n  const isLoading = useAppSelector(getStatus);\n  const onChangeCheckBox = (e: ChangeEvent<HTMLInputElement>): void =>\n    handleRememberMe(e.currentTarget.checked);\n\n  const onClickHandlerLogin = (): void => {\n    dispatch(logInTC({ email, password, rememberMe }));\n  };\n  if (isDataLoaded) {\n    return <Navigate to={PATH.PROFILE} />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {isLoading === 'loading' ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <div className={style.contentWrap}>\n            <h2> Login </h2>\n            <CustomInput\n              onChange={handleEmail}\n              value={email}\n              placeholder=\"Email\"\n              typeInput=\"text\"\n              // name=\"user[email]\"\n            />\n            <CustomInput\n              placeholder=\"password\"\n              typeInput=\"password\"\n              value={password}\n              onChange={handlePassword}\n            />\n            {errorMessage ? (\n              <div\n                style={{\n                  color: 'red',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  flexWrap: 'wrap',\n                }}\n              >\n                {' '}\n                {errorMessage}{' '}\n              </div>\n            ) : (\n              ''\n            )}\n            <div className={st.rememberMeInput}>\n              remember me\n              <input type=\"checkbox\" checked={rememberMe} onChange={onChangeCheckBox} />\n            </div>\n            <div>\n              <Link to={PATH.CONFIRM_PASSWORD}> Forgot password </Link>\n            </div>\n            <button onClick={onClickHandlerLogin} className={style.btn}>\n              Sign In\n            </button>\n            <p> Do not have an account? </p>\n            <Link to={PATH.REGISTRATION}> Sign Up </Link>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Navigate, NavLink } from 'react-router-dom';\n\nimport { useAppSelector } from '../../hooks';\nimport { getIsDataLoaded, getStatus } from '../../store/selectors';\nimport { Preloader } from '../preloader';\n\nimport { PATH } from 'enum/pathes';\nimport { logOutTC } from 'store';\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types';\n\nexport const Profile = (): ReturnComponentType => {\n  // const userName = useSelector<RootStoreType, any>(state => state.login.name);\n  const isAuthUser = useAppSelector(getIsDataLoaded);\n  const isLoading = useAppSelector(getStatus);\n  const dispatch = useDispatch();\n  const onClickLogOut = (): void => {\n    dispatch(logOutTC());\n  };\n  if (!isAuthUser) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n  return (\n    <div className={style.mainContainer}>\n      {isLoading === 'loading' ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <h2> Profile </h2>\n          {isAuthUser ? (\n            <div>\n              <button className={style.btn} onClick={onClickLogOut}>\n                Log out\n              </button>\n            </div>\n          ) : (\n            <NavLink to={PATH.LOGIN}>Login</NavLink>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { AxiosResponse } from 'axios';\n\nimport { Nullable } from '../types';\n\nimport { instance } from './apiConfig';\n\nexport type AddNewPassType = {\n  email: Nullable<string>;\n  from?: Nullable<string>;\n  message?: Nullable<string>;\n};\n\nexport type SetNewPassType = {\n  password: Nullable<string>;\n  resetPasswordToken: Nullable<string>;\n};\n\nexport type AddNewPassResponseType = {\n  info: Nullable<string>;\n  error: Nullable<string>;\n};\n\nexport const addNewPassAPI = {\n  addNewPass(params: AddNewPassType) {\n    return instance.post<AddNewPassType, AxiosResponse<AddNewPassResponseType>>(\n      'auth/forgot',\n      params,\n    );\n  },\n  setNewPass(params: SetNewPassType) {\n    return instance.post<SetNewPassType, AxiosResponse<AddNewPassResponseType>>(\n      'auth/set-new-password',\n      params,\n    );\n  },\n};\n","import { Dispatch } from 'redux';\n\nimport { authAPI, RegisterParamsType } from '../../api';\n\nconst initialState = {\n  isFetching: false,\n  error: null as null | string,\n  isSignUp: false,\n};\ntype InitialStateType = typeof initialState;\n\nexport const signUpReducer = (\n  state = initialState,\n  action: SignUpActionTypes,\n): InitialStateType => {\n  switch (action.type) {\n    case 'REGISTRATION/IS_FETCHING':\n      return { ...state, isFetching: action.isFetching };\n    case 'RECOVERY/ERROR':\n      return { ...state, error: action.payload.error };\n    case 'REGISTRATION/IS_SIGNUP_SUCCESSFUL': {\n      return {\n        ...state,\n        isSignUp: action.isSignUpSuccessful,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const toggleIsFetchingAC = (isFetching: boolean) =>\n  ({\n    type: 'REGISTRATION/IS_FETCHING',\n    isFetching,\n  } as const);\nexport const toggleIsSignUpAC = (isSignUpSuccessful: boolean) =>\n  ({\n    type: 'REGISTRATION/IS_SIGNUP_SUCCESSFUL',\n    isSignUpSuccessful,\n  } as const);\nexport const setErrorAC = (error: null | string) =>\n  ({ type: 'RECOVERY/ERROR', payload: { error } } as const);\n\nexport const signUpTC =\n  (params: RegisterParamsType) => (dispatch: Dispatch<SignUpActionTypes>) => {\n    dispatch(toggleIsFetchingAC(true));\n    authAPI\n      .register(params)\n      .then(() => {\n        dispatch(toggleIsSignUpAC(true));\n      })\n      .catch(error => {\n        dispatch(setErrorAC(error.response.data.error));\n      })\n      .finally(() => {\n        dispatch(toggleIsFetchingAC(false));\n      });\n  };\n\nexport type SetErrorType = ReturnType<typeof setErrorAC>;\n\ntype SignUpActionTypes =\n  | ReturnType<typeof toggleIsFetchingAC>\n  | ReturnType<typeof toggleIsSignUpAC>\n  | SetErrorType;\n","import React from 'react';\n\nimport { CustomInput } from '../customInput';\n\nimport st from './Registrations.module.css';\n\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types/ReturnComponentType';\n\ntype PropsType = {\n  email: string;\n  handleEmail: () => void;\n  // onChangeEmail: (value: string) => void;\n  // emailError: null | string\n  password: string;\n  handlePassword: () => void;\n  handleConfirmPassword: () => void;\n  // onChangePassword: (value: string) => void;\n  // isLoadedData: boolean;\n  // passwordError: null | string\n  isFetching: boolean;\n  onSendButtonClick: () => void;\n  error: null | string;\n};\n\nexport const SignUp = (props: PropsType): ReturnComponentType => {\n  const {\n    email,\n    handleEmail,\n    error,\n    password,\n    handlePassword,\n    handleConfirmPassword,\n    onSendButtonClick,\n    // isLoadedData,\n    isFetching,\n  } = props;\n  return (\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <div className={style.contentWrap}>\n          <h2>Registration</h2>\n          <span>{error}</span>\n          <CustomInput\n            placeholder=\"Email\"\n            typeInput=\"email\"\n            // className={style.inputEmail}\n            onChange={handleEmail}\n            value={email}\n            name=\"user[email]\"\n          />\n          <CustomInput\n            placeholder=\"Password\"\n            typeInput=\"password\"\n            // className={style.inputPassword}\n            onChange={handlePassword}\n            value={password}\n            name=\"user[password]\"\n          />\n          <CustomInput\n            placeholder=\"Confirm Password\"\n            typeInput=\"password\"\n            // className={style.inputPassword}\n            onChange={handleConfirmPassword}\n            value={password}\n            name=\"user[password]\"\n          />\n          <p> Have fun! </p>\n          <div className={st.btns}>\n            <button className={style.btn}>Cancel</button>\n            <button\n              className={style.btn}\n              onClick={onSendButtonClick}\n              disabled={isFetching}\n            >\n              Create\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const isEmailValid = (email: string): boolean => {\n  const EMAIL_REGEX =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return EMAIL_REGEX.test(email);\n};\n","export const isPasswordValid = (password: string): boolean => {\n  const PASSWORD_REGEX = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\n  return PASSWORD_REGEX.test(password);\n};\n/* /^\n  (?=.*\\d)          // should contain at least one digit\n  (?=.*[a-z])       // should contain at least one lower case\n  (?=.*[A-Z])       // should contain at least one upper case\n  [a-zA-Z0-9]{8,}   // should contain at least 8 from the mentioned characters\n$/ */\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { RootStoreType } from '../../store';\nimport { setErrorAC, signUpTC } from '../../store/reducers/signUp';\n\nimport { SignUp } from './signUp';\n\nimport { PATH } from 'enum/pathes';\nimport { useInput } from 'hooks';\nimport { ReturnComponentType } from 'types';\nimport { isEmailValid, isPasswordValid } from 'utils';\n\nexport const SignUpContainer = (): ReturnComponentType => {\n  const { value: email, handleValue: handleEmail } = useInput('');\n  const { value: password, handleValue: handlePassword } = useInput('');\n  const { value: confirmPassword, handleValue: handleConfirmPassword } = useInput('');\n  const error = useSelector<RootStoreType, null | string>(state => state.signUp.error);\n  const isFetching = useSelector<RootStoreType, boolean>(\n    state => state.signUp.isFetching,\n  );\n  const isSignUp = useSelector<RootStoreType, boolean>(state => state.signUp.isSignUp);\n  const dispatch = useDispatch();\n\n  const data: any = {\n    email,\n    password,\n  };\n\n  const onSendButtonClick = (): void => {\n    if (password !== confirmPassword) {\n      dispatch(setErrorAC(error));\n    }\n    if (isPasswordValid(password) && isEmailValid(email)) {\n      dispatch(signUpTC(data));\n    }\n  };\n  if (isSignUp) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n  return (\n    <SignUp\n      email={email}\n      handleEmail={handleEmail}\n      password={password}\n      handlePassword={handlePassword}\n      handleConfirmPassword={handleConfirmPassword}\n      // isLoadedData={isLoadedData}\n      isFetching={isFetching}\n      onSendButtonClick={onSendButtonClick}\n      error={error}\n    />\n  );\n};\n","import { PATH } from 'enum';\n\nexport const appNavigation: appNavigationType = [\n  { id: 1, title: 'registration', link: PATH.REGISTRATION },\n  { id: 2, title: 'login', link: PATH.LOGIN },\n  { id: 3, title: 'profile', link: PATH.PROFILE },\n  { id: 4, title: 'confirmPassword', link: PATH.CONFIRM_PASSWORD },\n  { id: 5, title: 'popup', link: PATH.POPUP },\n  { id: 6, title: 'createNewPassword', link: PATH.CREATE_NEW_PASSWORD },\n  { id: 7, title: 'page404', link: PATH.PAGE_404 },\n];\n\ntype appNavigationType = { id: number; title: string; link: string }[];\n","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nimport style from './Navigation.module.css';\n\nimport { appNavigation } from 'constants/Navigation';\nimport { ReturnComponentType } from 'types';\n\nexport const Navigation = (): ReturnComponentType => (\n  <div className={style.nav}>\n    <div className={style.wrap}>\n      <div className={style.navList}>\n        {appNavigation.map(({ id, title, link }) => (\n          <NavLink className={style.listItem} to={link} key={id}>\n            <div className={style.navElement}>{title}</div>\n          </NavLink>\n        ))}\n      </div>\n    </div>\n  </div>\n);\n","import { Nullable } from '../../types';\n\nexport type InitialStateDataType = {\n  errorValidation?: Nullable<string>;\n  errorNetwork?: Nullable<string>;\n};\n\nconst initialState: InitialStateDataType = {\n  errorValidation: null,\n  errorNetwork: null,\n};\n\nexport const errorForgotPasswordReducer = (\n  state: InitialStateDataType = initialState,\n  action: ActionTypes,\n): InitialStateDataType => {\n  switch (action.type) {\n    case 'FORGOT_PASSWORD/SET_VALIDATION_ERROR_MESSAGE':\n      return {\n        ...state,\n        errorValidation: action.errorValidation,\n      };\n    case 'FORGOT_PASSWORD/SET_NETWORK_ERROR_MESSAGE':\n      return {\n        ...state,\n        errorNetwork: action.errorNetwork,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setErrorMessagePassAC = (errorValidation: Nullable<string>) =>\n  ({ type: 'FORGOT_PASSWORD/SET_VALIDATION_ERROR_MESSAGE', errorValidation } as const);\n\nexport const setErrorMessageNetworkAC = (errorNetwork: Nullable<string>) =>\n  ({ type: 'FORGOT_PASSWORD/SET_NETWORK_ERROR_MESSAGE', errorNetwork } as const);\n\ntype SetErrorMessagePassType = ReturnType<typeof setErrorMessagePassAC>;\ntype SetErrorMessageNetworkType = ReturnType<typeof setErrorMessageNetworkAC>;\n\ntype ActionTypes = SetErrorMessagePassType | SetErrorMessageNetworkType;\n","import { Nullable } from '../../../types';\nimport { RootStateType } from '../../types';\n\nexport const getErrorNetworkMessage = (\n  state: RootStateType,\n): Nullable<string> | undefined => state.errorMessage.errorNetwork;\nexport const getErrorValidMessage = (\n  state: RootStateType,\n): Nullable<string> | undefined => state.errorMessage.errorValidation;\n","import React, { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Link, Navigate } from 'react-router-dom';\n\nimport { AddNewPassType } from '../../api/forgotPasswordApi';\nimport { useAppSelector } from '../../hooks';\nimport { forgotPassAddEmailTC } from '../../store/middlewares/forgotPassAddEmailTC';\nimport {\n  setErrorMessageNetworkAC,\n  setErrorMessagePassAC,\n} from '../../store/reducers/errorReducer';\nimport { getStatus } from '../../store/selectors';\nimport {\n  getErrorNetworkMessage,\n  getErrorValidMessage,\n} from '../../store/selectors/confirmPassword';\nimport style from '../../style/Common.module.css';\nimport { isEmailValid } from '../../utils/emailValidation';\nimport { Preloader } from '../preloader';\n\nimport { ReturnComponentType } from 'types';\n\nexport const ConfirmPassword = (): ReturnComponentType => {\n  const [isShown, setShowMessage] = useState(false);\n  const [email, setEmail] = useState('');\n\n  const dispatch = useDispatch();\n\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\n  const isLoading = useAppSelector(getStatus);\n\n  const dataPayload: AddNewPassType = {\n    email,\n    from: 'test-front-admin <samutic40@gmail.com>',\n    message: `<div style='background-color: #ffd500; \npadding: 15px; \nborder-color: #ff9900; \nwidth: 250px;\nheight: 30px'> \npassword recovery link: <a href='https://Or1ginald.github.io/gameCards/#/createNewPassword/$token$'> recovery link </a></div>`,\n  };\n\n  const onChangeEmailInputEnter = (e: any): void => {\n    setEmail(e.currentTarget.value);\n    dispatch(setErrorMessagePassAC(''));\n    dispatch(setErrorMessageNetworkAC(''));\n  };\n\n  const onSendButtonClick = (): void => {\n    if (isEmailValid(email)) {\n      dispatch(forgotPassAddEmailTC(dataPayload, setShowMessage));\n      setEmail('');\n    } else {\n      dispatch(setErrorMessagePassAC('invalid email ;-('));\n    }\n  };\n\n  if (isShown) {\n    return <Navigate to=\"/popup\" />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {isLoading === 'loading' ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <div className={style.contentWrap}>\n            <h2>Forgot your password?</h2>\n            {errorPassMessage && (\n              <span style={{ color: 'red' }}> {errorPassMessage} </span>\n            )}\n            {errorNetworkMessage && (\n              <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\n            )}\n            <div className={style.inputCentering}>\n              <input\n                placeholder=\"Email\"\n                type=\"email\"\n                className={style.inputEmail}\n                onChange={onChangeEmailInputEnter}\n              />\n            </div>\n            <p> Enter your email and we will send you further instructions</p>\n            <div>\n              <button className={style.btn} onClick={onSendButtonClick}>\n                send instructions\n              </button>\n            </div>\n            <span>Did you remember your password?</span>\n            <Link to=\"/login\"> Try logging in </Link>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Dispatch } from 'redux';\n\nimport { addNewPassAPI, AddNewPassType } from '../../api/forgotPasswordApi';\nimport { setAppStatusAC } from '../reducers/appInitialized';\nimport { setErrorMessageNetworkAC } from '../reducers/errorReducer';\n\nexport const forgotPassAddEmailTC =\n  (dataPayload: AddNewPassType, setShowMessage: any) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC('loading'));\n    addNewPassAPI\n      .addNewPass(dataPayload)\n      .then(() => {\n        setShowMessage(true);\n        dispatch(setAppStatusAC('succeeded'));\n      })\n      .catch(e => {\n        dispatch(setAppStatusAC('succeeded'));\n        const errorNetwork = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\n      });\n  };\n","import React, { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Navigate, useLocation } from 'react-router-dom';\n\nimport { SetNewPassType } from '../../api/forgotPasswordApi';\nimport { useAppSelector } from '../../hooks';\nimport { forgotPassSetPassTC } from '../../store/middlewares/forgotPassSetPassTC';\nimport { setAppStatusAC } from '../../store/reducers/appInitialized';\nimport {\n  setErrorMessageNetworkAC,\n  setErrorMessagePassAC,\n} from '../../store/reducers/errorReducer';\nimport { getStatus } from '../../store/selectors';\nimport {\n  getErrorNetworkMessage,\n  getErrorValidMessage,\n} from '../../store/selectors/confirmPassword';\nimport style from '../../style/Common.module.css';\nimport { isPasswordValid } from '../../utils';\nimport { Preloader } from '../preloader';\n\nimport { ReturnComponentType } from 'types';\n\nexport const CreateNewPassword = (): ReturnComponentType => {\n  const [isLoadedData, setLoadedData] = useState(false);\n  const [newPassword, setPassword] = useState('');\n\n  const dispatch = useDispatch();\n\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\n  const isLoading = useAppSelector(getStatus);\n\n  const location = useLocation();\n  const lastElement = 1;\n  const partPath = location.pathname.split('/');\n  const token = partPath[partPath.length - lastElement];\n\n  const data: SetNewPassType = {\n    password: newPassword,\n    resetPasswordToken: token,\n  };\n  const onChangePasswordInputEnter = (e: any): void => {\n    setPassword(e.currentTarget.value);\n    dispatch(setErrorMessagePassAC(''));\n    dispatch(setErrorMessageNetworkAC(''));\n  };\n\n  const onCreateButtonClick = (): void => {\n    if (isPasswordValid(newPassword)) {\n      dispatch(setAppStatusAC('loading'));\n      dispatch(forgotPassSetPassTC(data, setLoadedData));\n      dispatch(setAppStatusAC('succeeded'));\n      setPassword('');\n    } else {\n      dispatch(setErrorMessagePassAC('invalid password ;-('));\n    }\n  };\n\n  if (isLoadedData) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {isLoading === 'loading' ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <div className={style.contentWrap}>\n            <h2>Create new password</h2>\n            {errorPassMessage && (\n              <span style={{ color: 'red' }}> {errorPassMessage} </span>\n            )}\n            {errorNetworkMessage && (\n              <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\n            )}\n            <div className={style.inputCentering}>\n              <input\n                placeholder=\"Password\"\n                type=\"password\"\n                className={style.inputPassword}\n                onChange={onChangePasswordInputEnter}\n              />\n            </div>\n            <p> Create new password and we will send you further instructions to email</p>\n            <div>\n              <button className={style.btn} onClick={onCreateButtonClick}>\n                Create new password\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Dispatch } from 'redux';\n\nimport { addNewPassAPI, SetNewPassType } from '../../api/forgotPasswordApi';\nimport { setErrorMessageNetworkAC } from '../reducers/errorReducer';\n\nexport const forgotPassSetPassTC =\n  (data: SetNewPassType, setLoadedData: any) => (dispatch: Dispatch) => {\n    addNewPassAPI\n      .setNewPass(data)\n      .then(() => {\n        setLoadedData(true);\n      })\n      .catch(e => {\n        const errorNetwork = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\n      });\n  };\n","export default __webpack_public_path__ + \"static/media/letter.3761fe05.png\";","import React from 'react';\n\nimport letter from '../../assets/letter.png';\nimport style from '../../style/Common.module.css';\nimport { ReturnComponentType } from '../../types';\n\nimport st from './ConfirmPassword.module.css';\n\nexport const Popup = (): ReturnComponentType => (\n  <div>\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <img className={st.letterImg} src={letter} alt=\"letter\" />\n        <div className={style.contentWrap}>\n          <h2 className={st.heading}>Check Email</h2>\n          <p>We have sent the Email with instructions to your email </p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n","export default __webpack_public_path__ + \"static/media/error.6b88fd10.png\";","import { AxiosResponse } from 'axios';\n\nimport { ResponseDeckType } from './decksTC';\n\nimport { instance } from 'api/apiConfig';\n\nexport type addNewDeckType = {\n  name: string;\n};\n\nexport const decksAPI = {\n  fetchDecks() {\n    return instance.get<any, AxiosResponse<ResponseDeckType>>('cards/pack');\n  },\n  addNewDeck(params: addNewDeckType) {\n    return instance.post<addNewDeckType, AxiosResponse<any>>('cards/pack', params);\n  },\n\n  removeDeck(id: string) {\n    return instance.delete<string, any>(`cards/pack/${id}`);\n  },\n\n  updateDeck(id: string) {\n    return instance.put<string, any>('cards/pack', { id });\n  },\n};\n","import { Dispatch } from 'redux';\n\nimport { decksAPI } from './decksApi';\n\nexport type deckTemplate = {\n  _id?: string;\n  userId?: string;\n  name?: string;\n  path?: string;\n  cardsCount?: number;\n  grade?: number;\n  shots?: number;\n  rating?: number;\n  type?: string;\n  created?: string;\n  updated?: string;\n  __v?: number;\n};\n\nexport type ResponseDeckType = {\n  cardPacks: deckTemplate[];\n  cardPacksTotalCount: number;\n  maxCardsCount: number;\n  minCardsCount: number;\n  page: number;\n  pageCount: number;\n};\nconst initialState: deckTemplate[] = [];\n\nexport const decksReducer = (\n  state: deckTemplate[] = initialState,\n  action: setDecksACType | deleteDeckACType,\n): deckTemplate[] => {\n  switch (action.type) {\n    case 'FETCH_DECKS':\n      return [...state, ...action.decks];\n    case 'REMOVE_DECK':\n      // eslint-disable-next-line no-underscore-dangle\n      return state.filter(deck => deck._id !== action.id);\n\n    default:\n      return state;\n  }\n};\n\n// actions\nexport const fetchDecksAC = (decks: deckTemplate[]) =>\n  ({\n    type: 'FETCH_DECKS',\n    decks,\n  } as const);\nexport const deleteDeckAC = (id: string) =>\n  ({\n    type: 'REMOVE_DECK',\n    id,\n  } as const);\n\ntype setDecksACType = ReturnType<typeof fetchDecksAC>;\ntype deleteDeckACType = ReturnType<typeof deleteDeckAC>;\n\n// thunk\n\nexport const setDecksTC = () => (dispatch: Dispatch) => {\n  decksAPI\n    .fetchDecks()\n    .then(res => {\n      console.log(res.data);\n      dispatch(fetchDecksAC(res.data.cardPacks));\n    })\n    .catch((error: any) => {\n      console.log(error.data);\n    });\n};\nexport const removeDeckTC = (id: string) => (dispatch: Dispatch) => {\n  decksAPI\n    .removeDeck(id)\n    .then(res => {\n      console.log(res.data);\n      dispatch(deleteDeckAC(res.data));\n    })\n    .catch((error: any) => {\n      console.log(error.data);\n    });\n};\n","import React, { ChangeEvent, useState } from 'react';\n\nimport style from './Range.module.css';\n\nconst SuperRange = (): any => {\n  const initialValue = 0;\n  const [number, setNumber] = useState<number>(initialValue);\n  const onChangeRange = (e: ChangeEvent<HTMLInputElement>): void => {\n    setNumber(+e.currentTarget.value);\n  };\n  return (\n    <div>\n      {number}\n      <input\n        type=\"range\"\n        onChange={onChangeRange}\n        value={number}\n        className={style.range}\n      />\n    </div>\n  );\n};\n\nexport default SuperRange;\n","import React, { useEffect } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RootStoreType } from '../../store';\nimport style from '../../style/Common.module.css';\nimport { ReturnComponentType } from '../../types';\n\nimport { deckTemplate, setDecksTC } from './decksTC';\nimport SuperRange from './Range';\nimport styleTable from './Table.module.css';\n\nexport const Table = (): ReturnComponentType => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setDecksTC());\n  }, [dispatch]);\n\n  const decks = useSelector<RootStoreType, any>(state => state.decks);\n  const random = 100000;\n\n  return (\n    <div className={styleTable.wrapper}>\n      <div className={styleTable.leftBlock}>\n        <div className={styleTable.btns}>\n          <button className={style.btn}>My</button>\n          <button className={style.btn}>All</button>\n        </div>\n        <span>Number of cards</span>\n        <SuperRange />\n      </div>\n\n      <div className={styleTable.rightBlock}>\n        <div className={styleTable.decks}>\n          <span> Packs list </span>\n          <div className={styleTable.searchInputSection}>\n            <input\n              className={styleTable.inputSearch}\n              id=\"decks\"\n              placeholder=\"Search\"\n              type=\"search\"\n            />\n            <button className={style.btn}>Add new pack</button>\n          </div>\n\n          <div className={styleTable.tableCommon}>\n            <div className={styleTable.tableCaption}>\n              <div className={styleTable.captionElement}>Name</div>\n              <div className={styleTable.captionElement}>CardsCount</div>\n              <div className={styleTable.captionElement}>Updated</div>\n            </div>\n\n            <div className={styleTable.tableRow}>\n              {decks.map((deck: deckTemplate) => (\n                <div className={styleTable.element} key={Math.random() * random}>\n                  <div className={styleTable.elementPart}>{deck.name}</div>\n                  <div className={styleTable.elementPart}>{deck.cardsCount}</div>\n                  <div className={styleTable.elementPart}>{deck.updated}</div>\n                  <button className={styleTable.btn}>update</button>\n                  <button className={styleTable.btn}>delete</button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Table } from './table/Table';\n\nimport { ReturnComponentType } from 'types';\n\nexport const Test = (): ReturnComponentType => (\n  <div>\n    {/* <div className={style.container}>\n      <p style={{ color: 'white' }}> Test page </p>\n    </div> */}\n    <Table />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Route, Routes } from 'react-router-dom';\n\nimport s from './App.module.css';\nimport { PageError404 } from './components/404/Page_error_404';\nimport style from './components/navigation/Navigation.module.css';\nimport { useAppSelector } from './hooks';\nimport { initializeAppTC } from './store';\nimport { getIsInitialized } from './store/selectors';\nimport { ReturnComponentType } from './types';\n\nimport {\n  ConfirmPassword,\n  CreateNewPassword,\n  Login,\n  Navigation,\n  Popup,\n  Preloader,\n  Profile,\n  SignUpContainer,\n  // Registrations,\n} from 'components';\nimport { Test } from 'components/Test';\nimport { PATH } from 'enum';\nimport st from 'style/Common.module.css';\n\nexport const App = (): ReturnComponentType => {\n  const [showMenu, setShowMenu] = useState(false);\n  const isInitialized = useAppSelector(getIsInitialized);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(initializeAppTC());\n  }, []);\n  if (!isInitialized) {\n    return (\n      <div style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\n        <Preloader />\n      </div>\n    );\n  }\n\n  // 1\n\n  const showMenuHandler = (): void => {\n    setShowMenu(!showMenu);\n  };\n  return (\n    <div className={s.app}>\n      <div className={s.layout}>\n        <div>\n          <button className={st.btn} onClick={showMenuHandler}>\n            Show menu\n          </button>\n        </div>\n        {showMenu === true ? <Navigation /> : <div className={style.nav} />}\n\n        <div className={s.main}>\n          <Routes>\n            <Route path={PATH.LOGIN} element={<Login />} />\n            <Route path={PATH.REGISTRATION} element={<SignUpContainer />} />\n            <Route path={PATH.PROFILE} element={<Profile />} />\n            <Route path=\"/*\" element={<PageError404 />} />\n            <Route path={PATH.CONFIRM_PASSWORD} element={<ConfirmPassword />} />\n            <Route path={PATH.POPUP} element={<Popup />} />\n            <Route path={PATH.CREATE_NEW_PASSWORD} element={<CreateNewPassword />} />\n            <Route path=\"/\" element={<Test />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { decksReducer } from '../components/table/decksTC';\n\nimport { errorForgotPasswordReducer } from './reducers/errorReducer';\nimport { signUpReducer } from './reducers/signUp';\n\nimport { appReducer, cardReducer, loginReducer, profileReducer } from 'store';\n\nexport const rootReducer = combineReducers({\n  cards: cardReducer,\n  signUp: signUpReducer,\n  login: loginReducer,\n  profilePage: profileReducer,\n  errorMessage: errorForgotPasswordReducer,\n  app: appReducer,\n  decks: decksReducer,\n});\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStoreType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\n\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/navigation/Navigation.module.css","components/confirmPassword/ConfirmPassword.module.css","components/404/Page_error_404.module.css","style/Common.module.css","App.module.css","components/customInput/CustomInputText.module.css","components/preloader/Preloader.module.css","components/loginPage/Login.module.css","components/registrations/Registrations.module.css","components/table/Range.module.css","components/table/Table.module.css","enum/pathes.ts","assets/error404.gif","components/404/Page_error_404.tsx","hooks/useAppSelector.ts","hooks/useInput/useInput.ts","store/reducers/cards.ts","api/apiConfig/index.ts","api/loginApi.ts","store/reducers/appInitialized.ts","store/reducers/login.ts","store/reducers/profile.ts","store/selectors/login/loginSelectors.ts","store/selectors/app/appSelectors.ts","components/customInput/CustomInput.tsx","assets/preloader1.gif","components/preloader/Preloader.tsx","components/loginPage/Login.tsx","components/profile/Profile.tsx","api/forgotPasswordApi.ts","store/reducers/signUp.ts","components/registrations/signUp.tsx","utils/emailValidation.ts","utils/passwordValidation.ts","components/registrations/signUpContainer.tsx","constants/Navigation/appNavigation.ts","components/navigation/Navigation.tsx","store/reducers/errorReducer.ts","store/selectors/confirmPassword/errorSelectors.ts","components/confirmPassword/ConfirmPassword.tsx","store/middlewares/forgotPassAddEmailTC.ts","components/confirmPassword/CreateNewPassword.tsx","store/middlewares/forgotPassSetPassTC.ts","assets/letter.png","components/confirmPassword/Popup.tsx","assets/error.png","components/table/decksApi.ts","components/table/decksTC.tsx","components/table/Range.tsx","components/table/Table.tsx","components/Test.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","PATH","PageError404","className","st","mainContainer","src","error404","alt","page_404","linkContainer","to","link","useAppSelector","useSelector","useInput","initialValue","useState","value","setValue","handleValue","e","target","resetValue","initState","instance","axios","create","baseURL","process","withCredentials","authAPI","params","post","delete","initialState","status","error","isInitialized","setAppStatusAC","type","isAuth","setAuthLoginDataAC","setErrorMessageAC","_id","avatar","name","email","rememberMe","getIsDataLoaded","state","login","getErrorMessage","getIsInitialized","app","getStatus","CustomInput","memo","placeholder","typeInput","onChange","s","inputWrap","input","autoComplete","spellCheck","Preloader","style","loader","preloader1","Login","handleRememberMe","handleEmail","password","handlePassword","dispatch","useDispatch","isDataLoaded","errorMessage","isLoading","PROFILE","content","contentWrap","color","display","justifyContent","alignItems","flexWrap","rememberMeInput","checked","currentTarget","CONFIRM_PASSWORD","onClick","data","then","catch","response","message","finally","btn","REGISTRATION","Profile","isAuthUser","LOGIN","addNewPassAPI","isFetching","isSignUp","toggleIsFetchingAC","setErrorAC","payload","SignUp","props","handleConfirmPassword","onSendButtonClick","btns","disabled","isEmailValid","test","isPasswordValid","SignUpContainer","confirmPassword","signUp","isSignUpSuccessful","appNavigation","id","title","POPUP","CREATE_NEW_PASSWORD","PAGE_404","Navigation","nav","wrap","navList","map","listItem","navElement","errorValidation","errorNetwork","setErrorMessagePassAC","setErrorMessageNetworkAC","getErrorNetworkMessage","getErrorValidMessage","ConfirmPassword","isShown","setShowMessage","setEmail","errorPassMessage","errorNetworkMessage","dataPayload","from","inputCentering","inputEmail","forgotPassAddEmailTC","CreateNewPassword","isLoadedData","setLoadedData","newPassword","setPassword","token","useParams","console","log","resetPasswordToken","inputPassword","forgotPassSetPassTC","Popup","letterImg","letter","heading","decksAPI","get","cardsPack","SuperRange","number","setNumber","range","Table","setTitle","useEffect","res","decks","cardPacks","onRemoveDeckClick","deleteDeckAC","removeDeckTC","styleTable","wrapper","leftBlock","rightBlock","searchInputSection","inputSearch","textArea","deck","newCardsPack","addDeckAC","tableCommon","tableCaption","captionElement","tableRow","element","elementPart","cardsCount","updated","Math","random","Test","App","showMenu","setShowMenu","position","top","textAlign","width","layout","main","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","cards","action","profilePage","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9d941f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__241z0\",\"wrap\":\"Navigation_wrap__demD8\",\"listItem\":\"Navigation_listItem__aBWsF\",\"navElement\":\"Navigation_navElement__29Vwh\",\"p\":\"Navigation_p__9Q_7E\",\"navList\":\"Navigation_navList__z2UR2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"letterImg\":\"ConfirmPassword_letterImg__2N3rI\",\"errorImg\":\"ConfirmPassword_errorImg__3qq5C\",\"heading\":\"ConfirmPassword_heading__2gXl4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Page_error_404_mainContainer__v4xGI\",\"linkContainer\":\"Page_error_404_linkContainer__16-JD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Common_mainContainer__1t-zw\",\"contentWrap\":\"Common_contentWrap__1Axzh\",\"content\":\"Common_content__UidQH\",\"btn\":\"Common_btn__1nWkw\",\"inputEmail\":\"Common_inputEmail__2Um59\",\"inputPassword\":\"Common_inputPassword__3GoZh\",\"inputCentering\":\"Common_inputCentering__-eDhT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2aOdL\",\"layout\":\"App_layout__2S8fS\",\"main\":\"App_main__24PHL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"CustomInputText_superInput__K8brJ\",\"input\":\"CustomInputText_input__Ry5T4\",\"errorInput\":\"CustomInputText_errorInput__2d0Po\",\"error\":\"CustomInputText_error__3R8jT\",\"inputWrap\":\"CustomInputText_inputWrap__3zwmg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__2syPF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rememberMeInput\":\"Login_rememberMeInput__1zYYI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Registrations_btns__HPNCD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"Range_range__2Bftj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__Q6n57\",\"leftBlock\":\"Table_leftBlock__1RTP-\",\"btns\":\"Table_btns__gIZA8\",\"rightBlock\":\"Table_rightBlock__2kslH\",\"decks\":\"Table_decks__1krzl\",\"element\":\"Table_element__28FA6\",\"elementPart\":\"Table_elementPart__aB51_\",\"tableCaption\":\"Table_tableCaption__16t_c\",\"captionElement\":\"Table_captionElement__3xb70\",\"btn\":\"Table_btn__4zGgo\",\"searchInputSection\":\"Table_searchInputSection__297PX\",\"inputSearch\":\"Table_inputSearch__1zU9D\",\"textArea\":\"Table_textArea__3jdnU\"};","export enum PATH {\r\n  REGISTRATION = '/registration',\r\n  LOGIN = '/login',\r\n  PROFILE = '/profile',\r\n  CONFIRM_PASSWORD = '/confirmPassword/*',\r\n  POPUP = '/popup',\r\n  CREATE_NEW_PASSWORD = '/createNewPassword/:token',\r\n  PAGE_404 = '/*',\r\n}\r\n","export default __webpack_public_path__ + \"static/media/error404.688fee4d.gif\";","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport error404 from '../../assets/error404.gif';\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport st from './Page_error_404.module.css';\r\n\r\nexport const PageError404 = (): ReturnComponentType => (\r\n  <div>\r\n    <div className={st.mainContainer}>\r\n      <div>\r\n        <img src={error404} alt=\"error404\" className={st.page_404} />\r\n      </div>\r\n      <div className={st.linkContainer}>\r\n        {' '}\r\n        <Link to=\"/profile\" className={st.link}>\r\n          Back to home\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\n\r\nimport { RootStateType } from 'store/types';\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\r\n","import { ChangeEvent, useState } from 'react';\r\n\r\n// type useInputPropsType = {\r\n//   value: string;\r\n//   setValue: any;\r\n//   reset: any;\r\n//   bind: {\r\n//     value: string;\r\n//     onChange: (event: any) => void;\r\n//   };\r\n// };\r\n\r\nexport const useInput = (initialValue: string): any => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  const handleValue = (e: ChangeEvent<HTMLInputElement>): void =>\r\n    setValue(e.target.value);\r\n  const resetValue = (): void => setValue(initialValue);\r\n\r\n  return { value, handleValue, resetValue };\r\n};\r\n\r\n// return {\r\n//   value,\r\n//   setValue,\r\n//   reset: () => setValue(''),\r\n//   bind: {\r\n//     value,\r\n//     onChange: (event: any) => {\r\n//       setValue(event.target.value);\r\n//     },\r\n//   },\r\n// };\r\n\r\n// export const useInput = (initialValue: string): any => {\r\n//   const [inputValue, setInputValue] = useState(initialValue);\r\n//\r\n//   const handleInputValueChange = useCallback(\r\n//     (newValue: string) => setInputValue(newValue),\r\n//     [],\r\n//   );\r\n//\r\n//   return useMemo(\r\n//     () => ({ inputValue, handleInputValueChange }),\r\n//     [inputValue, handleInputValueChange],\r\n//   );\r\n// };\r\n","const initState = {};\r\n\r\ntype initStateType = {};\r\n\r\nexport const cardReducer = (\r\n  state: initStateType = initState,\r\n  action: any,\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case '': {\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = process.env.REACT_APP_BASE_URL; // Достаем базовый юрл из .env(ссылка на хироку)\r\n\r\nexport const instance = axios.create({\r\n  baseURL: baseUrl,\r\n  withCredentials: true,\r\n});\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { instance } from './apiConfig';\r\n\r\nexport const authAPI = {\r\n  login(params: LoginParamsType) {\r\n    return instance.post<\r\n      LoginParamsType,\r\n      /* 'сам объект сервера который отправляет игнат' */\r\n      /* AxiosResponse нужен только у методов put и post */\r\n      AxiosResponse<ResponseType>\r\n    >('auth/login', params);\r\n  },\r\n  logOut() {\r\n    return instance.delete<ResponseType>('auth/me', {});\r\n  },\r\n  me() {\r\n    return instance.post<ResponseType>('auth/me');\r\n  },\r\n  register(params: RegisterParamsType) {\r\n    return instance.post<RegisterParamsType, any>('auth/register', params);\r\n  },\r\n};\r\n\r\n// types\r\n\r\nexport type LoginParamsType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n};\r\nexport type RegisterParamsType = {\r\n  email: string;\r\n  password: string;\r\n};\r\n\r\nexport type ResponseType = {\r\n  _id: string;\r\n  email: string;\r\n  name: string;\r\n  avatar?: string;\r\n  publicCardPacksCount: number;\r\n  created: Date;\r\n  updated: Date;\r\n  verified: boolean;\r\n  rememberMe: boolean;\r\n  error?: string;\r\n};\r\n","import { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport { RootStoreType } from '../store';\r\n\r\nimport { setAuthLoginDataAC, setLoginData } from './login';\r\n\r\nimport { authAPI } from 'api/loginApi';\r\nimport { Nullable } from 'types';\r\n\r\nexport const initialState: InitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  isInitialized: false,\r\n};\r\n\r\nexport const appReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionTypes,\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET_STATUS':\r\n      return { ...state, status: action.status };\r\n    case 'APP/SET_ERROR':\r\n      return { ...state, error: action.error };\r\n    case 'APP/SET_IS_INITIALIZED':\r\n      return { ...state, isInitialized: action.isInitialized };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport const setAppErrorAC = (error: Nullable<string>) =>\r\n  ({ type: 'APP/SET_ERROR', error } as const);\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n  ({ type: 'APP/SET_STATUS', status } as const);\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n  ({ type: 'APP/SET_IS_INITIALIZED', isInitialized } as const);\r\n\r\nexport const initializeAppTC =\r\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n    authAPI\r\n      .me()\r\n      .then(() => {\r\n        dispatch(setAuthLoginDataAC(true));\r\n      })\r\n      .finally(() => {\r\n        dispatch(setIsInitializedAC(true));\r\n      });\r\n  };\r\n\r\n// types\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type InitialStateType = {\r\n  // происходит ли сейчас взаимодействие с сервером\r\n  status: RequestStatusType;\r\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n  error: Nullable<string>;\r\n  isInitialized: boolean;\r\n};\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type setIsInitializedType = ReturnType<typeof setIsInitializedAC>;\r\n\r\ntype ActionTypes =\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n  | setIsInitializedType\r\n  | setLoginData;\r\n","import { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport { setAppStatusAC, SetAppStatusActionType } from './appInitialized';\r\n\r\nimport { authAPI, LoginParamsType } from 'api/loginApi';\r\nimport { RootStoreType } from 'store';\r\nimport { Nullable } from 'types';\r\n\r\nexport type InitialStateDataType = {\r\n  isAuth: boolean;\r\n  error?: Nullable<string>;\r\n};\r\n\r\nexport const initialState: InitialStateDataType = {\r\n  isAuth: false,\r\n  error: null,\r\n};\r\n\r\nexport const loginReducer = (\r\n  state: InitialStateDataType = initialState,\r\n  action: ActionTypesLogin,\r\n): InitialStateDataType => {\r\n  switch (action.type) {\r\n    case 'LOGIN/SET_AUTH_LOGIN_DATA':\r\n      return {\r\n        ...state,\r\n        isAuth: action.isAuth,\r\n      };\r\n    case 'LOGIN/SET_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setAuthLoginDataAC = (isAuth: boolean) =>\r\n  ({ type: 'LOGIN/SET_AUTH_LOGIN_DATA', isAuth } as const);\r\n\r\nexport const setErrorMessageAC = (error: Nullable<string>) =>\r\n  ({ type: 'LOGIN/SET_ERROR_MESSAGE', error } as const);\r\n\r\nexport const logInTC =\r\n  (data: LoginParamsType) =>\r\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesLogin>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI\r\n      .login(data)\r\n      .then(() => {\r\n        dispatch(setAuthLoginDataAC(true));\r\n        dispatch(setAppStatusAC('succeeded'));\r\n      })\r\n      .catch(e => {\r\n        const error = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageAC(error));\r\n        dispatch(setAppStatusAC('failed'));\r\n      })\r\n      .finally(() => {\r\n        dispatch(setAppStatusAC('idle'));\r\n      });\r\n  };\r\n\r\nexport const logOutTC =\r\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesLogin>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI.logOut().then(() => {\r\n      dispatch(setAuthLoginDataAC(false));\r\n      dispatch(setErrorMessageAC(''));\r\n      dispatch(setAppStatusAC('idle'));\r\n    });\r\n  };\r\n\r\n// type;\r\nexport type setLoginData = ReturnType<typeof setAuthLoginDataAC>;\r\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessageAC>;\r\nexport type ActionTypesLogin =\r\n  | setLoginData\r\n  | setErrorMessageLogin\r\n  | SetAppStatusActionType;\r\n","import { Nullable } from '../../types';\r\n\r\nexport type InitialStateDataType = {\r\n  _id: Nullable<string>;\r\n  avatar?: Nullable<string>;\r\n  name: Nullable<string>;\r\n  email: Nullable<string>;\r\n  rememberMe: boolean;\r\n};\r\n\r\nconst initialState: InitialStateDataType = {\r\n  _id: null,\r\n  avatar: null,\r\n  name: null,\r\n  email: null,\r\n  rememberMe: false,\r\n};\r\n\r\nexport const profileReducer = (\r\n  state: InitialStateDataType = initialState,\r\n  action: ActionTypes,\r\n): InitialStateDataType => {\r\n  switch (action.type) {\r\n    case 'SET_USER_DATA':\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    // case 'SET_ERROR_MESSAGE':\r\n    //   return {\r\n    //     ...state,\r\n    //     error: action.error,\r\n    //   };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setUserData = (_id: Nullable<string>, name: Nullable<string>) =>\r\n  ({\r\n    type: 'SET_USER_DATA',\r\n    payload: { _id, name },\r\n  } as const);\r\n\r\nexport const setErrorMessage = (error: Nullable<string>) =>\r\n  ({ type: 'SET_ERROR_MESSAGE', error } as const);\r\n\r\n// export const getAuthLoginData = () => (dispatch: ThunkDispatch<AppStateType, undefined, ActionTypes>) => {\r\n//   return authAPI.me()\r\n//     .then(response => {\r\n//       if (response.data.resultCode === 0) {                     //проверка залогинен пользователь или нет\r\n//         let {id, login, email} = response.data.data\r\n//         dispatch(setAuthUserData(id, login, email, true));\r\n//\r\n//       }\r\n//     });\r\n// }\r\n\r\n// export const logIn =\r\n//   (data: LoginParamsType) =>\r\n//     (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n//       authAPI\r\n//         .login(data)\r\n//         .then(response => {\r\n//           const { email, rememberMe } = response.data;\r\n//           dispatch(setAuthLoginData(email, rememberMe, true));\r\n//         })\r\n//         .catch(e => {\r\n//           const error = e.response\r\n//             ? e.response.data.error\r\n//             : `${e.message}, more details in the console`;\r\n//           dispatch(setErrorMessage(error));\r\n//         });\r\n//     };\r\n//\r\n// export const getUserData = () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n//   (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n//     authAPI.logOut().then(() => {\r\n//       const { _id, name, verified } = response.data;\r\n//       dispatch(setUserData(_id, name, verified));\r\n//     }\r\n//     });\r\n// }\r\n\r\n// type;\r\ntype setAuthUserData = ReturnType<typeof setUserData>;\r\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessage>;\r\ntype ActionTypes = setAuthUserData | setErrorMessageLogin;\r\n","import { RootStateType } from '../../types';\r\n\r\nexport const getIsDataLoaded = (state: RootStateType): boolean => state.login.isAuth;\r\nexport const getErrorMessage = (state: RootStateType): any => state.login.error;\r\n","import { RootStateType } from '../../types';\r\n\r\nexport const getIsInitialized = (state: RootStateType): boolean =>\r\n  state.app.isInitialized;\r\nexport const getStatus = (state: RootStateType): string => state.app.status;\r\n","import { memo } from 'react';\r\n\r\nimport s from './CustomInputText.module.css';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\ntype InputProps = {\r\n  placeholder: string;\r\n  typeInput: string;\r\n  className?: string;\r\n  onChange: () => void;\r\n  value: string;\r\n  name?: string;\r\n  // bind: any;\r\n};\r\n\r\nexport const CustomInput = memo(\r\n  ({\r\n    placeholder,\r\n    typeInput = 'text',\r\n    className,\r\n    value,\r\n    onChange,\r\n    name,\r\n  }: InputProps): ReturnComponentType => (\r\n    <div className={s.inputWrap}>\r\n      <input\r\n        type={typeInput}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        className={className ?? s.input}\r\n        autoComplete=\"off\"\r\n        spellCheck={false}\r\n        aria-autocomplete=\"list\"\r\n      />\r\n    </div>\r\n  ),\r\n);\r\n// ({\r\n//   placeholder,\r\n//   typeInput = 'text',\r\n//   className,\r\n//   bind,\r\n// }: InputProps): ReturnComponentType => (\r\n//   <input type={typeInput} {...bind} placeholder={placeholder} className={className} />\r\n// ),\r\n","export default __webpack_public_path__ + \"static/media/preloader1.9c1d25d2.gif\";","import React from 'react';\r\n\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport style from './Preloader.module.css';\r\n\r\nimport preloader1 from 'assets/preloader1.gif';\r\n\r\nexport const Preloader = (): ReturnComponentType => (\r\n  <div>\r\n    <img className={style.loader} src={preloader1} alt=\"preloader\" />\r\n  </div>\r\n);\r\n","import React, { ChangeEvent, useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\nimport { CustomInput } from '../customInput';\r\nimport { Preloader } from '../preloader';\r\n\r\nimport st from './Login.module.css';\r\n\r\nimport { PATH } from 'enum';\r\nimport { useAppSelector, useInput } from 'hooks';\r\nimport { logInTC } from 'store';\r\nimport { getErrorMessage, getIsDataLoaded, getStatus } from 'store/selectors';\r\nimport style from 'style/Common.module.css';\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Login = (): ReturnComponentType => {\r\n  const [rememberMe, handleRememberMe] = useState<boolean>(false);\r\n  const { value: email, handleValue: handleEmail } = useInput('');\r\n  const { value: password, handleValue: handlePassword } = useInput('');\r\n  const dispatch = useDispatch();\r\n  const isDataLoaded = useAppSelector(getIsDataLoaded);\r\n  const errorMessage = useAppSelector(getErrorMessage);\r\n  const isLoading = useAppSelector(getStatus);\r\n  const onChangeCheckBox = (e: ChangeEvent<HTMLInputElement>): void =>\r\n    handleRememberMe(e.currentTarget.checked);\r\n\r\n  const onClickHandlerLogin = (): void => {\r\n    dispatch(logInTC({ email, password, rememberMe }));\r\n  };\r\n  if (isDataLoaded) {\r\n    return <Navigate to={PATH.PROFILE} />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === 'loading' ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <div className={style.contentWrap}>\r\n            <h2> Login </h2>\r\n            <CustomInput\r\n              onChange={handleEmail}\r\n              value={email}\r\n              placeholder=\"Email\"\r\n              typeInput=\"text\"\r\n              // name=\"user[email]\"\r\n            />\r\n            <CustomInput\r\n              placeholder=\"password\"\r\n              typeInput=\"password\"\r\n              value={password}\r\n              onChange={handlePassword}\r\n            />\r\n            {errorMessage ? (\r\n              <div\r\n                style={{\r\n                  color: 'red',\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  alignItems: 'center',\r\n                  flexWrap: 'wrap',\r\n                }}\r\n              >\r\n                {' '}\r\n                {errorMessage}{' '}\r\n              </div>\r\n            ) : (\r\n              ''\r\n            )}\r\n            <div className={st.rememberMeInput}>\r\n              remember me\r\n              <input type=\"checkbox\" checked={rememberMe} onChange={onChangeCheckBox} />\r\n            </div>\r\n            <div>\r\n              <Link to={PATH.CONFIRM_PASSWORD}> Forgot password </Link>\r\n            </div>\r\n            <button onClick={onClickHandlerLogin} className={style.btn}>\r\n              Sign In\r\n            </button>\r\n            <p> Do not have an account? </p>\r\n            <Link to={PATH.REGISTRATION}> Sign Up </Link>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Navigate, NavLink } from 'react-router-dom';\r\n\r\nimport { useAppSelector } from '../../hooks';\r\nimport { getIsDataLoaded, getStatus } from '../../store/selectors';\r\nimport { Preloader } from '../preloader';\r\n\r\nimport { PATH } from 'enum/pathes';\r\nimport { logOutTC } from 'store';\r\nimport style from 'style/Common.module.css';\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Profile = (): ReturnComponentType => {\r\n  // const userName = useSelector<RootStoreType, any>(state => state.login.name);\r\n  const isAuthUser = useAppSelector(getIsDataLoaded);\r\n  const isLoading = useAppSelector(getStatus);\r\n  const dispatch = useDispatch();\r\n  const onClickLogOut = (): void => {\r\n    dispatch(logOutTC());\r\n  };\r\n  if (!isAuthUser) {\r\n    return <Navigate to={PATH.LOGIN} />;\r\n  }\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === 'loading' ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <h2> Profile </h2>\r\n          {isAuthUser ? (\r\n            <div>\r\n              <button className={style.btn} onClick={onClickLogOut}>\r\n                Log out\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <NavLink to={PATH.LOGIN}>Login</NavLink>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { Nullable } from '../types';\r\n\r\nimport { instance } from './apiConfig';\r\n\r\nexport type AddNewPassType = {\r\n  email: Nullable<string>;\r\n  from?: Nullable<string>;\r\n  message?: Nullable<string>;\r\n};\r\n\r\nexport type SetNewPassType = {\r\n  password: Nullable<string>;\r\n  resetPasswordToken?: Nullable<string>;\r\n};\r\n\r\nexport type AddNewPassResponseType = {\r\n  info: Nullable<string>;\r\n  error: Nullable<string>;\r\n};\r\n\r\nexport const addNewPassAPI = {\r\n  addNewPass(params: AddNewPassType) {\r\n    return instance.post<AddNewPassType, AxiosResponse<AddNewPassResponseType>>(\r\n      'auth/forgot',\r\n      params,\r\n    );\r\n  },\r\n  setNewPass(params: SetNewPassType) {\r\n    return instance.post<SetNewPassType, AxiosResponse<AddNewPassResponseType>>(\r\n      'auth/set-new-password',\r\n      params,\r\n    );\r\n  },\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { authAPI, RegisterParamsType } from '../../api';\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  error: null as null | string,\r\n  isSignUp: false,\r\n};\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const signUpReducer = (\r\n  state = initialState,\r\n  action: SignUpActionTypes,\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'REGISTRATION/IS_FETCHING':\r\n      return { ...state, isFetching: action.isFetching };\r\n    case 'RECOVERY/ERROR':\r\n      return { ...state, error: action.payload.error };\r\n    case 'REGISTRATION/IS_SIGNUP_SUCCESSFUL': {\r\n      return {\r\n        ...state,\r\n        isSignUp: action.isSignUpSuccessful,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const toggleIsFetchingAC = (isFetching: boolean) =>\r\n  ({\r\n    type: 'REGISTRATION/IS_FETCHING',\r\n    isFetching,\r\n  } as const);\r\nexport const toggleIsSignUpAC = (isSignUpSuccessful: boolean) =>\r\n  ({\r\n    type: 'REGISTRATION/IS_SIGNUP_SUCCESSFUL',\r\n    isSignUpSuccessful,\r\n  } as const);\r\nexport const setErrorAC = (error: null | string) =>\r\n  ({ type: 'RECOVERY/ERROR', payload: { error } } as const);\r\n\r\nexport const signUpTC =\r\n  (params: RegisterParamsType) => (dispatch: Dispatch<SignUpActionTypes>) => {\r\n    dispatch(toggleIsFetchingAC(true));\r\n    authAPI\r\n      .register(params)\r\n      .then(() => {\r\n        dispatch(toggleIsSignUpAC(true));\r\n      })\r\n      .catch(error => {\r\n        dispatch(setErrorAC(error.response.data.error));\r\n      })\r\n      .finally(() => {\r\n        dispatch(toggleIsFetchingAC(false));\r\n      });\r\n  };\r\n\r\nexport type SetErrorType = ReturnType<typeof setErrorAC>;\r\n\r\ntype SignUpActionTypes =\r\n  | ReturnType<typeof toggleIsFetchingAC>\r\n  | ReturnType<typeof toggleIsSignUpAC>\r\n  | SetErrorType;\r\n","import React from 'react';\r\n\r\nimport { CustomInput } from '../customInput';\r\n\r\nimport st from './Registrations.module.css';\r\n\r\nimport style from 'style/Common.module.css';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\ntype PropsType = {\r\n  email: string;\r\n  handleEmail: () => void;\r\n  // onChangeEmail: (value: string) => void;\r\n  // emailError: null | string\r\n  password: string;\r\n  handlePassword: () => void;\r\n  handleConfirmPassword: () => void;\r\n  // onChangePassword: (value: string) => void;\r\n  // isLoadedData: boolean;\r\n  // passwordError: null | string\r\n  isFetching: boolean;\r\n  onSendButtonClick: () => void;\r\n  error: null | string;\r\n};\r\n\r\nexport const SignUp = (props: PropsType): ReturnComponentType => {\r\n  const {\r\n    email,\r\n    handleEmail,\r\n    error,\r\n    password,\r\n    handlePassword,\r\n    handleConfirmPassword,\r\n    onSendButtonClick,\r\n    // isLoadedData,\r\n    isFetching,\r\n  } = props;\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      <div className={style.content}>\r\n        <div className={style.contentWrap}>\r\n          <h2>Registration</h2>\r\n          <span>{error}</span>\r\n          <CustomInput\r\n            placeholder=\"Email\"\r\n            typeInput=\"email\"\r\n            // className={style.inputEmail}\r\n            onChange={handleEmail}\r\n            value={email}\r\n            name=\"user[email]\"\r\n          />\r\n          <CustomInput\r\n            placeholder=\"Password\"\r\n            typeInput=\"password\"\r\n            // className={style.inputPassword}\r\n            onChange={handlePassword}\r\n            value={password}\r\n            name=\"user[password]\"\r\n          />\r\n          <CustomInput\r\n            placeholder=\"Confirm Password\"\r\n            typeInput=\"password\"\r\n            // className={style.inputPassword}\r\n            onChange={handleConfirmPassword}\r\n            value={password}\r\n            name=\"user[password]\"\r\n          />\r\n          <p> Have fun! </p>\r\n          <div className={st.btns}>\r\n            <button className={style.btn}>Cancel</button>\r\n            <button\r\n              className={style.btn}\r\n              onClick={onSendButtonClick}\r\n              disabled={isFetching}\r\n            >\r\n              Create\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export const isEmailValid = (email: string): boolean => {\r\n  const EMAIL_REGEX =\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return EMAIL_REGEX.test(email);\r\n};\r\n","export const isPasswordValid = (password: string): boolean => {\r\n  const PASSWORD_REGEX = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\r\n  return PASSWORD_REGEX.test(password);\r\n};\r\n/* /^\r\n  (?=.*\\d)          // should contain at least one digit\r\n  (?=.*[a-z])       // should contain at least one lower case\r\n  (?=.*[A-Z])       // should contain at least one upper case\r\n  [a-zA-Z0-9]{8,}   // should contain at least 8 from the mentioned characters\r\n$/ */\r\n","import React from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport { RootStoreType } from '../../store';\r\nimport { setErrorAC, signUpTC } from '../../store/reducers/signUp';\r\n\r\nimport { SignUp } from './signUp';\r\n\r\nimport { PATH } from 'enum/pathes';\r\nimport { useInput } from 'hooks';\r\nimport { ReturnComponentType } from 'types';\r\nimport { isEmailValid, isPasswordValid } from 'utils';\r\n\r\nexport const SignUpContainer = (): ReturnComponentType => {\r\n  const { value: email, handleValue: handleEmail } = useInput('');\r\n  const { value: password, handleValue: handlePassword } = useInput('');\r\n  const { value: confirmPassword, handleValue: handleConfirmPassword } = useInput('');\r\n  const error = useSelector<RootStoreType, null | string>(state => state.signUp.error);\r\n  const isFetching = useSelector<RootStoreType, boolean>(\r\n    state => state.signUp.isFetching,\r\n  );\r\n  const isSignUp = useSelector<RootStoreType, boolean>(state => state.signUp.isSignUp);\r\n  const dispatch = useDispatch();\r\n\r\n  const data: any = {\r\n    email,\r\n    password,\r\n  };\r\n\r\n  const onSendButtonClick = (): void => {\r\n    if (password !== confirmPassword) {\r\n      dispatch(setErrorAC(error));\r\n    }\r\n    if (isPasswordValid(password) && isEmailValid(email)) {\r\n      dispatch(signUpTC(data));\r\n    }\r\n  };\r\n  if (isSignUp) {\r\n    return <Navigate to={PATH.LOGIN} />;\r\n  }\r\n  return (\r\n    <SignUp\r\n      email={email}\r\n      handleEmail={handleEmail}\r\n      password={password}\r\n      handlePassword={handlePassword}\r\n      handleConfirmPassword={handleConfirmPassword}\r\n      // isLoadedData={isLoadedData}\r\n      isFetching={isFetching}\r\n      onSendButtonClick={onSendButtonClick}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n","import { PATH } from 'enum';\r\n\r\nexport const appNavigation: appNavigationType = [\r\n  { id: 1, title: 'registration', link: PATH.REGISTRATION },\r\n  { id: 2, title: 'login', link: PATH.LOGIN },\r\n  { id: 3, title: 'profile', link: PATH.PROFILE },\r\n  { id: 4, title: 'confirmPassword', link: PATH.CONFIRM_PASSWORD },\r\n  { id: 5, title: 'popup', link: PATH.POPUP },\r\n  { id: 6, title: 'createNewPassword', link: PATH.CREATE_NEW_PASSWORD },\r\n  { id: 7, title: 'page404', link: PATH.PAGE_404 },\r\n];\r\n\r\ntype appNavigationType = { id: number; title: string; link: string }[];\r\n","import React from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport style from './Navigation.module.css';\r\n\r\nimport { appNavigation } from 'constants/Navigation';\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Navigation = (): ReturnComponentType => (\r\n  <div className={style.nav}>\r\n    <div className={style.wrap}>\r\n      <div className={style.navList}>\r\n        {appNavigation.map(({ id, title, link }) => (\r\n          <NavLink className={style.listItem} to={link} key={id}>\r\n            <div className={style.navElement}>{title}</div>\r\n          </NavLink>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import { Nullable } from '../../types';\r\n\r\nexport type InitialStateDataType = {\r\n  errorValidation?: Nullable<string>;\r\n  errorNetwork?: Nullable<string>;\r\n};\r\n\r\nconst initialState: InitialStateDataType = {\r\n  errorValidation: null,\r\n  errorNetwork: null,\r\n};\r\n\r\nexport const errorForgotPasswordReducer = (\r\n  state: InitialStateDataType = initialState,\r\n  action: ActionTypes,\r\n): InitialStateDataType => {\r\n  switch (action.type) {\r\n    case 'FORGOT_PASSWORD/SET_VALIDATION_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorValidation: action.errorValidation,\r\n      };\r\n    case 'FORGOT_PASSWORD/SET_NETWORK_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorNetwork: action.errorNetwork,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setErrorMessagePassAC = (errorValidation: Nullable<string>) =>\r\n  ({ type: 'FORGOT_PASSWORD/SET_VALIDATION_ERROR_MESSAGE', errorValidation } as const);\r\n\r\nexport const setErrorMessageNetworkAC = (errorNetwork: Nullable<string>) =>\r\n  ({ type: 'FORGOT_PASSWORD/SET_NETWORK_ERROR_MESSAGE', errorNetwork } as const);\r\n\r\ntype SetErrorMessagePassType = ReturnType<typeof setErrorMessagePassAC>;\r\ntype SetErrorMessageNetworkType = ReturnType<typeof setErrorMessageNetworkAC>;\r\n\r\ntype ActionTypes = SetErrorMessagePassType | SetErrorMessageNetworkType;\r\n","import { Nullable } from '../../../types';\r\nimport { RootStateType } from '../../types';\r\n\r\nexport const getErrorNetworkMessage = (\r\n  state: RootStateType,\r\n): Nullable<string> | undefined => state.errorMessage.errorNetwork;\r\nexport const getErrorValidMessage = (\r\n  state: RootStateType,\r\n): Nullable<string> | undefined => state.errorMessage.errorValidation;\r\n","import React, { useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\nimport { AddNewPassType } from '../../api/forgotPasswordApi';\r\nimport { useAppSelector } from '../../hooks';\r\nimport { forgotPassAddEmailTC } from '../../store/middlewares/forgotPassAddEmailTC';\r\nimport {\r\n  setErrorMessageNetworkAC,\r\n  setErrorMessagePassAC,\r\n} from '../../store/reducers/errorReducer';\r\nimport { getStatus } from '../../store/selectors';\r\nimport {\r\n  getErrorNetworkMessage,\r\n  getErrorValidMessage,\r\n} from '../../store/selectors/confirmPassword';\r\nimport style from '../../style/Common.module.css';\r\nimport { isEmailValid } from '../../utils/emailValidation';\r\nimport { Preloader } from '../preloader';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const ConfirmPassword = (): ReturnComponentType => {\r\n  const [isShown, setShowMessage] = useState(false);\r\n  const [email, setEmail] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n  const isLoading = useAppSelector(getStatus);\r\n\r\n  const dataPayload: AddNewPassType = {\r\n    email,\r\n    from: 'test-front-admin <samutic40@gmail.com>',\r\n    message: `<div style='background-color: #ffd500; \r\npadding: 15px; \r\nborder-color: #ff9900; \r\nwidth: 250px;\r\nheight: 30px'> \r\npassword recovery link: <a href='https://or1ginald.github.io/gameCards/#/createNewPassword/$token$'> recovery link </a></div>`,\r\n  };\r\n\r\n  const onChangeEmailInputEnter = (e: any): void => {\r\n    setEmail(e.currentTarget.value);\r\n    dispatch(setErrorMessagePassAC(''));\r\n    dispatch(setErrorMessageNetworkAC(''));\r\n  };\r\n\r\n  const onSendButtonClick = (): void => {\r\n    if (isEmailValid(email)) {\r\n      dispatch(forgotPassAddEmailTC(dataPayload, setShowMessage));\r\n      setEmail('');\r\n    } else {\r\n      dispatch(setErrorMessagePassAC('invalid email ;-('));\r\n    }\r\n  };\r\n\r\n  if (isShown) {\r\n    return <Navigate to=\"/popup\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === 'loading' ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <div className={style.contentWrap}>\r\n            <h2>Forgot your password?</h2>\r\n            {errorPassMessage && (\r\n              <span style={{ color: 'red' }}> {errorPassMessage} </span>\r\n            )}\r\n            {errorNetworkMessage && (\r\n              <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n            )}\r\n            <div className={style.inputCentering}>\r\n              <input\r\n                placeholder=\"Email\"\r\n                type=\"email\"\r\n                className={style.inputEmail}\r\n                onChange={onChangeEmailInputEnter}\r\n              />\r\n            </div>\r\n            <p> Enter your email and we will send you further instructions</p>\r\n            <div>\r\n              <button className={style.btn} onClick={onSendButtonClick}>\r\n                send instructions\r\n              </button>\r\n            </div>\r\n            <span>Did you remember your password?</span>\r\n            <Link to=\"/login\"> Try logging in </Link>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { addNewPassAPI, AddNewPassType } from '../../api/forgotPasswordApi';\r\nimport { setAppStatusAC } from '../reducers/appInitialized';\r\nimport { setErrorMessageNetworkAC } from '../reducers/errorReducer';\r\n\r\nexport const forgotPassAddEmailTC =\r\n  (dataPayload: AddNewPassType, setShowMessage: any) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    addNewPassAPI\r\n      .addNewPass(dataPayload)\r\n      .then(() => {\r\n        setShowMessage(true);\r\n        dispatch(setAppStatusAC('succeeded'));\r\n      })\r\n      .catch(e => {\r\n        dispatch(setAppStatusAC('succeeded'));\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n      });\r\n  };\r\n","import React, { useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nimport { SetNewPassType } from '../../api/forgotPasswordApi';\r\nimport { useAppSelector } from '../../hooks';\r\nimport { forgotPassSetPassTC } from '../../store/middlewares/forgotPassSetPassTC';\r\nimport { setAppStatusAC } from '../../store/reducers/appInitialized';\r\nimport {\r\n  setErrorMessageNetworkAC,\r\n  setErrorMessagePassAC,\r\n} from '../../store/reducers/errorReducer';\r\nimport { getStatus } from '../../store/selectors';\r\nimport {\r\n  getErrorNetworkMessage,\r\n  getErrorValidMessage,\r\n} from '../../store/selectors/confirmPassword';\r\nimport style from '../../style/Common.module.css';\r\nimport { isPasswordValid } from '../../utils';\r\nimport { Preloader } from '../preloader';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const CreateNewPassword = (): ReturnComponentType => {\r\n  const [isLoadedData, setLoadedData] = useState(false);\r\n  const [newPassword, setPassword] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n  const isLoading = useAppSelector(getStatus);\r\n\r\n  /* const location = useLocation(); */\r\n\r\n  const params = useParams<'token'>();\r\n  const { token } = params as { token: string };\r\n\r\n  /* const lastElement = 1;\r\n  const partPath = location.pathname.split('/');\r\n  const token = partPath[partPath.length - lastElement]; */\r\n  console.log('token', token);\r\n\r\n  const data: SetNewPassType = {\r\n    password: newPassword,\r\n    resetPasswordToken: token,\r\n  };\r\n  const onChangePasswordInputEnter = (e: any): void => {\r\n    setPassword(e.currentTarget.value);\r\n    dispatch(setErrorMessagePassAC(''));\r\n    dispatch(setErrorMessageNetworkAC(''));\r\n  };\r\n\r\n  const onCreateButtonClick = (): void => {\r\n    if (isPasswordValid(newPassword)) {\r\n      dispatch(setAppStatusAC('loading'));\r\n      dispatch(forgotPassSetPassTC(data, setLoadedData));\r\n      dispatch(setAppStatusAC('succeeded'));\r\n      setPassword('');\r\n    } else {\r\n      dispatch(setErrorMessagePassAC('invalid password ;-('));\r\n    }\r\n  };\r\n\r\n  if (isLoadedData) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === 'loading' ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <div className={style.contentWrap}>\r\n            <h2>Create new password</h2>\r\n            {errorPassMessage && (\r\n              <span style={{ color: 'red' }}> {errorPassMessage} </span>\r\n            )}\r\n            {errorNetworkMessage && (\r\n              <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n            )}\r\n            <div className={style.inputCentering}>\r\n              <input\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n                className={style.inputPassword}\r\n                onChange={onChangePasswordInputEnter}\r\n              />\r\n            </div>\r\n            <p> Create new password and we will send you further instructions to email</p>\r\n            <div>\r\n              <button className={style.btn} onClick={onCreateButtonClick}>\r\n                Create new password\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { addNewPassAPI, SetNewPassType } from '../../api/forgotPasswordApi';\r\nimport { setErrorMessageNetworkAC } from '../reducers/errorReducer';\r\n\r\nexport const forgotPassSetPassTC =\r\n  (data: SetNewPassType, setLoadedData: any) => (dispatch: Dispatch) => {\r\n    addNewPassAPI\r\n      .setNewPass(data)\r\n      .then(() => {\r\n        setLoadedData(true);\r\n      })\r\n      .catch(e => {\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n      });\r\n  };\r\n","export default __webpack_public_path__ + \"static/media/letter.3761fe05.png\";","import React from 'react';\r\n\r\nimport letter from '../../assets/letter.png';\r\nimport style from '../../style/Common.module.css';\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport st from './ConfirmPassword.module.css';\r\n\r\nexport const Popup = (): ReturnComponentType => (\r\n  <div>\r\n    <div className={style.mainContainer}>\r\n      <div className={style.content}>\r\n        <img className={st.letterImg} src={letter} alt=\"letter\" />\r\n        <div className={style.contentWrap}>\r\n          <h2 className={st.heading}>Check Email</h2>\r\n          <p>We have sent the Email with instructions to your email </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","export default __webpack_public_path__ + \"static/media/error.6b88fd10.png\";","import { AxiosResponse } from 'axios';\r\n\r\nimport { ResponseDeckType } from './decksTC';\r\n\r\nimport { instance } from 'api/apiConfig';\r\n\r\nexport type addNewDeckType = {\r\n  name: string;\r\n};\r\n\r\nexport const decksAPI = {\r\n  fetchDecks() {\r\n    return instance.get<any, AxiosResponse<ResponseDeckType>>('cards/pack');\r\n  },\r\n  addNewDeck(cardsPack: addNewDeckType) {\r\n    return instance.post<addNewDeckType, AxiosResponse<any>>('cards/pack', { cardsPack });\r\n  },\r\n\r\n  removeDeck(id: string) {\r\n    return instance.delete<string, any>(`cards/pack/?id=${id}`);\r\n  },\r\n\r\n  updateDeck(id: string) {\r\n    return instance.put<string, any>('cards/pack', { id });\r\n  },\r\n};\r\n","import { AxiosError } from 'axios';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { setAppStatusAC } from '../../store/reducers/appInitialized';\r\nimport { setErrorMessageNetworkAC } from '../../store/reducers/errorReducer';\r\n\r\nimport { addNewDeckType, decksAPI } from './decksApi';\r\n\r\nexport type deckTemplate = {\r\n  _id: string;\r\n  userId?: string;\r\n  name?: string;\r\n  path?: string;\r\n  cardsCount?: number;\r\n  grade?: number;\r\n  shots?: number;\r\n  rating?: number;\r\n  type?: string;\r\n  created?: string;\r\n  updated?: string;\r\n  __v?: number;\r\n};\r\n\r\nexport type ResponseDeckType = {\r\n  cardPacks: deckTemplate[];\r\n  cardPacksTotalCount: number;\r\n  maxCardsCount: number;\r\n  minCardsCount: number;\r\n  page: number;\r\n  pageCount: number;\r\n};\r\nconst initialState: deckTemplate[] = [];\r\n\r\nexport const decksReducer = (\r\n  state: deckTemplate[] = initialState,\r\n  action: ActionsType,\r\n): deckTemplate[] => {\r\n  switch (action.type) {\r\n    case 'FETCH_DECKS':\r\n      return [...state, ...action.decks];\r\n    case 'REMOVE_DECK':\r\n      return state.filter(deck => deck._id !== action.id);\r\n    case 'ADD_DECK':\r\n      return [{ ...action.deck }, ...state];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// actions\r\nexport const fetchDecksAC = (decks: deckTemplate[]) =>\r\n  ({\r\n    type: 'FETCH_DECKS',\r\n    decks,\r\n  } as const);\r\nexport const deleteDeckAC = (id: string) =>\r\n  ({\r\n    type: 'REMOVE_DECK',\r\n    id,\r\n  } as const);\r\nexport const addDeckAC = (deck: any) =>\r\n  ({\r\n    type: 'ADD_DECK',\r\n    deck,\r\n  } as const);\r\n\r\ntype ActionsType =\r\n  | ReturnType<typeof fetchDecksAC>\r\n  | ReturnType<typeof deleteDeckAC>\r\n  | ReturnType<typeof addDeckAC>;\r\n\r\n// thunk\r\n\r\nexport const setDecksTC = () => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC('loading'));\r\n  decksAPI\r\n    .fetchDecks()\r\n    .then(res => {\r\n      dispatch(fetchDecksAC(res.data.cardPacks));\r\n      dispatch(setAppStatusAC('succeeded'));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC('succeeded'));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\nexport const removeDeckTC = (id: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC('loading'));\r\n  decksAPI\r\n    .removeDeck(id)\r\n    .then(() => {\r\n      dispatch(deleteDeckAC(id));\r\n      dispatch(setAppStatusAC('succeeded'));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC('succeeded'));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\n\r\nexport const addDeckTC = (dataPayload: addNewDeckType) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC('loading'));\r\n  decksAPI\r\n    .addNewDeck(dataPayload)\r\n    .then(res => {\r\n      const deck = res.data.newCardsPack;\r\n      console.log('deck', deck);\r\n      dispatch(addDeckAC(deck));\r\n      dispatch(setAppStatusAC('succeeded'));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC('succeeded'));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\n","import React, { ChangeEvent, useState } from 'react';\r\n\r\nimport style from './Range.module.css';\r\n\r\nconst SuperRange = (): any => {\r\n  const initialValue = 0;\r\n  const [number, setNumber] = useState<number>(initialValue);\r\n  const onChangeRange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n    setNumber(+e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {number}\r\n      <input\r\n        type=\"range\"\r\n        onChange={onChangeRange}\r\n        value={number}\r\n        className={style.range}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SuperRange;\r\n","import React, { ChangeEvent, useEffect, useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { useAppSelector } from '../../hooks';\r\nimport { RootStoreType } from '../../store';\r\nimport { setErrorMessageNetworkAC } from '../../store/reducers/errorReducer';\r\nimport { getStatus } from '../../store/selectors';\r\nimport { getErrorNetworkMessage } from '../../store/selectors/confirmPassword';\r\nimport style from '../../style/Common.module.css';\r\nimport { ReturnComponentType } from '../../types';\r\nimport { Preloader } from '../preloader';\r\n\r\nimport { addDeckTC, deckTemplate, removeDeckTC, setDecksTC } from './decksTC';\r\nimport SuperRange from './Range';\r\nimport styleTable from './Table.module.css';\r\n\r\nexport const Table = (): ReturnComponentType => {\r\n  const [title, setTitle] = useState('');\r\n  const dispatch = useDispatch();\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n  const isLoading = useAppSelector(getStatus);\r\n\r\n  useEffect(() => {\r\n    dispatch(setDecksTC());\r\n  }, [dispatch]);\r\n\r\n  const decks = useSelector<RootStoreType, any>(state => state.decks);\r\n  const random = 100000;\r\n  const onRemoveDeckClick = (id: string): void => {\r\n    dispatch(removeDeckTC(id));\r\n    dispatch(setErrorMessageNetworkAC(''));\r\n  };\r\n\r\n  const onTitleEnterChange = (e: ChangeEvent<HTMLTextAreaElement>): void => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n  const addButtonClick = (): void => {\r\n    dispatch(addDeckTC({ name: title }));\r\n    /*  dispatch(setDecksTC()); */\r\n    setTitle('');\r\n  };\r\n\r\n  const onFilterMyPacksClick = (): void => {};\r\n\r\n  return (\r\n    <div className={styleTable.wrapper}>\r\n      <div className={styleTable.leftBlock}>\r\n        <div className={styleTable.btns}>\r\n          <button className={style.btn} onClick={onFilterMyPacksClick}>\r\n            My\r\n          </button>\r\n          <button className={style.btn}>All</button>\r\n        </div>\r\n        <span>Number of cards</span>\r\n        <SuperRange />\r\n      </div>\r\n      {isLoading === 'loading' ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={styleTable.rightBlock}>\r\n          <div className={styleTable.decks}>\r\n            <span> Packs list </span>\r\n            <div className={styleTable.searchInputSection}>\r\n              <input\r\n                className={styleTable.inputSearch}\r\n                id=\"decks\"\r\n                placeholder=\"Search\"\r\n                type=\"search\"\r\n              />\r\n              <textarea\r\n                className={styleTable.textArea}\r\n                placeholder=\"name pack\"\r\n                value={title}\r\n                onChange={onTitleEnterChange}\r\n              />\r\n              <button className={style.btn} onClick={addButtonClick}>\r\n                Add new pack\r\n              </button>\r\n            </div>\r\n\r\n            <div className={styleTable.tableCommon}>\r\n              <div className={styleTable.tableCaption}>\r\n                <div className={styleTable.captionElement}>Name</div>\r\n                <div className={styleTable.captionElement}>CardsCount</div>\r\n                <div className={styleTable.captionElement}>Updated</div>\r\n              </div>\r\n\r\n              <div className={styleTable.tableRow}>\r\n                {errorNetworkMessage && (\r\n                  <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n                )}\r\n                {decks.map((deck: deckTemplate) => (\r\n                  <div className={styleTable.element} key={Math.random() * random}>\r\n                    <div className={styleTable.elementPart}>{deck.name}</div>\r\n                    <div className={styleTable.elementPart}>{deck.cardsCount}</div>\r\n                    <div className={styleTable.elementPart}>{deck.updated}</div>\r\n                    <button className={styleTable.btn}>update</button>\r\n                    <button\r\n                      className={styleTable.btn}\r\n                      onClick={() => onRemoveDeckClick(deck._id)}\r\n                    >\r\n                      delete\r\n                    </button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Table } from './table/Table';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Test = (): ReturnComponentType => (\r\n  <div>\r\n    {/* <div className={style.container}>\r\n      <p style={{ color: 'white' }}> Test page </p>\r\n    </div> */}\r\n    <Table />\r\n  </div>\r\n);\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Route, Routes } from 'react-router-dom';\r\n\r\nimport s from './App.module.css';\r\nimport { PageError404 } from './components/404/Page_error_404';\r\nimport style from './components/navigation/Navigation.module.css';\r\nimport { useAppSelector } from './hooks';\r\nimport { initializeAppTC } from './store';\r\nimport { getIsInitialized } from './store/selectors';\r\nimport { ReturnComponentType } from './types';\r\n\r\nimport {\r\n  ConfirmPassword,\r\n  CreateNewPassword,\r\n  Login,\r\n  Navigation,\r\n  Popup,\r\n  Preloader,\r\n  Profile,\r\n  SignUpContainer,\r\n} from 'components';\r\nimport { Test } from 'components/Test';\r\nimport { PATH } from 'enum';\r\nimport st from 'style/Common.module.css';\r\n\r\nexport const App = (): ReturnComponentType => {\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const isInitialized = useAppSelector(getIsInitialized);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC());\r\n  }, []);\r\n  if (!isInitialized) {\r\n    return (\r\n      <div style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n        <Preloader />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 1\r\n\r\n  const showMenuHandler = (): void => {\r\n    setShowMenu(!showMenu);\r\n  };\r\n  return (\r\n    <div className={s.app}>\r\n      <div className={s.layout}>\r\n        <div>\r\n          <button className={st.btn} onClick={showMenuHandler}>\r\n            Show menu\r\n          </button>\r\n        </div>\r\n        {showMenu === true ? <Navigation /> : <div className={style.nav} />}\r\n\r\n        <div className={s.main}>\r\n          <Routes>\r\n            <Route path={PATH.LOGIN} element={<Login />} />\r\n            <Route path={PATH.REGISTRATION} element={<SignUpContainer />} />\r\n            <Route path={PATH.PROFILE} element={<Profile />} />\r\n            <Route path={PATH.PAGE_404} element={<PageError404 />} />\r\n            <Route path={PATH.CONFIRM_PASSWORD} element={<ConfirmPassword />} />\r\n            <Route path={PATH.POPUP} element={<Popup />} />\r\n            <Route path={PATH.CREATE_NEW_PASSWORD} element={<CreateNewPassword />} />\r\n            <Route path=\"/\" element={<Test />} />\r\n          </Routes>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport { decksReducer } from '../components/table/decksTC';\r\n\r\nimport { errorForgotPasswordReducer } from './reducers/errorReducer';\r\nimport { signUpReducer } from './reducers/signUp';\r\n\r\nimport { appReducer, cardReducer, loginReducer, profileReducer } from 'store';\r\n\r\nexport const rootReducer = combineReducers({\r\n  cards: cardReducer,\r\n  signUp: signUpReducer,\r\n  login: loginReducer,\r\n  profilePage: profileReducer,\r\n  errorMessage: errorForgotPasswordReducer,\r\n  app: appReducer,\r\n  decks: decksReducer,\r\n});\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type RootStoreType = ReturnType<typeof rootReducer>;\r\n\r\n// @ts-ignore\r\n\r\nwindow.store = store;\r\n","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store } from './store/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/navigation/Navigation.module.css","components/tableSidebar/tableSidebar.module.css","components/confirmPassword/ConfirmPassword.module.css","components/404/Page_error_404.module.css","App.module.css","components/customInput/CustomInputText.module.css","style/Common.module.css","components/preloader/Preloader.module.css","components/loginPage/Login.module.css","components/registrations/Registrations.module.css","components/table/Range.module.css","components/customButton/CustomButton.module.css","enum/pathes.ts","assets/error404.gif","components/404/Page_error_404.tsx","hooks/useAppSelector.ts","hooks/useInput/useInput.ts","store/reducers/cards.ts","api/apiConfig/index.ts","api/loginApi.ts","store/reducers/appInitialized.ts","store/reducers/errorReducer.ts","store/reducers/login.ts","store/reducers/profile.ts","store/selectors/login/loginSelectors.ts","store/selectors/app/appSelectors.ts","components/customInput/CustomInput.tsx","store/selectors/confirmPassword/errorSelectors.ts","utils/emailValidation.ts","utils/passwordValidation.ts","assets/preloader1.gif","components/preloader/Preloader.tsx","components/loginPage/Login.tsx","assets/103781_profile_edit_user_icon.png","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","api/forgotPasswordApi.ts","store/reducers/signUp.ts","components/registrations/signUp.tsx","components/registrations/signUpContainer.tsx","constants/Navigation/appNavigation.ts","components/navigation/Navigation.tsx","components/confirmPassword/ConfirmPassword.tsx","store/middlewares/forgotPassAddEmailTC.ts","components/confirmPassword/CreateNewPassword.tsx","store/middlewares/forgotPassSetPassTC.ts","assets/letter.png","components/confirmPassword/Popup.tsx","assets/error.png","components/table/Range.tsx","components/tableSidebar/TableSidebar.tsx","components/customButton/CustomButton.tsx","components/table/decksApi.ts","components/table/decksTC.tsx","components/table/EditableSpan.tsx","components/table/Table.tsx","components/Test.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","components/table/Table.module.css"],"names":["module","exports","PATH","PageError404","className","st","mainContainer","src","error404","alt","page_404","linkContainer","to","link","useAppSelector","useSelector","useInput","initialValue","useState","value","setValue","handleValue","e","target","resetValue","initState","instance","axios","create","baseURL","process","withCredentials","authAPI","params","post","delete","initialState","status","error","isInitialized","setAppStatusAC","type","errorValidation","errorNetwork","setErrorMessagePassAC","setErrorMessageNetworkAC","isAuth","setAuthLoginDataAC","profile","_id","avatar","name","email","rememberMe","getIsDataLoaded","state","login","getIsInitialized","app","getStatus","CustomInput","memo","placeholder","typeInput","onChange","s","inputWrap","size","input","autoComplete","spellCheck","getErrorNetworkMessage","errorMessage","getErrorValidMessage","isEmailValid","test","isPasswordValid","password","Preloader","style","loader","preloader1","Login","handleRememberMe","handleEmail","resetEmail","handlePassword","resetPassword","dispatch","useDispatch","isDataLoaded","isLoading","errorPassMessage","errorNetworkMessage","PROFILE","content","contentWrap","color","rememberMeInput","checked","currentTarget","CONFIRM_PASSWORD","onClick","setTimeout","data","then","catch","response","message","finally","btn","REGISTRATION","Profile","props","onClickLogOut","isAuthUser","activateEditMode","deactivateEditMode","editMode","noneAvatarImage","onDoubleClick","onBlur","LOGIN","ProfileContainer","profileData","profilePage","setEditMode","addNewPassAPI","isFetching","isSignUp","toggleIsFetchingAC","SignUp","errorValid","confirmPassword","handleConfirmPassword","onSendButtonClick","onCancelButtonClick","btns","CustomButton","title","disabled","SignUpContainer","resetConfirmPassword","signUp","isSignUpSuccessful","appNavigation","id","POPUP","CREATE_NEW_PASSWORD","PAGE_404","Navigation","nav","wrap","navList","map","listItem","navElement","ConfirmPassword","isShown","setShowMessage","dataPayload","from","inputCentering","forgotPassAddEmailTC","CreateNewPassword","isLoadedData","setLoadedData","newPassword","handleNewPassword","resetNewPassword","token","useParams","resetPasswordToken","forgotPassSetPassTC","Popup","letterImg","letter","heading","SuperRange","number","setNumber","range","TableSidebar","React","tableSidebar","pickBlock","header3","buttonsContainer","button","decksAPI","get","cardsPack","put","EditableSpan","setTitle","autoFocus","upDateDeckAC","upDateDeckTC","Table","decks","useEffect","res","cardPacks","onRemoveDeckClick","deleteDeckAC","removeDeckTC","styleTable","wrapper","rightBlock","fontSize","searchInputSection","inputSearch","textArea","deck","newCardsPack","addDeckAC","tableCommon","element","elementPartOne","elementPartTwo","elementPartThree","tableRow","cardsCount","updated","Math","random","Test","App","showMenu","setShowMenu","position","top","textAlign","width","layout","main","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","cards","action","payload","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d8f0ebf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__241z0\",\"wrap\":\"Navigation_wrap__demD8\",\"listItem\":\"Navigation_listItem__aBWsF\",\"navElement\":\"Navigation_navElement__29Vwh\",\"p\":\"Navigation_p__9Q_7E\",\"navList\":\"Navigation_navList__z2UR2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableSidebar\":\"tableSidebar_tableSidebar__1ePGn\",\"buttonsContainer\":\"tableSidebar_buttonsContainer__2EO7u\",\"header3\":\"tableSidebar_header3__OUEJn\",\"pickBlock\":\"tableSidebar_pickBlock__2eBNj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"letterImg\":\"ConfirmPassword_letterImg__2N3rI\",\"errorImg\":\"ConfirmPassword_errorImg__3qq5C\",\"heading\":\"ConfirmPassword_heading__2gXl4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Page_error_404_mainContainer__v4xGI\",\"linkContainer\":\"Page_error_404_linkContainer__16-JD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2aOdL\",\"layout\":\"App_layout__2S8fS\",\"main\":\"App_main__24PHL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrap\":\"CustomInputText_inputWrap__3zwmg\",\"input\":\"CustomInputText_input__Ry5T4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Common_mainContainer__1t-zw\",\"contentWrap\":\"Common_contentWrap__1Axzh\",\"content\":\"Common_content__UidQH\",\"btn\":\"Common_btn__1nWkw\",\"inputEmail\":\"Common_inputEmail__2Um59\",\"inputPassword\":\"Common_inputPassword__3GoZh\",\"inputCentering\":\"Common_inputCentering__-eDhT\",\"avatar\":\"Common_avatar__2jZRp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__2syPF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rememberMeInput\":\"Login_rememberMeInput__1zYYI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Registrations_btns__HPNCD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"Range_range__2Bftj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CustomButton_button__Urnfr\"};","export enum PATH {\r\n  REGISTRATION = '/registration',\r\n  LOGIN = '/login',\r\n  PROFILE = '/profile',\r\n  CONFIRM_PASSWORD = '/confirmPassword/*',\r\n  POPUP = '/popup',\r\n  CREATE_NEW_PASSWORD = '/createNewPassword/:token',\r\n  PAGE_404 = '/*',\r\n}\r\n","export default __webpack_public_path__ + \"static/media/error404.688fee4d.gif\";","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport error404 from '../../assets/error404.gif';\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport st from './Page_error_404.module.css';\r\n\r\nexport const PageError404 = (): ReturnComponentType => (\r\n  <div>\r\n    <div className={st.mainContainer}>\r\n      <div>\r\n        <img src={error404} alt=\"error404\" className={st.page_404} />\r\n      </div>\r\n      <div className={st.linkContainer}>\r\n        {' '}\r\n        <Link to=\"/profile\" className={st.link}>\r\n          Back to home\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\n\r\nimport { RootStateType } from 'store/types';\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\r\n","import { ChangeEvent, useState } from 'react';\r\n\r\nexport const useInput = (initialValue: string): any => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  const handleValue = (e: ChangeEvent<HTMLInputElement>): void =>\r\n    setValue(e.target.value);\r\n\r\n  const resetValue = (): void => setValue(initialValue);\r\n\r\n  return { value, handleValue, resetValue };\r\n};\r\n","const initState = {};\r\n\r\ntype initStateType = {};\r\n\r\nexport const cardReducer = (\r\n  state: initStateType = initState,\r\n  action: any,\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case '': {\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = process.env.REACT_APP_BASE_URL; // Достаем базовый юрл из .env(ссылка на хироку)\r\n\r\nexport const instance = axios.create({\r\n  baseURL: baseUrl,\r\n  withCredentials: true,\r\n});\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { instance } from './apiConfig';\r\n\r\nexport const authAPI = {\r\n  login(params: LoginParamsType) {\r\n    return instance.post<\r\n      LoginParamsType,\r\n      /* 'сам объект сервера который отправляет игнат' */\r\n      /* AxiosResponse нужен только у методов put и post */\r\n      AxiosResponse<ResponseType>\r\n    >('auth/login', params);\r\n  },\r\n  logOut() {\r\n    return instance.delete<ResponseType>('auth/me', {});\r\n  },\r\n  me() {\r\n    return instance.post<ResponseType>('auth/me');\r\n  },\r\n  register(params: RegisterParamsType) {\r\n    return instance.post<RegisterParamsType, any>('auth/register', params);\r\n  },\r\n};\r\n\r\n// types\r\n\r\nexport type LoginParamsType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n};\r\nexport type RegisterParamsType = {\r\n  email: string;\r\n  password: string;\r\n};\r\n\r\nexport type ResponseType = {\r\n  _id: string;\r\n  email: string;\r\n  name: string;\r\n  avatar?: string;\r\n  publicCardPacksCount: number;\r\n  created: Date;\r\n  updated: Date;\r\n  verified: boolean;\r\n  rememberMe: boolean;\r\n  error?: string;\r\n};\r\n","import { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport { RootStoreType } from '../store';\r\n\r\nimport { setAuthLoginDataAC, setLoginData } from './login';\r\n\r\nimport { authAPI } from 'api/loginApi';\r\nimport { Nullable } from 'types';\r\n\r\nexport const initialState: InitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  isInitialized: false,\r\n};\r\n\r\nexport const appReducer = (\r\n  state: InitialStateType = initialState,\r\n  action: ActionTypes,\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET_STATUS':\r\n      return { ...state, status: action.status };\r\n    case 'APP/SET_ERROR':\r\n      return { ...state, error: action.error };\r\n    case 'APP/SET_IS_INITIALIZED':\r\n      return { ...state, isInitialized: action.isInitialized };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport const setAppErrorAC = (error: Nullable<string>) =>\r\n  ({ type: 'APP/SET_ERROR', error } as const);\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n  ({ type: 'APP/SET_STATUS', status } as const);\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n  ({ type: 'APP/SET_IS_INITIALIZED', isInitialized } as const);\r\n\r\nexport const initializeAppTC =\r\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n    authAPI\r\n      .me()\r\n      .then(() => {\r\n        dispatch(setAuthLoginDataAC(true));\r\n      })\r\n      .finally(() => {\r\n        dispatch(setIsInitializedAC(true));\r\n      });\r\n  };\r\n\r\n// types\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type InitialStateType = {\r\n  // происходит ли сейчас взаимодействие с сервером\r\n  status: RequestStatusType;\r\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n  error: Nullable<string>;\r\n  isInitialized: boolean;\r\n};\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type setIsInitializedType = ReturnType<typeof setIsInitializedAC>;\r\n\r\ntype ActionTypes =\r\n  | SetAppErrorActionType\r\n  | SetAppStatusActionType\r\n  | setIsInitializedType\r\n  | setLoginData;\r\n","import { Nullable } from '../../types';\r\n\r\nexport type InitialStateDataType = {\r\n  errorValidation?: Nullable<string>;\r\n  errorNetwork?: Nullable<string>;\r\n};\r\n\r\nconst initialState: InitialStateDataType = {\r\n  errorValidation: null,\r\n  errorNetwork: null,\r\n};\r\n\r\nexport const errorForgotPasswordReducer = (\r\n  state: InitialStateDataType = initialState,\r\n  action: ActionTypes,\r\n): InitialStateDataType => {\r\n  switch (action.type) {\r\n    case 'FORGOT_PASSWORD/SET_VALIDATION_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorValidation: action.errorValidation,\r\n      };\r\n    case 'FORGOT_PASSWORD/SET_NETWORK_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        errorNetwork: action.errorNetwork,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setErrorMessagePassAC = (errorValidation: Nullable<string>) =>\r\n  ({ type: 'FORGOT_PASSWORD/SET_VALIDATION_ERROR_MESSAGE', errorValidation } as const);\r\n\r\nexport const setErrorMessageNetworkAC = (errorNetwork: Nullable<string>) =>\r\n  ({ type: 'FORGOT_PASSWORD/SET_NETWORK_ERROR_MESSAGE', errorNetwork } as const);\r\n\r\ntype SetErrorMessagePassType = ReturnType<typeof setErrorMessagePassAC>;\r\ntype SetErrorMessageNetworkType = ReturnType<typeof setErrorMessageNetworkAC>;\r\n\r\ntype ActionTypes = SetErrorMessagePassType | SetErrorMessageNetworkType;\r\n","import { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport { setAppStatusAC, SetAppStatusActionType } from './appInitialized';\r\nimport { setErrorMessageNetworkAC } from './errorReducer';\r\n\r\nimport { authAPI, LoginParamsType } from 'api/loginApi';\r\nimport { RootStoreType } from 'store';\r\nimport { Nullable } from 'types';\r\n\r\nexport type InitialStateDataType = {\r\n  isAuth: boolean;\r\n  error?: Nullable<string>;\r\n};\r\n\r\nexport const initialState: InitialStateDataType = {\r\n  isAuth: false,\r\n  error: null,\r\n};\r\n\r\nexport const loginReducer = (\r\n  state: InitialStateDataType = initialState,\r\n  action: ActionTypesLogin,\r\n): InitialStateDataType => {\r\n  switch (action.type) {\r\n    case 'LOGIN/SET_AUTH_LOGIN_DATA':\r\n      return {\r\n        ...state,\r\n        isAuth: action.isAuth,\r\n      };\r\n    case 'LOGIN/SET_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setAuthLoginDataAC = (isAuth: boolean) =>\r\n  ({ type: 'LOGIN/SET_AUTH_LOGIN_DATA', isAuth } as const);\r\n\r\nexport const setErrorMessageAC = (error: Nullable<string>) =>\r\n  ({ type: 'LOGIN/SET_ERROR_MESSAGE', error } as const);\r\n\r\nexport const logInTC =\r\n  (data: LoginParamsType) =>\r\n  (\r\n    dispatch: ThunkDispatch<\r\n      RootStoreType,\r\n      undefined,\r\n      ActionTypesLogin | ReturnType<typeof setErrorMessageNetworkAC>\r\n    >,\r\n  ) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI\r\n      .login(data)\r\n      .then(() => {\r\n        dispatch(setAuthLoginDataAC(true));\r\n        dispatch(setAppStatusAC('succeeded'));\r\n      })\r\n      .catch(e => {\r\n        dispatch(setAppStatusAC('succeeded'));\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n        const timeOut = 2000;\r\n        setTimeout(() => {\r\n          dispatch(setErrorMessageNetworkAC(''));\r\n        }, timeOut);\r\n      })\r\n      .finally(() => {\r\n        dispatch(setAppStatusAC('idle'));\r\n      });\r\n  };\r\n\r\nexport const logOutTC =\r\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesLogin>) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI.logOut().then(() => {\r\n      dispatch(setAuthLoginDataAC(false));\r\n      dispatch(setErrorMessageAC(''));\r\n      dispatch(setAppStatusAC('idle'));\r\n    });\r\n  };\r\n\r\n// type;\r\nexport type setLoginData = ReturnType<typeof setAuthLoginDataAC>;\r\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessageAC>;\r\nexport type ActionTypesLogin =\r\n  | setLoginData\r\n  | setErrorMessageLogin\r\n  | SetAppStatusActionType;\r\n","import { Nullable } from '../../types';\r\n\r\nexport type InitialStateDataType = {\r\n  profile: {\r\n    _id: Nullable<string>;\r\n    avatar?: Nullable<string>;\r\n    name: string;\r\n    email: Nullable<string>;\r\n    rememberMe: boolean;\r\n  };\r\n};\r\n\r\nconst initialState = {\r\n  profile: {\r\n    _id: null as string | null,\r\n    avatar: null as string | null,\r\n    name: '',\r\n    email: null as string | null,\r\n    rememberMe: false,\r\n  },\r\n};\r\n\r\nexport const profileReducer = (\r\n  state: InitialStateDataType = initialState,\r\n  action: ActionTypes,\r\n): InitialStateDataType => {\r\n  switch (action.type) {\r\n    case 'SET_USER_DATA':\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    case 'SET_USER_PROFILE':\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, ...action.profile },\r\n      };\r\n    // case 'SET_ERROR_MESSAGE':\r\n    //   return {\r\n    //     ...state,\r\n    //     error: action.error,\r\n    //   };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setUserData = (_id: Nullable<string>, name: Nullable<string>) =>\r\n  ({\r\n    type: 'SET_USER_DATA',\r\n    payload: { _id, name },\r\n  } as const);\r\nexport const setProfile = (profile: InitialStateDataType) =>\r\n  ({\r\n    type: 'SET_USER_PROFILE',\r\n    profile,\r\n  } as const);\r\nexport const setErrorMessage = (error: Nullable<string>) =>\r\n  ({ type: 'SET_ERROR_MESSAGE', error } as const);\r\n\r\n// export const getAuthLoginData = () => (dispatch: ThunkDispatch<AppStateType, undefined, ActionTypes>) => {\r\n//   return authAPI.me()\r\n//     .then(response => {\r\n//       if (response.data.resultCode === 0) {                     //проверка залогинен пользователь или нет\r\n//         let {id, login, email} = response.data.data\r\n//         dispatch(setAuthUserData(id, login, email, true));\r\n//\r\n//       }\r\n//     });\r\n// }\r\n\r\n// export const logIn =\r\n//   (data: LoginParamsType) =>\r\n//     (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n//       authAPI\r\n//         .login(data)\r\n//         .then(response => {\r\n//           const { email, rememberMe } = response.data;\r\n//           dispatch(setAuthLoginData(email, rememberMe, true));\r\n//         })\r\n//         .catch(e => {\r\n//           const error = e.response\r\n//             ? e.response.data.error\r\n//             : `${e.message}, more details in the console`;\r\n//           dispatch(setErrorMessage(error));\r\n//         });\r\n//     };\r\n//\r\n// export const getUserData = () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n//   (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n//     authAPI.logOut().then(() => {\r\n//       const { _id, name, verified } = response.data;\r\n//       dispatch(setUserData(_id, name, verified));\r\n//     }\r\n//     });\r\n// }\r\n\r\n// type;\r\ntype setProfileType = ReturnType<typeof setProfile>;\r\ntype setAuthUserDataType = ReturnType<typeof setUserData>;\r\ntype setErrorMessageLoginType = ReturnType<typeof setErrorMessage>;\r\ntype ActionTypes = setAuthUserDataType | setErrorMessageLoginType | setProfileType;\r\n","import { RootStateType } from '../../types';\r\n\r\nexport const getIsDataLoaded = (state: RootStateType): boolean => state.login.isAuth;\r\nexport const getErrorMessage = (state: RootStateType): any => state.login.error;\r\n","import { RootStateType } from '../../types';\r\n\r\nexport const getIsInitialized = (state: RootStateType): boolean =>\r\n  state.app.isInitialized;\r\nexport const getStatus = (state: RootStateType): string => state.app.status;\r\n","import { memo } from 'react';\r\n\r\nimport s from './CustomInputText.module.css';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\ntype InputProps = {\r\n  placeholder: string;\r\n  typeInput: string;\r\n  className?: string;\r\n  onChange: () => void;\r\n  value: string;\r\n  name?: string;\r\n};\r\n\r\nexport const CustomInput = memo(\r\n  ({\r\n    placeholder,\r\n    typeInput = 'text',\r\n    className,\r\n    value,\r\n    onChange,\r\n    name,\r\n  }: InputProps): ReturnComponentType => (\r\n    <div className={s.inputWrap}>\r\n      <input\r\n        size={40}\r\n        type={typeInput}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        className={className ?? s.input}\r\n        autoComplete=\"off\"\r\n        spellCheck={false}\r\n        aria-autocomplete=\"list\"\r\n      />\r\n    </div>\r\n  ),\r\n);\r\n","import { RootStateType } from '../../types';\r\n\r\nimport { Nullable } from 'types';\r\n\r\nexport const getErrorNetworkMessage = (\r\n  state: RootStateType,\r\n): Nullable<string> | undefined => state.errorMessage.errorNetwork;\r\nexport const getErrorValidMessage = (\r\n  state: RootStateType,\r\n): Nullable<string> | undefined => state.errorMessage.errorValidation;\r\n","export const isEmailValid = (email: string): boolean => {\r\n  const EMAIL_REGEX =\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return EMAIL_REGEX.test(email);\r\n};\r\n","export const isPasswordValid = (password: string): boolean => {\r\n  const PASSWORD_REGEX = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\r\n  return PASSWORD_REGEX.test(password);\r\n};\r\n/* /^\r\n  (?=.*\\d)          // should contain at least one digit\r\n  (?=.*[a-z])       // should contain at least one lower case\r\n  (?=.*[A-Z])       // should contain at least one upper case\r\n  [a-zA-Z0-9]{8,}   // should contain at least 8 from the mentioned characters\r\n$/ */\r\n","export default __webpack_public_path__ + \"static/media/preloader1.9c1d25d2.gif\";","import React from 'react';\r\n\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport style from './Preloader.module.css';\r\n\r\nimport preloader1 from 'assets/preloader1.gif';\r\n\r\nexport const Preloader = (): ReturnComponentType => (\r\n  <div>\r\n    <img className={style.loader} src={preloader1} alt=\"preloader\" />\r\n  </div>\r\n);\r\n","import React, { ChangeEvent, useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\nimport { setAppStatusAC } from '../../store/reducers/appInitialized';\r\nimport { setErrorMessagePassAC } from '../../store/reducers/errorReducer';\r\nimport {\r\n  getErrorNetworkMessage,\r\n  getErrorValidMessage,\r\n} from '../../store/selectors/confirmPassword';\r\nimport { isEmailValid, isPasswordValid } from '../../utils';\r\nimport { CustomInput } from '../customInput';\r\nimport { Preloader } from '../preloader';\r\n\r\nimport st from './Login.module.css';\r\n\r\nimport { PATH } from 'enum';\r\nimport { useAppSelector, useInput } from 'hooks';\r\nimport { logInTC } from 'store';\r\nimport { getIsDataLoaded, getStatus } from 'store/selectors';\r\nimport style from 'style/Common.module.css';\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Login = (): ReturnComponentType => {\r\n  const [rememberMe, handleRememberMe] = useState<boolean>(false);\r\n  const { value: email, handleValue: handleEmail, resetValue: resetEmail } = useInput('');\r\n  const {\r\n    value: password,\r\n    handleValue: handlePassword,\r\n    resetValue: resetPassword,\r\n  } = useInput('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const isDataLoaded = useAppSelector(getIsDataLoaded);\r\n  /* const errorMessage = useAppSelector(getErrorMessage); */\r\n  const isLoading = useAppSelector(getStatus);\r\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n\r\n  const onChangeCheckBox = (e: ChangeEvent<HTMLInputElement>): void =>\r\n    handleRememberMe(e.currentTarget.checked);\r\n  const timeOut = 2000;\r\n\r\n  const onClickHandlerLogin = (): void => {\r\n    if (!isPasswordValid(password) || !isEmailValid(email)) {\r\n      dispatch(setErrorMessagePassAC('invalid data ;-('));\r\n      setTimeout(() => {\r\n        dispatch(setErrorMessagePassAC(''));\r\n      }, timeOut);\r\n      return;\r\n    }\r\n    if (isPasswordValid(password) && isEmailValid(email)) {\r\n      dispatch(logInTC({ email, password, rememberMe }));\r\n      resetEmail('');\r\n      resetPassword('');\r\n      dispatch(setAppStatusAC('succeeded'));\r\n    }\r\n  };\r\n  if (isDataLoaded) {\r\n    return <Navigate to={PATH.PROFILE} />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === 'loading' ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <div className={style.contentWrap}>\r\n            <h2> Login </h2>\r\n            {errorPassMessage && (\r\n              <span style={{ color: 'red' }}> {errorPassMessage} </span>\r\n            )}\r\n            {errorNetworkMessage && (\r\n              <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n            )}\r\n            <CustomInput\r\n              onChange={handleEmail}\r\n              value={email}\r\n              placeholder=\"Email\"\r\n              typeInput=\"text\"\r\n              // name=\"user[email]\"\r\n            />\r\n            <CustomInput\r\n              placeholder=\"password\"\r\n              typeInput=\"password\"\r\n              value={password}\r\n              onChange={handlePassword}\r\n            />\r\n            <div className={st.rememberMeInput}>\r\n              remember me\r\n              <input type=\"checkbox\" checked={rememberMe} onChange={onChangeCheckBox} />\r\n            </div>\r\n            <div>\r\n              <Link to={PATH.CONFIRM_PASSWORD}> Forgot password </Link>\r\n            </div>\r\n            <button onClick={onClickHandlerLogin} className={style.btn}>\r\n              Sign In\r\n            </button>\r\n            <p> Do not have an account? </p>\r\n            <Link to={PATH.REGISTRATION}> Sign Up </Link>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/103781_profile_edit_user_icon.4f216192.png\";","import React from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport noneAvatarImage from '../../assets/103781_profile_edit_user_icon.png';\r\n\r\nimport { PATH } from 'enum/pathes';\r\nimport style from 'style/Common.module.css';\r\nimport { ReturnComponentType } from 'types';\r\n\r\ntype PropsType = {\r\n  avatar: string;\r\n  name: string;\r\n  email: string | null;\r\n  onClickLogOut: () => void;\r\n  isAuthUser: boolean;\r\n  activateEditMode: () => void;\r\n  deactivateEditMode: () => void;\r\n  editMode: boolean;\r\n};\r\n\r\nexport const Profile = (props: PropsType): ReturnComponentType => {\r\n  const {\r\n    avatar,\r\n    name,\r\n    onClickLogOut,\r\n    isAuthUser,\r\n    activateEditMode,\r\n    deactivateEditMode,\r\n    editMode,\r\n    email,\r\n  } = props;\r\n  // // const userName = useSelector<RootStoreType, any>(state => state.login.name);\r\n  // // const name = useSelector<RootStoreType, InitialStateDataType>(\r\n  // //   state => state.profilePage,\r\n  // // );\r\n  // // const avatar = useSelector<RootStoreType, InitialStateDataType>(\r\n  // //   state => state.profilePage,\r\n  // // );\r\n  //\r\n  // const isAuthUser = useAppSelector(getIsDataLoaded);\r\n  // const isLoading = useAppSelector(getStatus);\r\n  // const dispatch = useDispatch();\r\n  //\r\n  //\r\n  // const { avatar } = props;\r\n  //\r\n  // const onClickLogOut = (): void => {\r\n  //   dispatch(logOutTC());\r\n  // };\r\n  //\r\n  // if (!isAuthUser) {\r\n  //   return <Navigate to={PATH.LOGIN} />;\r\n  // }\r\n  return (\r\n    /*    <div className={style.mainContainer}>\r\n      {/!* {isLoading === 'loading' ? ( *!/}\r\n      {/!*  <Preloader /> *!/}\r\n      {/!* ) : ( *!/} */\r\n    <div className={style.content}>\r\n      <h2> Profile </h2>\r\n      <img\r\n        alt=\"avatar_image\"\r\n        className={style.avatar}\r\n        src={avatar !== null ? avatar : noneAvatarImage}\r\n      />\r\n      {!editMode && (\r\n        <div>\r\n          <span>Nickname: {name}</span>\r\n          <div onDoubleClick={activateEditMode} onBlur={deactivateEditMode}>\r\n            {email}\r\n          </div>\r\n        </div>\r\n      )}\r\n      {isAuthUser ? (\r\n        <div>\r\n          {name}\r\n          <button className={style.btn} onClick={onClickLogOut}>\r\n            Log out\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <NavLink to={PATH.LOGIN}>Login</NavLink>\r\n      )}\r\n    </div>\r\n    /*      {/!* )} *!/}\r\n    </div> */\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport { PATH } from '../../enum';\r\nimport { useAppSelector } from '../../hooks';\r\nimport { logOutTC, RootStoreType } from '../../store';\r\nimport { getIsDataLoaded, getStatus } from '../../store/selectors';\r\nimport { Preloader } from '../preloader';\r\n\r\nimport { Profile } from './Profile';\r\n\r\nimport style from 'style/Common.module.css';\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const ProfileContainer = (): ReturnComponentType => {\r\n  // const userName = useSelector<RootStoreType, any>(state => state.login.name);\r\n\r\n  const profileData = useSelector<RootStoreType, any>(state => state.profilePage.profile);\r\n  const [editMode, setEditMode] = useState<boolean>(false);\r\n  const activateEditMode = (): void => setEditMode(true);\r\n  const deactivateEditMode = (): void => {\r\n    setEditMode(false);\r\n  };\r\n  const dispatch = useDispatch();\r\n  const isAuthUser = useAppSelector(getIsDataLoaded);\r\n  const isLoading = useAppSelector(getStatus);\r\n\r\n  const onClickLogOut = (): void => {\r\n    dispatch(logOutTC());\r\n  };\r\n\r\n  if (!isAuthUser) {\r\n    return <Navigate to={PATH.LOGIN} />;\r\n  }\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === 'loading' ? (\r\n        <Preloader />\r\n      ) : (\r\n        <Profile\r\n          email={profileData.email}\r\n          editMode={editMode}\r\n          activateEditMode={activateEditMode}\r\n          deactivateEditMode={deactivateEditMode}\r\n          name={profileData.name}\r\n          avatar={profileData.avatar}\r\n          isAuthUser={isAuthUser}\r\n          onClickLogOut={onClickLogOut}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { Nullable } from '../types';\r\n\r\nimport { instance } from './apiConfig';\r\n\r\nexport type AddNewPassType = {\r\n  email: Nullable<string>;\r\n  from?: Nullable<string>;\r\n  message?: Nullable<string>;\r\n};\r\n\r\nexport type SetNewPassType = {\r\n  password: Nullable<string>;\r\n  resetPasswordToken?: Nullable<string>;\r\n};\r\n\r\nexport type AddNewPassResponseType = {\r\n  info: Nullable<string>;\r\n  error: Nullable<string>;\r\n};\r\n\r\nexport const addNewPassAPI = {\r\n  addNewPass(params: AddNewPassType) {\r\n    return instance.post<AddNewPassType, AxiosResponse<AddNewPassResponseType>>(\r\n      'auth/forgot',\r\n      params,\r\n    );\r\n  },\r\n  setNewPass(params: SetNewPassType) {\r\n    return instance.post<SetNewPassType, AxiosResponse<AddNewPassResponseType>>(\r\n      'auth/set-new-password',\r\n      params,\r\n    );\r\n  },\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { authAPI, RegisterParamsType } from '../../api';\r\n\r\nimport { setAppStatusAC } from './appInitialized';\r\nimport { setErrorMessageNetworkAC } from './errorReducer';\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  isSignUp: false,\r\n};\r\ntype InitialStateType = typeof initialState;\r\n\r\nexport const signUpReducer = (\r\n  state = initialState,\r\n  action: SignUpActionTypes,\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'REGISTRATION/IS_FETCHING':\r\n      return { ...state, isFetching: action.isFetching };\r\n    case 'REGISTRATION/IS_SIGNUP_SUCCESSFUL': {\r\n      return {\r\n        ...state,\r\n        isSignUp: action.isSignUpSuccessful,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const toggleIsFetchingAC = (isFetching: boolean) =>\r\n  ({\r\n    type: 'REGISTRATION/IS_FETCHING',\r\n    isFetching,\r\n  } as const);\r\nexport const toggleIsSignUpAC = (isSignUpSuccessful: boolean) =>\r\n  ({\r\n    type: 'REGISTRATION/IS_SIGNUP_SUCCESSFUL',\r\n    isSignUpSuccessful,\r\n  } as const);\r\nexport const setErrorAC = (error: null | string) =>\r\n  ({ type: 'RECOVERY/ERROR', payload: { error } } as const);\r\n\r\nexport const signUpTC =\r\n  (params: RegisterParamsType) =>\r\n  (\r\n    dispatch: Dispatch<\r\n      | SignUpActionTypes\r\n      | ReturnType<typeof setErrorMessageNetworkAC>\r\n      | ReturnType<typeof setAppStatusAC>\r\n    >,\r\n  ) => {\r\n    dispatch(toggleIsFetchingAC(true));\r\n    dispatch(setAppStatusAC('loading'));\r\n    authAPI\r\n      .register(params)\r\n      .then(() => {\r\n        dispatch(toggleIsSignUpAC(true));\r\n        dispatch(setAppStatusAC('succeeded'));\r\n      })\r\n      .catch(e => {\r\n        dispatch(setAppStatusAC('succeeded'));\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n        const timeOut = 2000;\r\n        setTimeout(() => {\r\n          dispatch(setErrorMessageNetworkAC(''));\r\n        }, timeOut);\r\n      })\r\n      .finally(() => {\r\n        dispatch(toggleIsFetchingAC(false));\r\n      });\r\n  };\r\nexport type SetErrorType = ReturnType<typeof setErrorAC>;\r\n\r\ntype SignUpActionTypes =\r\n  | ReturnType<typeof toggleIsFetchingAC>\r\n  | ReturnType<typeof toggleIsSignUpAC>\r\n  | SetErrorType;\r\n","import React from 'react';\r\n\r\nimport st from './Registrations.module.css';\r\n\r\nimport { CustomButton, CustomInput } from 'components';\r\nimport style from 'style/Common.module.css';\r\nimport { ReturnComponentType } from 'types/ReturnComponentType';\r\n\r\ntype PropsType = {\r\n  email: string;\r\n  password: string;\r\n  handleEmail: () => void;\r\n  confirmPassword: string;\r\n  handlePassword: () => void;\r\n  handleConfirmPassword: () => void;\r\n  isFetching: boolean;\r\n  onSendButtonClick: () => void;\r\n  onCancelButtonClick: () => void;\r\n  errorValid: any;\r\n  errorNetwork: any;\r\n};\r\n\r\nexport const SignUp = (props: PropsType): ReturnComponentType => {\r\n  const {\r\n    email,\r\n    handleEmail,\r\n    errorValid,\r\n    errorNetwork,\r\n    password,\r\n    confirmPassword,\r\n    handlePassword,\r\n    handleConfirmPassword,\r\n    onSendButtonClick,\r\n    onCancelButtonClick,\r\n    isFetching,\r\n  } = props;\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      <div className={style.content}>\r\n        <div className={style.contentWrap}>\r\n          <h2>Registration</h2>\r\n          <span style={{ color: 'red' }}> {errorValid} </span>\r\n          <span style={{ color: 'red' }}> {errorNetwork} </span>\r\n          <CustomInput\r\n            placeholder=\"Email\"\r\n            typeInput=\"email\"\r\n            onChange={handleEmail}\r\n            value={email}\r\n            name=\"user[email]\"\r\n          />\r\n          <CustomInput\r\n            placeholder=\"Password\"\r\n            typeInput=\"password\"\r\n            onChange={handlePassword}\r\n            value={password}\r\n            name=\"user[password]\"\r\n          />\r\n          <CustomInput\r\n            placeholder=\"Confirm Password\"\r\n            typeInput=\"password\"\r\n            onChange={handleConfirmPassword}\r\n            value={confirmPassword}\r\n            name=\"user[password]\"\r\n          />\r\n          <p> Have fun! </p>\r\n          <div className={st.btns}>\r\n            <CustomButton title=\"Cancel\" onClick={onCancelButtonClick} />\r\n            <CustomButton\r\n              title=\"Create\"\r\n              onClick={onSendButtonClick}\r\n              disabled={isFetching}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport { RootStoreType } from '../../store';\r\nimport { setErrorMessagePassAC } from '../../store/reducers/errorReducer';\r\nimport { signUpTC } from '../../store/reducers/signUp';\r\nimport {\r\n  getErrorNetworkMessage,\r\n  getErrorValidMessage,\r\n} from '../../store/selectors/confirmPassword';\r\n\r\nimport { SignUp } from './signUp';\r\n\r\nimport { PATH } from 'enum/pathes';\r\nimport { useAppSelector, useInput } from 'hooks';\r\nimport { ReturnComponentType } from 'types';\r\nimport { isEmailValid, isPasswordValid } from 'utils';\r\n\r\nexport const SignUpContainer = (): ReturnComponentType => {\r\n  const { value: email, handleValue: handleEmail, resetValue: resetEmail } = useInput('');\r\n  const {\r\n    value: password,\r\n    handleValue: handlePassword,\r\n    resetValue: resetPassword,\r\n  } = useInput('');\r\n  const {\r\n    value: confirmPassword,\r\n    handleValue: handleConfirmPassword,\r\n    resetValue: resetConfirmPassword,\r\n  } = useInput('');\r\n\r\n  const isFetching = useSelector<RootStoreType, boolean>(\r\n    state => state.signUp.isFetching,\r\n  );\r\n  const isSignUp = useSelector<RootStoreType, boolean>(state => state.signUp.isSignUp);\r\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const data: any = {\r\n    email,\r\n    password,\r\n  };\r\n  const timeOut = 1000;\r\n\r\n  const onCancelButtonClick = (): void => {\r\n    resetEmail('');\r\n    resetPassword('');\r\n    resetConfirmPassword('');\r\n  };\r\n\r\n  const onSendButtonClick = (): void => {\r\n    if (\r\n      password !== confirmPassword ||\r\n      password === null ||\r\n      confirmPassword === null ||\r\n      !isPasswordValid(password) ||\r\n      !isEmailValid(email)\r\n    ) {\r\n      dispatch(setErrorMessagePassAC('invalid data ;-('));\r\n      setTimeout(() => {\r\n        dispatch(setErrorMessagePassAC(''));\r\n      }, timeOut);\r\n    }\r\n    if (isPasswordValid(password) && isEmailValid(email)) {\r\n      dispatch(signUpTC(data));\r\n      resetPassword('');\r\n      resetEmail('');\r\n      resetConfirmPassword('');\r\n    }\r\n  };\r\n  if (isSignUp) {\r\n    return <Navigate to={PATH.LOGIN} />;\r\n  }\r\n  return (\r\n    <SignUp\r\n      email={email}\r\n      password={password}\r\n      confirmPassword={confirmPassword}\r\n      handleEmail={handleEmail}\r\n      handlePassword={handlePassword}\r\n      handleConfirmPassword={handleConfirmPassword}\r\n      isFetching={isFetching}\r\n      onSendButtonClick={onSendButtonClick}\r\n      onCancelButtonClick={onCancelButtonClick}\r\n      errorValid={errorPassMessage}\r\n      errorNetwork={errorNetworkMessage}\r\n    />\r\n  );\r\n};\r\n","import { PATH } from 'enum';\r\n\r\nexport const appNavigation: appNavigationType = [\r\n  { id: 1, title: 'registration', link: PATH.REGISTRATION },\r\n  { id: 2, title: 'login', link: PATH.LOGIN },\r\n  { id: 3, title: 'profile', link: PATH.PROFILE },\r\n  { id: 4, title: 'confirmPassword', link: PATH.CONFIRM_PASSWORD },\r\n  { id: 5, title: 'popup', link: PATH.POPUP },\r\n  { id: 6, title: 'createNewPassword', link: PATH.CREATE_NEW_PASSWORD },\r\n  { id: 7, title: 'page404', link: PATH.PAGE_404 },\r\n];\r\n\r\ntype appNavigationType = { id: number; title: string; link: string }[];\r\n","import React from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport style from './Navigation.module.css';\r\n\r\nimport { appNavigation } from 'constants/Navigation';\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Navigation = (): ReturnComponentType => (\r\n  <div className={style.nav}>\r\n    <div className={style.wrap}>\r\n      <div className={style.navList}>\r\n        {appNavigation.map(({ id, title, link }) => (\r\n          <NavLink className={style.listItem} to={link} key={id}>\r\n            <div className={style.navElement}>{title}</div>\r\n          </NavLink>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import React, { useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\nimport { AddNewPassType } from '../../api/forgotPasswordApi';\r\nimport { useAppSelector, useInput } from '../../hooks';\r\nimport { forgotPassAddEmailTC } from '../../store/middlewares/forgotPassAddEmailTC';\r\nimport { setErrorMessagePassAC } from '../../store/reducers/errorReducer';\r\nimport { getStatus } from '../../store/selectors';\r\nimport {\r\n  getErrorNetworkMessage,\r\n  getErrorValidMessage,\r\n} from '../../store/selectors/confirmPassword';\r\nimport style from '../../style/Common.module.css';\r\nimport { isEmailValid } from '../../utils/emailValidation';\r\nimport { CustomInput } from '../customInput';\r\nimport { Preloader } from '../preloader';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const ConfirmPassword = (): ReturnComponentType => {\r\n  const [isShown, setShowMessage] = useState(false);\r\n  const { value: email, handleValue: handleEmail, resetValue: resetEmail } = useInput('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n  const isLoading = useAppSelector(getStatus);\r\n\r\n  const dataPayload: AddNewPassType = {\r\n    email,\r\n    from: 'test-front-admin <samutic40@gmail.com>',\r\n    message: `<div style='background-color: #ffd500; \r\npadding: 15px; \r\nborder-color: #ff9900; \r\nwidth: 250px;\r\nheight: 30px'> \r\npassword recovery link: <a href='https://or1ginald.github.io/gameCards/#/createNewPassword/$token$'> recovery link </a></div>`,\r\n  };\r\n\r\n  const timeOut = 2000;\r\n  const onSendButtonClick = (): void => {\r\n    if (isEmailValid(email)) {\r\n      dispatch(forgotPassAddEmailTC(dataPayload, setShowMessage));\r\n      resetEmail('');\r\n    } else {\r\n      dispatch(setErrorMessagePassAC('invalid email ;-('));\r\n      setTimeout(() => {\r\n        dispatch(setErrorMessagePassAC(''));\r\n      }, timeOut);\r\n    }\r\n  };\r\n\r\n  if (isShown) {\r\n    return <Navigate to=\"/popup\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === 'loading' ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <div className={style.contentWrap}>\r\n            <h2>Forgot your password?</h2>\r\n            {errorPassMessage && (\r\n              <span style={{ color: 'red' }}> {errorPassMessage} </span>\r\n            )}\r\n            {errorNetworkMessage && (\r\n              <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n            )}\r\n            <div className={style.inputCentering}>\r\n              <CustomInput\r\n                placeholder=\"Email\"\r\n                typeInput=\"email\"\r\n                onChange={handleEmail}\r\n                value={email}\r\n              />\r\n            </div>\r\n            <p> Enter your email and we will send you further instructions</p>\r\n            <div>\r\n              <button className={style.btn} onClick={onSendButtonClick}>\r\n                send instructions\r\n              </button>\r\n            </div>\r\n            <span>Did you remember your password?</span>\r\n            <Link to=\"/login\"> Try logging in </Link>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { addNewPassAPI, AddNewPassType } from '../../api/forgotPasswordApi';\r\nimport { setAppStatusAC } from '../reducers/appInitialized';\r\nimport { setErrorMessageNetworkAC } from '../reducers/errorReducer';\r\n\r\nexport const forgotPassAddEmailTC =\r\n  (dataPayload: AddNewPassType, setShowMessage: any) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'));\r\n    addNewPassAPI\r\n      .addNewPass(dataPayload)\r\n      .then(() => {\r\n        setShowMessage(true);\r\n        dispatch(setAppStatusAC('succeeded'));\r\n      })\r\n      .catch(e => {\r\n        dispatch(setAppStatusAC('succeeded'));\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n        const timeOut = 2000;\r\n        setTimeout(() => {\r\n          dispatch(setErrorMessageNetworkAC(''));\r\n        }, timeOut);\r\n      });\r\n  };\r\n","import React, { useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nimport { SetNewPassType } from '../../api/forgotPasswordApi';\r\nimport { useAppSelector, useInput } from '../../hooks';\r\nimport { forgotPassSetPassTC } from '../../store/middlewares/forgotPassSetPassTC';\r\nimport { setAppStatusAC } from '../../store/reducers/appInitialized';\r\nimport { setErrorMessagePassAC } from '../../store/reducers/errorReducer';\r\nimport { getStatus } from '../../store/selectors';\r\nimport {\r\n  getErrorNetworkMessage,\r\n  getErrorValidMessage,\r\n} from '../../store/selectors/confirmPassword';\r\nimport style from '../../style/Common.module.css';\r\nimport { isPasswordValid } from '../../utils';\r\nimport { CustomInput } from '../customInput';\r\nimport { Preloader } from '../preloader';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const CreateNewPassword = (): ReturnComponentType => {\r\n  const [isLoadedData, setLoadedData] = useState(false);\r\n  const {\r\n    value: newPassword,\r\n    handleValue: handleNewPassword,\r\n    resetValue: resetNewPassword,\r\n  } = useInput('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const errorPassMessage = useAppSelector(getErrorValidMessage);\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n  const isLoading = useAppSelector(getStatus);\r\n\r\n  const params = useParams<'token'>();\r\n  const { token } = params as { token: string };\r\n\r\n  const data: SetNewPassType = {\r\n    password: newPassword,\r\n    resetPasswordToken: token,\r\n  };\r\n\r\n  const timeOut = 2000;\r\n  const onCreateButtonClick = (): void => {\r\n    if (isPasswordValid(newPassword)) {\r\n      dispatch(setAppStatusAC('loading'));\r\n      dispatch(forgotPassSetPassTC(data, setLoadedData));\r\n      dispatch(setAppStatusAC('succeeded'));\r\n      resetNewPassword('');\r\n    } else {\r\n      dispatch(setErrorMessagePassAC('invalid password ;-('));\r\n      setTimeout(() => {\r\n        dispatch(setErrorMessagePassAC(''));\r\n      }, timeOut);\r\n    }\r\n  };\r\n\r\n  if (isLoadedData) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isLoading === 'loading' ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <div className={style.contentWrap}>\r\n            <h2>Create new password</h2>\r\n            {errorPassMessage && (\r\n              <span style={{ color: 'red' }}> {errorPassMessage} </span>\r\n            )}\r\n            {errorNetworkMessage && (\r\n              <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n            )}\r\n            <div className={style.inputCentering}>\r\n              <CustomInput\r\n                placeholder=\"Password\"\r\n                typeInput=\"password\"\r\n                onChange={handleNewPassword}\r\n                value={newPassword}\r\n              />\r\n            </div>\r\n            <p> Create new password and we will send you further instructions to email</p>\r\n            <div>\r\n              <button className={style.btn} onClick={onCreateButtonClick}>\r\n                Create new password\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { addNewPassAPI, SetNewPassType } from '../../api/forgotPasswordApi';\r\nimport { setErrorMessageNetworkAC } from '../reducers/errorReducer';\r\n\r\nexport const forgotPassSetPassTC =\r\n  (data: SetNewPassType, setLoadedData: any) => (dispatch: Dispatch) => {\r\n    addNewPassAPI\r\n      .setNewPass(data)\r\n      .then(() => {\r\n        setLoadedData(true);\r\n      })\r\n      .catch(e => {\r\n        const errorNetwork = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n        const timeOut = 2000;\r\n        setTimeout(() => {\r\n          dispatch(setErrorMessageNetworkAC(''));\r\n        }, timeOut);\r\n      });\r\n  };\r\n","export default __webpack_public_path__ + \"static/media/letter.3761fe05.png\";","import React from 'react';\r\n\r\nimport letter from '../../assets/letter.png';\r\nimport style from '../../style/Common.module.css';\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport st from './ConfirmPassword.module.css';\r\n\r\nexport const Popup = (): ReturnComponentType => (\r\n  <div>\r\n    <div className={style.mainContainer}>\r\n      <div className={style.content}>\r\n        <img className={st.letterImg} src={letter} alt=\"letter\" />\r\n        <div className={style.contentWrap}>\r\n          <h2 className={st.heading}>Check Email</h2>\r\n          <p>We have sent the Email with instructions to your email </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","export default __webpack_public_path__ + \"static/media/error.6b88fd10.png\";","import React, { ChangeEvent, useState } from 'react';\r\n\r\nimport style from './Range.module.css';\r\n\r\nconst SuperRange = (): any => {\r\n  const initialValue = 0;\r\n  const [number, setNumber] = useState<number>(initialValue);\r\n  const onChangeRange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n    setNumber(+e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {number}\r\n      <input\r\n        type=\"range\"\r\n        onChange={onChangeRange}\r\n        value={number}\r\n        className={style.range}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SuperRange;\r\n","import React from 'react';\r\n\r\nimport SuperRange from '../table/Range';\r\n\r\nimport s from './tableSidebar.module.css';\r\n\r\nimport { CustomButton } from 'components';\r\n\r\nexport const TableSidebar = React.memo(() => {\r\n  const onFilterMyPacksClick = (): void => {}; // Напоминалка использовать useCallback\r\n  const onAllButtonClick = (): void => {}; // Напоминалка использовать useCallback\r\n  return (\r\n    <div className={s.tableSidebar}>\r\n      <div className={s.pickBlock}>\r\n        <h3 className={s.header3}>Show cards packs</h3>\r\n        <div className={s.buttonsContainer}>\r\n          <CustomButton title=\"My\" onClick={onFilterMyPacksClick} />\r\n          <CustomButton title=\"All\" onClick={onAllButtonClick} />\r\n        </div>\r\n      </div>\r\n      <div className={s.pickBlock}>\r\n        <div>Number of cards</div>\r\n        <SuperRange />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\n\r\nimport s from './CustomButton.module.css';\r\n\r\ntype ButtonPropsType = {\r\n  title: string;\r\n  onClick: () => void;\r\n  disabled?: boolean;\r\n};\r\n\r\nexport const CustomButton = React.memo((props: ButtonPropsType) => {\r\n  const { onClick, title, disabled } = props;\r\n  const onButtonClick = (): void => {\r\n    onClick();\r\n  };\r\n  return (\r\n    <button className={s.button} onClick={onButtonClick} disabled={disabled}>\r\n      {title}\r\n    </button>\r\n  );\r\n});\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { ResponseDeckType } from './decksTC';\r\n\r\nimport { instance } from 'api/apiConfig';\r\n\r\nexport type addNewDeckType = {\r\n  name: string;\r\n};\r\n\r\nexport type updateDeckType = {\r\n  _id: string;\r\n};\r\n\r\nexport const decksAPI = {\r\n  fetchDecks() {\r\n    return instance.get<any, AxiosResponse<ResponseDeckType>>('cards/pack');\r\n  },\r\n  addNewDeck(cardsPack: addNewDeckType) {\r\n    return instance.post<addNewDeckType, AxiosResponse<any>>('cards/pack', { cardsPack });\r\n  },\r\n\r\n  removeDeck(id: string) {\r\n    return instance.delete<string, any>(`cards/pack/?id=${id}`);\r\n  },\r\n\r\n  updateDeck(cardsPack: updateDeckType) {\r\n    return instance.put<string, any>('cards/pack', { cardsPack });\r\n  },\r\n};\r\n","import { AxiosError } from 'axios';\r\nimport { Dispatch } from 'redux';\r\n\r\nimport { setAppStatusAC } from '../../store/reducers/appInitialized';\r\nimport { setErrorMessageNetworkAC } from '../../store/reducers/errorReducer';\r\n\r\nimport { addNewDeckType, decksAPI } from './decksApi';\r\n\r\nexport type deckTemplate = {\r\n  _id: string;\r\n  userId?: string | undefined;\r\n  name?: string;\r\n  path?: string;\r\n  cardsCount?: number;\r\n  grade?: number;\r\n  shots?: number;\r\n  rating?: number;\r\n  type?: string;\r\n  created?: string;\r\n  updated?: string;\r\n  __v?: number;\r\n};\r\n\r\nexport type ResponseDeckType = {\r\n  cardPacks: deckTemplate[];\r\n  cardPacksTotalCount: number; // totalCount\r\n  maxCardsCount: number;\r\n  minCardsCount: number;\r\n  page: number; // currentPage\r\n  pageCount: number; // perPage\r\n};\r\nconst initialState: deckTemplate[] = [];\r\n\r\nexport const decksReducer = (\r\n  state: deckTemplate[] = initialState,\r\n  action: ActionsType,\r\n): deckTemplate[] => {\r\n  switch (action.type) {\r\n    case 'FETCH_DECKS':\r\n      return [...state, ...action.decks];\r\n    case 'REMOVE_DECK':\r\n      return state.filter(deck => deck._id !== action.id);\r\n    case 'ADD_DECK':\r\n      return [{ ...action.deck }, ...state];\r\n    case 'UPDATE_DECK':\r\n      return state.map(deck =>\r\n        deck._id === action.id ? { ...deck, name: action.title } : deck,\r\n      );\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// actions\r\nexport const fetchDecksAC = (decks: deckTemplate[]) =>\r\n  ({\r\n    type: 'FETCH_DECKS',\r\n    decks,\r\n  } as const);\r\nexport const deleteDeckAC = (id: string) =>\r\n  ({\r\n    type: 'REMOVE_DECK',\r\n    id,\r\n  } as const);\r\nexport const addDeckAC = (deck: any) =>\r\n  ({\r\n    type: 'ADD_DECK',\r\n    deck,\r\n  } as const);\r\n\r\nexport const upDateDeckAC = (title: any, id: string) =>\r\n  ({\r\n    type: 'UPDATE_DECK',\r\n    title,\r\n    id,\r\n  } as const);\r\n\r\ntype ActionsType =\r\n  | ReturnType<typeof fetchDecksAC>\r\n  | ReturnType<typeof deleteDeckAC>\r\n  | ReturnType<typeof addDeckAC>\r\n  | ReturnType<typeof upDateDeckAC>;\r\n\r\n// thunk\r\n\r\nexport const setDecksTC = () => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC('loading'));\r\n  decksAPI\r\n    .fetchDecks()\r\n    .then(res => {\r\n      dispatch(fetchDecksAC(res.data.cardPacks));\r\n      dispatch(setAppStatusAC('succeeded'));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC('succeeded'));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\nexport const removeDeckTC = (id: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC('loading'));\r\n  decksAPI\r\n    .removeDeck(id)\r\n    .then(() => {\r\n      dispatch(deleteDeckAC(id));\r\n      dispatch(setAppStatusAC('succeeded'));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC('succeeded'));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\n\r\nexport const addDeckTC = (dataPayload: addNewDeckType) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC('loading'));\r\n  decksAPI\r\n    .addNewDeck(dataPayload)\r\n    .then(res => {\r\n      const deck = res.data.newCardsPack;\r\n      dispatch(addDeckAC(deck));\r\n      dispatch(setAppStatusAC('succeeded'));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC('succeeded'));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\n\r\nexport const upDateDeckTC = (title: any, _id: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC('loading'));\r\n  decksAPI\r\n    .updateDeck({ _id })\r\n    .then(() => {\r\n      dispatch(upDateDeckAC(title, _id));\r\n      dispatch(setAppStatusAC('succeeded'));\r\n    })\r\n    .catch((e: AxiosError) => {\r\n      dispatch(setAppStatusAC('succeeded'));\r\n      const errorNetwork = e.response\r\n        ? e.response.data.error\r\n        : `${e.message}, more details in the console`;\r\n      dispatch(setErrorMessageNetworkAC(errorNetwork));\r\n    });\r\n};\r\n","import React, { ChangeEvent, useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { upDateDeckTC } from './decksTC';\r\n\r\ntype EditableSpanPropsType = {\r\n  value: any;\r\n  id: string;\r\n};\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [title, setTitle] = useState(props.value);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const activateEditMode = (): void => {\r\n    setEditMode(true);\r\n    setTitle(props.value);\r\n  };\r\n  const activateViewMode = (): void => {\r\n    dispatch(upDateDeckTC(title, props.id));\r\n    setEditMode(false);\r\n  };\r\n  const changeTitle = (e: ChangeEvent<HTMLTextAreaElement>): void => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  return editMode ? (\r\n    // eslint-disable-next-line jsx-a11y/no-autofocus\r\n    <textarea value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n  ) : (\r\n    <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n  );\r\n});\r\n","import React, { ChangeEvent, useEffect, useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { setErrorMessageNetworkAC } from '../../store/reducers/errorReducer';\r\nimport { getErrorNetworkMessage } from '../../store/selectors/confirmPassword';\r\nimport style from '../../style/Common.module.css';\r\n\r\nimport { addDeckTC, deckTemplate, removeDeckTC, setDecksTC } from './decksTC';\r\nimport { EditableSpan } from './EditableSpan';\r\nimport styleTable from './Table.module.css';\r\n\r\nimport { Preloader, TableSidebar } from 'components';\r\nimport { useAppSelector } from 'hooks';\r\nimport { getStatus } from 'store/selectors';\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Table = (): ReturnComponentType => {\r\n  const [title, setTitle] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const errorNetworkMessage = useAppSelector(getErrorNetworkMessage);\r\n  const isLoading = useAppSelector(getStatus);\r\n  const decks = useAppSelector(state => state.decks);\r\n\r\n  useEffect(() => {\r\n    dispatch(setDecksTC());\r\n  }, [dispatch]);\r\n\r\n  const random = 100000;\r\n\r\n  const onRemoveDeckClick = (id: string): void => {\r\n    dispatch(removeDeckTC(id));\r\n    dispatch(setErrorMessageNetworkAC(''));\r\n  };\r\n\r\n  const onTitleEnterChange = (e: ChangeEvent<HTMLTextAreaElement>): void => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n  const addButtonClick = (): void => {\r\n    dispatch(addDeckTC({ name: title }));\r\n    setTitle('');\r\n  };\r\n\r\n  // const onFilterMyPacksClick = (): void => {};\r\n\r\n  return (\r\n    <div className={styleTable.wrapper}>\r\n      <TableSidebar />\r\n\r\n      {isLoading === 'loading' ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={styleTable.rightBlock}>\r\n          <div className={styleTable.decks}>\r\n            <h3 style={{ fontSize: '1.1em' }}> Packs list </h3>\r\n            <div className={styleTable.searchInputSection}>\r\n              <input\r\n                className={styleTable.inputSearch}\r\n                id=\"decks\"\r\n                placeholder=\"Search\"\r\n                type=\"search\"\r\n              />\r\n              <textarea\r\n                className={styleTable.textArea}\r\n                placeholder=\"name pack\"\r\n                value={title}\r\n                onChange={onTitleEnterChange}\r\n              />\r\n              <button className={style.btn} onClick={addButtonClick}>\r\n                Add new pack\r\n              </button>\r\n            </div>\r\n\r\n            <div className={styleTable.tableCommon}>\r\n              <div className={styleTable.element}>\r\n                <div className={styleTable.elementPartOne} style={{ fontSize: '16px' }}>\r\n                  Name\r\n                </div>\r\n                <div className={styleTable.elementPartTwo} style={{ fontSize: '16px' }}>\r\n                  CardsCount\r\n                </div>\r\n                <div className={styleTable.elementPartThree} style={{ fontSize: '16px' }}>\r\n                  Updated\r\n                </div>\r\n              </div>\r\n\r\n              <div className={styleTable.tableRow}>\r\n                {errorNetworkMessage && (\r\n                  <span style={{ color: 'red' }}> {errorNetworkMessage} </span>\r\n                )}\r\n                {decks.map((deck: deckTemplate) => (\r\n                  <div className={styleTable.element} key={Math.random() * random}>\r\n                    <div className={styleTable.elementPartOne}>\r\n                      <EditableSpan value={deck.name} id={deck._id} />\r\n                    </div>\r\n                    <div className={styleTable.elementPartTwo}>{deck.cardsCount}</div>\r\n                    <div className={styleTable.elementPartThree}>{deck.updated}</div>\r\n                    <button className={styleTable.btn}>update</button>\r\n                    <button\r\n                      className={styleTable.btn}\r\n                      onClick={() => onRemoveDeckClick(deck._id)}\r\n                    >\r\n                      delete\r\n                    </button>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Table } from './table/Table';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Test = (): ReturnComponentType => (\r\n  <div>\r\n    {/* <div className={style.container}>\r\n      <p style={{ color: 'white' }}> Test page </p>\r\n    </div> */}\r\n    <Table />\r\n  </div>\r\n);\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Route, Routes } from 'react-router-dom';\r\n\r\nimport s from './App.module.css';\r\nimport { PageError404 } from './components/404/Page_error_404';\r\nimport style from './components/navigation/Navigation.module.css';\r\nimport { useAppSelector } from './hooks';\r\nimport { initializeAppTC } from './store';\r\nimport { getIsInitialized } from './store/selectors';\r\nimport { ReturnComponentType } from './types';\r\n\r\nimport {\r\n  ConfirmPassword,\r\n  CreateNewPassword,\r\n  Login,\r\n  Navigation,\r\n  Popup,\r\n  Preloader,\r\n  SignUpContainer,\r\n} from 'components';\r\nimport { ProfileContainer } from 'components/profile/ProfileContainer';\r\nimport { Test } from 'components/Test';\r\nimport { PATH } from 'enum';\r\nimport st from 'style/Common.module.css';\r\n\r\nexport const App = (): ReturnComponentType => {\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const isInitialized = useAppSelector(getIsInitialized);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC());\r\n  }, []);\r\n  if (!isInitialized) {\r\n    return (\r\n      <div style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n        <Preloader />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // 1\r\n\r\n  const showMenuHandler = (): void => {\r\n    setShowMenu(!showMenu);\r\n  };\r\n  return (\r\n    <div className={s.app}>\r\n      <div className={s.layout}>\r\n        <div>\r\n          <button className={st.btn} onClick={showMenuHandler}>\r\n            Show menu\r\n          </button>\r\n        </div>\r\n        {showMenu ? <Navigation /> : <div className={style.nav} />}\r\n\r\n        <div className={s.main}>\r\n          <Routes>\r\n            <Route path={PATH.LOGIN} element={<Login />} />\r\n            <Route path={PATH.REGISTRATION} element={<SignUpContainer />} />\r\n            <Route path={PATH.PROFILE} element={<ProfileContainer />} />\r\n            <Route path={PATH.PAGE_404} element={<PageError404 />} />\r\n            <Route path={PATH.CONFIRM_PASSWORD} element={<ConfirmPassword />} />\r\n            <Route path={PATH.POPUP} element={<Popup />} />\r\n            <Route path={PATH.CREATE_NEW_PASSWORD} element={<CreateNewPassword />} />\r\n            <Route path=\"/\" element={<Test />} />\r\n          </Routes>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport { decksReducer } from '../components/table/decksTC';\r\n\r\nimport { errorForgotPasswordReducer } from './reducers/errorReducer';\r\nimport { signUpReducer } from './reducers/signUp';\r\n\r\nimport { appReducer, cardReducer, loginReducer, profileReducer } from 'store';\r\n\r\nexport const rootReducer = combineReducers({\r\n  cards: cardReducer,\r\n  signUp: signUpReducer,\r\n  login: loginReducer,\r\n  profilePage: profileReducer,\r\n  errorMessage: errorForgotPasswordReducer,\r\n  app: appReducer,\r\n  decks: decksReducer,\r\n});\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type RootStoreType = ReturnType<typeof rootReducer>;\r\n\r\n// @ts-ignore\r\n\r\nwindow.store = store;\r\n","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store } from './store/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Table_wrapper__Q6n57\",\"leftBlock\":\"Table_leftBlock__1RTP-\",\"btns\":\"Table_btns__gIZA8\",\"rightBlock\":\"Table_rightBlock__2kslH\",\"decks\":\"Table_decks__1krzl\",\"element\":\"Table_element__28FA6\",\"elementPart\":\"Table_elementPart__aB51_\",\"tableCaption\":\"Table_tableCaption__16t_c\",\"captionElement\":\"Table_captionElement__3xb70\",\"btn\":\"Table_btn__4zGgo\",\"searchInputSection\":\"Table_searchInputSection__297PX\",\"inputSearch\":\"Table_inputSearch__1zU9D\",\"textArea\":\"Table_textArea__3jdnU\",\"elementPartOne\":\"Table_elementPartOne__2mrK7\",\"elementPartTwo\":\"Table_elementPartTwo__3rphb\",\"elementPartThree\":\"Table_elementPartThree__2wUEF\"};"],"sourceRoot":""}
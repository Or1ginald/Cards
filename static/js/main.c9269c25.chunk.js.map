{"version":3,"sources":["components/navigation/Navigation.module.css","components/confirmPassword/ConfirmPassword.module.css","App.module.css","components/customInput/CustomInputText.module.css","style/Common.module.css","components/preloader/Preloader.module.css","components/loginPage/Login.module.css","components/registrations/Registrations.module.css","enum/pathes.ts","hooks/useAppSelector.ts","hooks/useInput/useInput.ts","store/reducers/cards.ts","api/apiConfig/index.ts","api/loginApi.ts","store/reducers/appInitialized.ts","store/reducers/login.ts","store/reducers/profile.ts","store/selectors/login/loginSelectors.ts","store/selectors/app/appSelectors.ts","components/customInput/CustomInput.tsx","assets/preloader1.gif","components/preloader/Preloader.tsx","components/loginPage/Login.tsx","components/profile/Profile.tsx","api/forgotPasswordApi.ts","utils/emailValidation.ts","utils/passwordValidation.ts","components/registrations/Registrations.tsx","constants/Navigation/appNavigation.ts","components/navigation/Navigation.tsx","components/confirmPassword/ConfirmPassword.tsx","store/middlewares/forgotPassAddEmailTC.ts","assets/error.png","components/confirmPassword/PopupError.tsx","components/confirmPassword/CreateNewPassword.tsx","store/middlewares/forgotPassSetPassTC.ts","assets/letter.png","components/confirmPassword/Popup.tsx","components/Test.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","PATH","useAppSelector","useSelector","useInput","initialValue","useState","value","setValue","handleValue","e","target","resetValue","initState","instance","axios","create","baseURL","process","withCredentials","authAPI","params","post","delete","initialState","status","error","isInitialized","setAppStatusAC","type","isAuth","setAuthLoginDataAC","setErrorMessageAC","_id","avatar","name","email","rememberMe","getIsDataLoaded","state","login","getErrorMessage","getIsInitialized","app","getStatus","CustomInput","memo","placeholder","typeInput","className","onChange","s","inputWrap","input","autoComplete","spellCheck","Preloader","style","loader","src","preloader1","alt","Login","handleRememberMe","handleEmail","password","handlePassword","dispatch","useDispatch","isDataLoaded","errorMessage","isLoading","to","PROFILE","mainContainer","content","contentWrap","color","display","justifyContent","alignItems","flexWrap","st","rememberMeInput","checked","currentTarget","CONFIRM_PASSWORD","onClick","data","then","catch","response","message","finally","btn","REGISTRATION","Profile","isAuthUser","LOGIN","addNewPassAPI","isEmailValid","test","isPasswordValid","Registrations","confirmPassword","handleConfirmPassword","isLoadedData","setLoadedData","btns","appNavigation","id","title","link","POPUP","CREATE_NEW_PASSWORD","Navigation","nav","wrap","navList","map","listItem","navElement","ConfirmPassword","loading","setLoading","isShown","setShowMessage","resetEmail","dataPayload","from","inputCentering","forgotPassAddEmailTC","console","log","PopupError","setError","errorImg","errorSign","CreateNewPassword","isError","newPassword","handleNewPassword","resetNewPassword","location","useLocation","token","pathname","split","length","resetPasswordToken","forgotPassSetPassTC","Popup","letterImg","letter","Test","container","App","useEffect","layout","main","path","element","position","top","textAlign","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","cards","profilePage","payload","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9269c25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__3CXyF\",\"wrap\":\"Navigation_wrap__3J-xK\",\"listItem\":\"Navigation_listItem__2wBIY\",\"navElement\":\"Navigation_navElement__3VPMA\",\"p\":\"Navigation_p__3EbMI\",\"navList\":\"Navigation_navList__FK_Ih\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"letterImg\":\"ConfirmPassword_letterImg__3UhNI\",\"errorImg\":\"ConfirmPassword_errorImg__1CPVm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"layout\":\"App_layout__1LipR\",\"main\":\"App_main__3ZkGI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"CustomInputText_superInput__1rT3h\",\"input\":\"CustomInputText_input__3cd74\",\"errorInput\":\"CustomInputText_errorInput__1Hzuo\",\"error\":\"CustomInputText_error__zMENZ\",\"inputWrap\":\"CustomInputText_inputWrap__1SUXE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Common_mainContainer__1YbqG\",\"contentWrap\":\"Common_contentWrap__3cz03\",\"content\":\"Common_content__2nJCL\",\"btn\":\"Common_btn__3a_wE\",\"inputEmail\":\"Common_inputEmail__3iLZ5\",\"inputPassword\":\"Common_inputPassword__yLVis\",\"inputCentering\":\"Common_inputCentering__1z1RO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__3R_QX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rememberMeInput\":\"Login_rememberMeInput__2wEHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Registrations_btns__17Wql\"};","export enum PATH {\n  REGISTRATION = '/registration',\n  LOGIN = '/login',\n  PROFILE = '/profile',\n  CONFIRM_PASSWORD = '/confirmPassword',\n  POPUP = '/popup',\n  CREATE_NEW_PASSWORD = '/createNewPassword/*',\n}\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\n\nimport { RootStateType } from 'store/types';\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\n","import { ChangeEvent, useState } from 'react';\n\n// type useInputPropsType = {\n//   value: string;\n//   setValue: any;\n//   reset: any;\n//   bind: {\n//     value: string;\n//     onChange: (event: any) => void;\n//   };\n// };\n\nexport const useInput = (initialValue: string): any => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleValue = (e: ChangeEvent<HTMLInputElement>): void =>\n    setValue(e.target.value);\n  const resetValue = (): void => setValue(initialValue);\n\n  return { value, handleValue, resetValue };\n};\n\n// return {\n//   value,\n//   setValue,\n//   reset: () => setValue(''),\n//   bind: {\n//     value,\n//     onChange: (event: any) => {\n//       setValue(event.target.value);\n//     },\n//   },\n// };\n\n// export const useInput = (initialValue: string): any => {\n//   const [inputValue, setInputValue] = useState(initialValue);\n//\n//   const handleInputValueChange = useCallback(\n//     (newValue: string) => setInputValue(newValue),\n//     [],\n//   );\n//\n//   return useMemo(\n//     () => ({ inputValue, handleInputValueChange }),\n//     [inputValue, handleInputValueChange],\n//   );\n// };\n","const initState = {};\n\ntype initStateType = {};\n\nexport const cardReducer = (\n  state: initStateType = initState,\n  action: any,\n): initStateType => {\n  switch (action.type) {\n    case '': {\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n","import axios from 'axios';\n\nconst baseUrl = process.env.REACT_APP_BASE_URL; // Достаем базовый юрл из .env(ссылка на хироку)\n\nexport const instance = axios.create({\n  baseURL: baseUrl,\n  withCredentials: true,\n});\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from './apiConfig';\n\nexport const authAPI = {\n  login(params: LoginParamsType) {\n    return instance.post<\n      LoginParamsType,\n      /* 'сам объект сервера который отправляет игнат' */\n      /* AxiosResponse нужен только у методов put и post */\n      AxiosResponse<ResponseType>\n    >('auth/login', params);\n  },\n  logOut() {\n    return instance.delete<ResponseType>('auth/me', {});\n  },\n  me() {\n    return instance.post<ResponseType>('auth/me');\n  },\n  register(params: RegisterParamsType) {\n    return instance.post<RegisterParamsType, any>('auth/register', params);\n  },\n};\n\n// types\n\nexport type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n};\nexport type RegisterParamsType = {\n  email: string;\n  password: string;\n};\n\nexport type ResponseType = {\n  _id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  publicCardPacksCount: number;\n  created: Date;\n  updated: Date;\n  verified: boolean;\n  rememberMe: boolean;\n  error?: string;\n};\n","import { ThunkDispatch } from 'redux-thunk';\n\nimport { RootStoreType } from '../store';\n\nimport { setAuthLoginDataAC, setLoginData } from './login';\n\nimport { authAPI } from 'api/loginApi';\nimport { Nullable } from 'types';\n\nexport const initialState: InitialStateType = {\n  status: 'idle',\n  error: null,\n  isInitialized: false,\n};\n\nexport const appReducer = (\n  state: InitialStateType = initialState,\n  action: ActionTypes,\n): InitialStateType => {\n  switch (action.type) {\n    case 'APP/SET_STATUS':\n      return { ...state, status: action.status };\n    case 'APP/SET_ERROR':\n      return { ...state, error: action.error };\n    case 'APP/SET_IS_INITIALIZED':\n      return { ...state, isInitialized: action.isInitialized };\n    default:\n      return { ...state };\n  }\n};\n\nexport const setAppErrorAC = (error: Nullable<string>) =>\n  ({ type: 'APP/SET_ERROR', error } as const);\nexport const setAppStatusAC = (status: RequestStatusType) =>\n  ({ type: 'APP/SET_STATUS', status } as const);\n\nexport const setIsInitializedAC = (isInitialized: boolean) =>\n  ({ type: 'APP/SET_IS_INITIALIZED', isInitialized } as const);\n\nexport const initializeAppTC =\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n    authAPI\n      .me()\n      .then(() => {\n        dispatch(setAuthLoginDataAC(true));\n      })\n      .finally(() => {\n        dispatch(setIsInitializedAC(true));\n      });\n  };\n\n// types\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\nexport type InitialStateType = {\n  // происходит ли сейчас взаимодействие с сервером\n  status: RequestStatusType;\n  // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n  error: Nullable<string>;\n  isInitialized: boolean;\n};\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\nexport type setIsInitializedType = ReturnType<typeof setIsInitializedAC>;\n\ntype ActionTypes =\n  | SetAppErrorActionType\n  | SetAppStatusActionType\n  | setIsInitializedType\n  | setLoginData;\n","import { ThunkDispatch } from 'redux-thunk';\n\nimport { setAppStatusAC, SetAppStatusActionType } from './appInitialized';\n\nimport { authAPI, LoginParamsType } from 'api/loginApi';\nimport { RootStoreType } from 'store';\nimport { Nullable } from 'types';\n\nexport type InitialStateDataType = {\n  isAuth: boolean;\n  error?: Nullable<string>;\n};\n\nexport const initialState: InitialStateDataType = {\n  isAuth: false,\n  error: null,\n};\n\nexport const loginReducer = (\n  state: InitialStateDataType = initialState,\n  action: ActionTypesLogin,\n): InitialStateDataType => {\n  switch (action.type) {\n    case 'LOGIN/SET_AUTH_LOGIN_DATA':\n      return {\n        ...state,\n        isAuth: action.isAuth,\n      };\n    case 'LOGIN/SET_ERROR_MESSAGE':\n      return {\n        ...state,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setAuthLoginDataAC = (isAuth: boolean) =>\n  ({ type: 'LOGIN/SET_AUTH_LOGIN_DATA', isAuth } as const);\n\nexport const setErrorMessageAC = (error: Nullable<string>) =>\n  ({ type: 'LOGIN/SET_ERROR_MESSAGE', error } as const);\n\nexport const logInTC =\n  (data: LoginParamsType) =>\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesLogin>) => {\n    dispatch(setAppStatusAC('loading'));\n    authAPI\n      .login(data)\n      .then(() => {\n        dispatch(setAuthLoginDataAC(true));\n        dispatch(setAppStatusAC('succeeded'));\n      })\n      .catch(e => {\n        const error = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n        dispatch(setErrorMessageAC(error));\n        dispatch(setAppStatusAC('failed'));\n      })\n      .finally(() => {\n        dispatch(setAppStatusAC('idle'));\n      });\n  };\n\nexport const logOutTC =\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypesLogin>) => {\n    dispatch(setAppStatusAC('loading'));\n    authAPI.logOut().then(() => {\n      dispatch(setAuthLoginDataAC(false));\n      dispatch(setErrorMessageAC(''));\n      dispatch(setAppStatusAC('idle'));\n    });\n  };\n\n// type;\nexport type setLoginData = ReturnType<typeof setAuthLoginDataAC>;\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessageAC>;\nexport type ActionTypesLogin =\n  | setLoginData\n  | setErrorMessageLogin\n  | SetAppStatusActionType;\n","import { Nullable } from '../../types';\n\nexport type InitialStateDataType = {\n  _id: Nullable<string>;\n  avatar?: Nullable<string>;\n  name: Nullable<string>;\n  email: Nullable<string>;\n  rememberMe: boolean;\n};\n\nconst initialState: InitialStateDataType = {\n  _id: null,\n  avatar: null,\n  name: null,\n  email: null,\n  rememberMe: false,\n};\n\nexport const profileReducer = (\n  state: InitialStateDataType = initialState,\n  action: ActionTypes,\n): InitialStateDataType => {\n  switch (action.type) {\n    case 'SET_USER_DATA':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    // case 'SET_ERROR_MESSAGE':\n    //   return {\n    //     ...state,\n    //     error: action.error,\n    //   };\n    default:\n      return state;\n  }\n};\n\nexport const setUserData = (_id: Nullable<string>, name: Nullable<string>) =>\n  ({\n    type: 'SET_USER_DATA',\n    payload: { _id, name },\n  } as const);\n\nexport const setErrorMessage = (error: Nullable<string>) =>\n  ({ type: 'SET_ERROR_MESSAGE', error } as const);\n\n// export const getAuthLoginData = () => (dispatch: ThunkDispatch<AppStateType, undefined, ActionTypes>) => {\n//   return authAPI.me()\n//     .then(response => {\n//       if (response.data.resultCode === 0) {                     //проверка залогинен пользователь или нет\n//         let {id, login, email} = response.data.data\n//         dispatch(setAuthUserData(id, login, email, true));\n//\n//       }\n//     });\n// }\n\n// export const logIn =\n//   (data: LoginParamsType) =>\n//     (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//       authAPI\n//         .login(data)\n//         .then(response => {\n//           const { email, rememberMe } = response.data;\n//           dispatch(setAuthLoginData(email, rememberMe, true));\n//         })\n//         .catch(e => {\n//           const error = e.response\n//             ? e.response.data.error\n//             : `${e.message}, more details in the console`;\n//           dispatch(setErrorMessage(error));\n//         });\n//     };\n//\n// export const getUserData = () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//   (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//     authAPI.logOut().then(() => {\n//       const { _id, name, verified } = response.data;\n//       dispatch(setUserData(_id, name, verified));\n//     }\n//     });\n// }\n\n// type;\ntype setAuthUserData = ReturnType<typeof setUserData>;\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessage>;\ntype ActionTypes = setAuthUserData | setErrorMessageLogin;\n","import { RootStateType } from '../../types';\n\nexport const getIsDataLoaded = (state: RootStateType): boolean => state.login.isAuth;\nexport const getErrorMessage = (state: RootStateType): any => state.login.error;\n","import { RootStateType } from '../../types';\n\nexport const getIsInitialized = (state: RootStateType): boolean =>\n  state.app.isInitialized;\nexport const getStatus = (state: RootStateType): string => state.app.status;\n","import { memo } from 'react';\n\nimport s from './CustomInputText.module.css';\n\nimport { ReturnComponentType } from 'types';\n\ntype InputProps = {\n  placeholder: string;\n  typeInput: string;\n  className?: string;\n  onChange: () => void;\n  value: string;\n  name?: string;\n  // bind: any;\n};\n\nexport const CustomInput = memo(\n  ({\n    placeholder,\n    typeInput = 'text',\n    className,\n    value,\n    onChange,\n    name,\n  }: InputProps): ReturnComponentType => (\n    <div className={s.inputWrap}>\n      <input\n        type={typeInput}\n        name={name}\n        value={value}\n        onChange={onChange}\n        placeholder={placeholder}\n        className={className ?? s.input}\n        autoComplete=\"off\"\n        spellCheck={false}\n        aria-autocomplete=\"list\"\n      />\n    </div>\n  ),\n);\n// ({\n//   placeholder,\n//   typeInput = 'text',\n//   className,\n//   bind,\n// }: InputProps): ReturnComponentType => (\n//   <input type={typeInput} {...bind} placeholder={placeholder} className={className} />\n// ),\n","export default __webpack_public_path__ + \"static/media/preloader1.9c1d25d2.gif\";","import React from 'react';\n\nimport { ReturnComponentType } from '../../types';\n\nimport style from './Preloader.module.css';\n\nimport preloader1 from 'assets/preloader1.gif';\n\nexport const Preloader = (): ReturnComponentType => (\n  <div>\n    <img className={style.loader} src={preloader1} alt=\"preloader\" />\n  </div>\n);\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Link, Navigate } from 'react-router-dom';\n\nimport { CustomInput } from '../customInput';\nimport { Preloader } from '../preloader';\n\nimport st from './Login.module.css';\n\nimport { PATH } from 'enum';\nimport { useAppSelector, useInput } from 'hooks';\nimport { logInTC } from 'store';\nimport { getErrorMessage, getIsDataLoaded, getStatus } from 'store/selectors';\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types';\n\nexport const Login = (): ReturnComponentType => {\n  const [rememberMe, handleRememberMe] = useState<boolean>(false);\n  const { value: email, handleValue: handleEmail } = useInput('');\n  const { value: password, handleValue: handlePassword } = useInput('');\n  const dispatch = useDispatch();\n  const isDataLoaded = useAppSelector(getIsDataLoaded);\n  const errorMessage = useAppSelector(getErrorMessage);\n  const isLoading = useAppSelector(getStatus);\n  const onChangeCheckBox = (e: ChangeEvent<HTMLInputElement>): void =>\n    handleRememberMe(e.currentTarget.checked);\n\n  const onClickHandlerLogin = (): void => {\n    dispatch(logInTC({ email, password, rememberMe }));\n  };\n  if (isDataLoaded) {\n    return <Navigate to={PATH.PROFILE} />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {isLoading === 'loading' ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <div className={style.contentWrap}>\n            <h2> Login </h2>\n            <CustomInput\n              onChange={handleEmail}\n              value={email}\n              placeholder=\"Email\"\n              typeInput=\"text\"\n              // name=\"user[email]\"\n            />\n            <CustomInput\n              placeholder=\"password\"\n              typeInput=\"password\"\n              value={password}\n              onChange={handlePassword}\n            />\n            {errorMessage ? (\n              <div\n                style={{\n                  color: 'red',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  flexWrap: 'wrap',\n                }}\n              >\n                {' '}\n                {errorMessage}{' '}\n              </div>\n            ) : (\n              ''\n            )}\n            <div className={st.rememberMeInput}>\n              remember me\n              <input type=\"checkbox\" checked={rememberMe} onChange={onChangeCheckBox} />\n            </div>\n            <div>\n              <Link to={PATH.CONFIRM_PASSWORD}> Forgot password </Link>\n            </div>\n            <button onClick={onClickHandlerLogin} className={style.btn}>\n              Sign In\n            </button>\n            <p> Do not have an account? </p>\n            <Link to={PATH.REGISTRATION}> Sign Up </Link>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Navigate, NavLink } from 'react-router-dom';\n\nimport { useAppSelector } from '../../hooks';\nimport { getIsDataLoaded, getStatus } from '../../store/selectors';\nimport { Preloader } from '../preloader';\n\nimport { PATH } from 'enum/pathes';\nimport { logOutTC } from 'store';\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types';\n\nexport const Profile = (): ReturnComponentType => {\n  // const userName = useSelector<RootStoreType, any>(state => state.login.name);\n  const isAuthUser = useAppSelector(getIsDataLoaded);\n  const isLoading = useAppSelector(getStatus);\n  const dispatch = useDispatch();\n  const onClickLogOut = (): void => {\n    dispatch(logOutTC());\n  };\n  if (!isAuthUser) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n  return (\n    <div className={style.mainContainer}>\n      {isLoading === 'loading' ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <h2> Profile </h2>\n          {isAuthUser ? (\n            <div>\n              <button className={style.btn} onClick={onClickLogOut}>\n                Log out\n              </button>\n            </div>\n          ) : (\n            <NavLink to={PATH.LOGIN}>Login</NavLink>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import { AxiosResponse } from 'axios';\n\nimport { Nullable } from '../types';\n\nimport { instance } from './apiConfig';\n\nexport type AddNewPassType = {\n  email: Nullable<string>;\n  from: Nullable<string>;\n  message: Nullable<string>;\n};\n\nexport type SetNewPassType = {\n  password: Nullable<string>;\n  resetPasswordToken: Nullable<string>;\n};\n\nexport type AddNewPassResponseType = {\n  info: Nullable<string>;\n  error: Nullable<string>;\n};\n\nexport const addNewPassAPI = {\n  addNewPass(params: AddNewPassType) {\n    return instance.post<AddNewPassType, AxiosResponse<AddNewPassResponseType>>(\n      'auth/forgot',\n      params,\n    );\n  },\n  setNewPass(params: SetNewPassType) {\n    return instance.post<SetNewPassType, AxiosResponse<AddNewPassResponseType>>(\n      'auth/set-new-password',\n      params,\n    );\n  },\n};\n","export const isEmailValid = (email: string): boolean => {\n  const EMAIL_REGEX =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return EMAIL_REGEX.test(email);\n};\n","export const isPasswordValid = (password: string): boolean => {\n  const PASSWORD_REGEX = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\n  return PASSWORD_REGEX.test(password);\n};\n/* /^\n  (?=.*\\d)          // should contain at least one digit\n  (?=.*[a-z])       // should contain at least one lower case\n  (?=.*[A-Z])       // should contain at least one upper case\n  [a-zA-Z0-9]{8,}   // should contain at least 8 from the mentioned characters\n$/ */\n","import React, { useState } from 'react';\n\nimport { Navigate } from 'react-router-dom';\n\nimport { CustomInput } from '../customInput';\n\nimport st from './Registrations.module.css';\n\nimport { authAPI } from 'api';\nimport { PATH } from 'enum/pathes';\nimport { useInput } from 'hooks';\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types';\nimport { isEmailValid, isPasswordValid } from 'utils';\n\nexport const Registrations = (): ReturnComponentType => {\n  const { value: email, handleValue: handleEmail } = useInput('');\n  const { value: password, handleValue: handlePassword } = useInput('');\n  const { value: confirmPassword, handleValue: handleConfirmPassword } = useInput('');\n  // const { value: isLoadedData, handleValue: handleIsLoadedData } = useInput('');\n\n  // const [email, setEmail] = useState('');\n  // const [password, setPassword] = useState('');\n  // const [confirmPassword, setConfirmPassword] = useState('');\n  const [isLoadedData, setLoadedData] = useState<boolean>(false);\n\n  // const onEmailInputEnter = (e: any): void => {\n  //   setEmail(e.currentTarget.value);\n  // };\n\n  // const onPasswordInputEnter = (e: any): void => {\n  //   setPassword(e.currentTarget.value);\n  // };\n  // const onPasswordAgainInputEnter = (e: any): void => {\n  //   setConfirmPassword(e.currentTarget.value);\n  // };\n\n  const data: any = {\n    email,\n    password,\n  };\n\n  const onSendButtonClick = (): void => {\n    if (password !== confirmPassword) return;\n    if (isPasswordValid(password) && isEmailValid(email)) {\n      authAPI.register(data).then(() => {\n        setLoadedData(true);\n      });\n    }\n  };\n  if (isLoadedData) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n  return (\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <div className={style.contentWrap}>\n          <h2>Registration</h2>\n          <CustomInput\n            placeholder=\"Email\"\n            typeInput=\"email\"\n            // className={style.inputEmail}\n            onChange={handleEmail}\n            value={email}\n            name=\"user[email]\"\n          />\n          <CustomInput\n            placeholder=\"Password\"\n            typeInput=\"password\"\n            // className={style.inputPassword}\n            onChange={handlePassword}\n            value={password}\n            name=\"user[password]\"\n          />\n          <CustomInput\n            placeholder=\"Confirm Password\"\n            typeInput=\"password\"\n            // className={style.inputPassword}\n            onChange={handleConfirmPassword}\n            value={password}\n            name=\"user[password]\"\n          />\n          <p> Have fun! </p>\n          <div className={st.btns}>\n            <button className={style.btn}>Cancel</button>\n            <button className={style.btn} onClick={onSendButtonClick}>\n              Create\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { PATH } from 'enum';\n\nexport const appNavigation: appNavigationType = [\n  { id: 1, title: 'registration', link: PATH.REGISTRATION },\n  { id: 2, title: 'login', link: PATH.LOGIN },\n  { id: 3, title: 'profile', link: PATH.PROFILE },\n  { id: 4, title: 'confirmPassword', link: PATH.CONFIRM_PASSWORD },\n  { id: 5, title: 'popup', link: PATH.POPUP },\n  { id: 6, title: 'createNewPassword', link: PATH.CREATE_NEW_PASSWORD },\n];\n\ntype appNavigationType = { id: number; title: string; link: string }[];\n","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nimport style from './Navigation.module.css';\n\nimport { appNavigation } from 'constants/Navigation';\nimport { ReturnComponentType } from 'types';\n\nexport const Navigation = (): ReturnComponentType => (\n  <div className={style.nav}>\n    <div className={style.wrap}>\n      <div className={style.navList}>\n        {appNavigation.map(({ id, title, link }) => (\n          <NavLink className={style.listItem} to={link} key={id}>\n            <div className={style.navElement}>{title}</div>\n          </NavLink>\n        ))}\n      </div>\n    </div>\n  </div>\n);\n","import React, { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Link, Navigate } from 'react-router-dom';\n\nimport { forgotPassAddEmailTC } from '../../store/middlewares/forgotPassAddEmailTC';\nimport style from '../../style/Common.module.css';\nimport { CustomInput } from '../customInput';\nimport { Preloader } from '../preloader';\n\nimport { AddNewPassType } from 'api';\nimport { PATH } from 'enum/pathes';\nimport { useInput } from 'hooks';\nimport { ReturnComponentType } from 'types';\nimport { isEmailValid } from 'utils';\n\nexport const ConfirmPassword = (): ReturnComponentType => {\n  const [loading, setLoading] = useState(false);\n  const [isShown, setShowMessage] = useState(false);\n\n  const dispatch = useDispatch();\n  const { value: email, handleValue: handleEmail, resetValue: resetEmail } = useInput('');\n\n  const dataPayload: AddNewPassType = {\n    email,\n    from: 'test-front-admin <samutic40@gmail.com>',\n    message: `<div style='background-color: #ffd500; \npadding: 15px; \nborder-color: #ff9900; \nwidth: 250px;\nheight: 30px'> \npassword recovery link: <a href='https://Or1ginald.github.io/gameCards/#/createNewPassword/$token$'> recovery link </a></div>`,\n  };\n\n  const onSendButtonClick = (): void => {\n    if (isEmailValid(email)) {\n      resetEmail();\n      setLoading(true);\n      dispatch(forgotPassAddEmailTC(dataPayload, setLoading, setShowMessage));\n    } else {\n      console.log('ERROR EMAIL');\n    }\n  };\n\n  if (isShown) {\n    return <Navigate to={PATH.POPUP} />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {loading ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <div className={style.contentWrap}>\n            <h2>Forgot your password?</h2>\n            <div className={style.inputCentering}>\n              <CustomInput\n                // bind={bindEmail}\n                onChange={handleEmail}\n                value={email}\n                placeholder=\"Email\"\n                typeInput=\"email\"\n              />\n            </div>\n            <p> Enter your email and we will send you further instructions</p>\n            <div>\n              <button className={style.btn} onClick={onSendButtonClick}>\n                Send instructions\n              </button>\n            </div>\n            <span>Did you remember your password?</span>\n            <Link to={PATH.LOGIN}> Try logging in </Link>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { addNewPassAPI, AddNewPassType } from '../../api/forgotPasswordApi';\n\nexport const forgotPassAddEmailTC =\n  (dataPayload: AddNewPassType, setLoading: any, setShowMessage: any) => () => {\n    addNewPassAPI\n      .addNewPass(dataPayload)\n      .then(() => {\n        setLoading(false);\n        setShowMessage(true);\n      })\n      .catch(e =>\n        e.response ? e.response.data.error : `${e.message}, more details in the console`,\n      );\n  };\n","export default __webpack_public_path__ + \"static/media/error.6b88fd10.png\";","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport errorSign from '../../assets/error.png';\nimport { PATH } from '../../enum/pathes';\nimport style from '../../style/Common.module.css';\nimport { ReturnComponentType } from '../../types';\n\nimport st from './ConfirmPassword.module.css';\n\ntype PopupErrorType = {\n  error: boolean;\n  setError: (error: boolean) => void;\n};\n\nexport const PopupError = ({ error, setError }: PopupErrorType): ReturnComponentType => {\n  const onLinkClick = (): void => setError(!error);\n  return (\n    <div>\n      <div className={style.mainContainer}>\n        <div className={style.content}>\n          <img className={st.errorImg} src={errorSign} alt=\"error\" />\n          <h2>Try again</h2>\n          <span>Something goes wrong</span>\n          <Link to={PATH.CONFIRM_PASSWORD} onClick={onLinkClick}>\n            Create new password again\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Navigate, useLocation } from 'react-router-dom';\n\nimport { forgotPassSetPassTC } from '../../store/middlewares/forgotPassSetPassTC';\nimport style from '../../style/Common.module.css';\nimport { CustomInput } from '../customInput';\n\nimport { PopupError } from './PopupError';\n\nimport { SetNewPassType } from 'api';\nimport { PATH } from 'enum/pathes';\nimport { useInput } from 'hooks';\nimport { ReturnComponentType } from 'types';\nimport { isPasswordValid } from 'utils';\n\nexport const CreateNewPassword = (): ReturnComponentType => {\n  const [isLoadedData, setLoadedData] = useState(false);\n  const [isError, setError] = useState(false);\n\n  const dispatch = useDispatch();\n  const {\n    value: newPassword,\n    handleValue: handleNewPassword,\n    resetValue: resetNewPassword,\n  } = useInput('');\n\n  const location = useLocation();\n  const lastElement = 1;\n  const token =\n    location.pathname.split('/')[location.pathname.split('/').length - lastElement];\n\n  const data: SetNewPassType = {\n    password: newPassword,\n    resetPasswordToken: token,\n  };\n\n  const onCreateButtonClick = (): void => {\n    if (isPasswordValid(newPassword)) {\n      resetNewPassword(); // reset pass\n      dispatch(forgotPassSetPassTC(data, setLoadedData, setError));\n    } else {\n      console.log('error password');\n    }\n  };\n\n  if (isLoadedData) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {isError ? (\n        <PopupError error={isError} setError={setError} />\n      ) : (\n        <div className={style.content}>\n          <div className={style.contentWrap}>\n            {' '}\n            <h2>Create new password</h2>\n            <div className={style.inputCentering}>\n              <CustomInput\n                placeholder=\"Password\"\n                typeInput=\"password\"\n                value={newPassword}\n                onChange={handleNewPassword}\n                // bind={bindPassword}\n              />\n            </div>\n            <p> Create new password and we will send you further instructions to email</p>\n            <div>\n              <button className={style.btn} onClick={onCreateButtonClick}>\n                Create new password\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { addNewPassAPI, SetNewPassType } from '../../api/forgotPasswordApi';\n\nexport const forgotPassSetPassTC =\n  (data: SetNewPassType, setLoadedData: any, setError: any) => () => {\n    addNewPassAPI\n      .setNewPass(data)\n      .then(() => {\n        setLoadedData(true);\n      })\n      .catch(() => {\n        setError(true);\n        /*  e.response ? e.response.data.error : `${e.message}, more details in the console`; */\n      });\n  };\n","export default __webpack_public_path__ + \"static/media/letter.3761fe05.png\";","import React from 'react';\n\nimport letter from '../../assets/letter.png';\nimport style from '../../style/Common.module.css';\nimport { ReturnComponentType } from '../../types';\n\nimport st from './ConfirmPassword.module.css';\n\nexport const Popup = (): ReturnComponentType => (\n  <div>\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <img className={st.letterImg} src={letter} alt=\"letter\" />\n        <h2>Check Email</h2>\n        <p>We have sent the Email with instructions to your email </p>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport style from '../style/Common.module.css';\n\nimport { ReturnComponentType } from 'types';\n\nexport const Test = (): ReturnComponentType => (\n  <div className={style.mainContainer}>\n    <div className={style.container}>\n      <p style={{ color: 'white' }}> Test page </p>\n    </div>\n  </div>\n);\n","import React, { useEffect } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Route, Routes } from 'react-router-dom';\n\nimport s from './App.module.css';\nimport { useAppSelector } from './hooks';\nimport { initializeAppTC } from './store';\nimport { getIsInitialized } from './store/selectors';\nimport { ReturnComponentType } from './types';\n\nimport {\n  ConfirmPassword,\n  CreateNewPassword,\n  Login,\n  Navigation,\n  Popup,\n  Preloader,\n  Profile,\n  Registrations,\n} from 'components';\nimport { Test } from 'components/Test';\nimport { PATH } from 'enum';\n\nexport const App = (): ReturnComponentType => {\n  const isInitialized = useAppSelector(getIsInitialized);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(initializeAppTC());\n  }, []);\n  if (!isInitialized) {\n    return (\n      <div style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\n        <Preloader />\n      </div>\n    );\n  }\n  return (\n    <div className={s.app}>\n      <div className={s.layout}>\n        <Navigation />\n        {/*  <div className={s.wrap}> */}\n        <div className={s.main}>\n          <Routes>\n            <Route path={PATH.LOGIN} element={<Login />} />\n            <Route path={PATH.REGISTRATION} element={<Registrations />} />\n            <Route path={PATH.PROFILE} element={<Profile />} />\n            <Route path=\"/*\" element={<h1>404:page NOT found</h1>} />\n            <Route path={PATH.CONFIRM_PASSWORD} element={<ConfirmPassword />} />\n            <Route path={PATH.POPUP} element={<Popup />} />\n            <Route path={PATH.CREATE_NEW_PASSWORD} element={<CreateNewPassword />} />\n            <Route path=\"/\" element={<Test />} />\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { cardReducer, loginReducer, profileReducer, appReducer } from 'store';\n\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  cards: cardReducer,\n  login: loginReducer,\n  profilePage: profileReducer,\n});\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStoreType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\n\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
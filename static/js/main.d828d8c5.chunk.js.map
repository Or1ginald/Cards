{"version":3,"sources":["components/navigation/Navigation.module.css","components/confirmPassword/ConfirmPassword.module.css","style/Common.module.css","App.module.css","components/loginPage/Login.module.css","components/preloader/Preloader.module.css","components/registrations/Registrations.module.css","components/customInput/CustomInput.tsx","store/reducers/cards.ts","api/apiConfig/index.ts","api/loginApi.ts","store/reducers/login.ts","store/reducers/profile.ts","components/loginPage/Login.tsx","hooks/useInput/useInput.ts","api/forgotPasswordApi.ts","assets/loader.gif","components/preloader/Preloader.tsx","components/confirmPassword/ConfirmPassword.tsx","utils/emailValidation.ts","store/middlewares/forgotPassAddEmailTC.ts","assets/error.png","components/confirmPassword/PopupError.tsx","components/confirmPassword/CreateNewPassword.tsx","utils/passwordValidation.ts","store/middlewares/forgotPassSetPassTC.ts","assets/letter.png","components/confirmPassword/Popup.tsx","components/navigation/Navigation.tsx","components/profile/Profile.tsx","components/registrations/Registrations.tsx","components/Test.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","CustomInput","memo","placeholder","typeInput","className","bind","type","initState","instance","axios","create","baseURL","process","withCredentials","authAPI","params","post","delete","initialState","isAuth","error","setAuthLoginDataAC","setErrorMessageAC","_id","avatar","name","email","rememberMe","Login","useState","setEmail","password","setPassword","setRememberMe","dispatch","useDispatch","isDataLoaded","useSelector","state","login","errorMessage","to","style","mainContainer","content","contentWrap","color","onChange","e","currentTarget","value","inputEmail","st","rememberMeInput","checked","onClick","data","then","catch","response","message","btn","useInput","initialValue","setValue","reset","event","target","addNewPassAPI","Preloader","loader","src","alt","ConfirmPassword","loading","setLoading","isShown","setShowMessage","bindEmail","resetEmail","dataPayload","from","inputCentering","test","isEmailValid","console","log","forgotPassAddEmailTC","PopupError","setError","errorImg","errorSign","CreateNewPassword","isLoadedData","setLoadedData","isError","newPassword","bindPassword","resetPassword","location","useLocation","token","pathname","split","length","resetPasswordToken","inputPassword","forgotPassSetPassTC","Popup","letterImg","letter","Navigation","nav","menu","navElement","Profile","isAuthUser","Registrations","confirmPassword","setConfirmPassword","required","btns","Test","container","App","s","app","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","cards","action","profilePage","payload","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d828d8c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__241z0\",\"navElement\":\"Navigation_navElement__29Vwh\",\"menu\":\"Navigation_menu__3Tenb\",\"p\":\"Navigation_p__9Q_7E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"letterImg\":\"ConfirmPassword_letterImg__2N3rI\",\"errorImg\":\"ConfirmPassword_errorImg__3qq5C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Common_mainContainer__1t-zw\",\"contentWrap\":\"Common_contentWrap__1Axzh\",\"content\":\"Common_content__UidQH\",\"btn\":\"Common_btn__1nWkw\",\"inputEmail\":\"Common_inputEmail__2Um59\",\"inputPassword\":\"Common_inputPassword__3GoZh\",\"inputCentering\":\"Common_inputCentering__-eDhT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2aOdL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rememberMeInput\":\"Login_rememberMeInput__1zYYI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__2syPF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Registrations_btns__HPNCD\"};","import { memo } from 'react';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\ntype InputProps = {\r\n  placeholder: string;\r\n  typeInput: string;\r\n  className: string;\r\n  bind: any;\r\n};\r\n\r\nexport const CustomInput = memo(\r\n  ({\r\n    placeholder,\r\n    typeInput = 'text',\r\n    className,\r\n    bind,\r\n  }: InputProps): ReturnComponentType => (\r\n    <input type={typeInput} {...bind} placeholder={placeholder} className={className} />\r\n  ),\r\n);\r\n","const initState = {};\r\n\r\ntype initStateType = {};\r\n\r\nexport const cardReducer = (\r\n  state: initStateType = initState,\r\n  action: any,\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case '': {\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = process.env.REACT_APP_BASE_URL; // Достаем базовый юрл из .env(ссылка на хироку)\r\n\r\nexport const instance = axios.create({\r\n  baseURL: baseUrl,\r\n  withCredentials: true,\r\n});\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { instance } from './apiConfig';\r\n\r\nexport const authAPI = {\r\n  login(params: LoginParamsType) {\r\n    return instance.post<\r\n      LoginParamsType,\r\n      /* 'сам объект сервера который отправляет игнат' */\r\n      /* AxiosResponse нужен только у методов put и post */\r\n      AxiosResponse<ResponseType>\r\n    >('auth/login', params);\r\n  },\r\n  logOut() {\r\n    return instance.delete<ResponseType>('auth/me', {});\r\n  },\r\n  me() {\r\n    return instance.post<any>('auth/me');\r\n  },\r\n  register(params: RegisterParamsType) {\r\n    return instance.post<RegisterParamsType, any>('auth/register', params);\r\n  },\r\n};\r\n\r\n// types\r\n\r\nexport type LoginParamsType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n};\r\nexport type RegisterParamsType = {\r\n  email: string;\r\n  password: string;\r\n};\r\n\r\nexport type ResponseType = {\r\n  _id: string;\r\n  email: string;\r\n  name: string;\r\n  avatar?: string;\r\n  token: string;\r\n  publicCardPacksCount: number;\r\n  created: Date;\r\n  updated: Date;\r\n  verified: boolean;\r\n  rememberMe: boolean;\r\n};\r\n","import { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport { authAPI, LoginParamsType } from '../../api/loginApi';\r\nimport { Nullable } from '../../types';\r\nimport { RootStoreType } from '../store';\r\n\r\nexport type InitialStateDataType = {\r\n  isAuth: boolean;\r\n  error?: Nullable<string>;\r\n};\r\n\r\nconst initialState: InitialStateDataType = {\r\n  isAuth: false,\r\n  error: null,\r\n};\r\n\r\nexport const loginReducer = (\r\n  state: InitialStateDataType = initialState,\r\n  action: ActionTypes,\r\n): InitialStateDataType => {\r\n  switch (action.type) {\r\n    case 'LOGIN/SET_AUTH_LOGIN_DATA':\r\n      return {\r\n        ...state,\r\n        isAuth: action.isAuth,\r\n      };\r\n    case 'LOGIN/SET_ERROR_MESSAGE':\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setAuthLoginDataAC = (isAuth: boolean) =>\r\n  ({ type: 'LOGIN/SET_AUTH_LOGIN_DATA', isAuth } as const);\r\n\r\nexport const setErrorMessageAC = (error: Nullable<string>) =>\r\n  ({ type: 'LOGIN/SET_ERROR_MESSAGE', error } as const);\r\n\r\nexport const logInTC =\r\n  (data: LoginParamsType) =>\r\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n    authAPI\r\n      .login(data)\r\n      .then(() => {\r\n        dispatch(setAuthLoginDataAC(true));\r\n      })\r\n      .catch(e => {\r\n        const error = e.response\r\n          ? e.response.data.error\r\n          : `${e.message}, more details in the console`;\r\n        dispatch(setErrorMessageAC(error));\r\n      });\r\n  };\r\n\r\nexport const logOutTC =\r\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n    authAPI.logOut().then(() => {\r\n      dispatch(setAuthLoginDataAC(false));\r\n      dispatch(setErrorMessageAC(''));\r\n    });\r\n  };\r\n\r\n// type;\r\ntype setLoginData = ReturnType<typeof setAuthLoginDataAC>;\r\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessageAC>;\r\ntype ActionTypes = setLoginData | setErrorMessageLogin;\r\n","import { Nullable } from '../../types';\r\n\r\nexport type InitialStateDataType = {\r\n  _id: Nullable<string>;\r\n  avatar?: Nullable<string>;\r\n  name: Nullable<string>;\r\n  email: Nullable<string>;\r\n  rememberMe: boolean;\r\n};\r\n\r\nconst initialState: InitialStateDataType = {\r\n  _id: null,\r\n  avatar: null,\r\n  name: null,\r\n  email: null,\r\n  rememberMe: false,\r\n};\r\n\r\nexport const profileReducer = (\r\n  state: InitialStateDataType = initialState,\r\n  action: ActionTypes,\r\n): InitialStateDataType => {\r\n  switch (action.type) {\r\n    case 'SET_USER_DATA':\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    // case 'SET_ERROR_MESSAGE':\r\n    //   return {\r\n    //     ...state,\r\n    //     error: action.error,\r\n    //   };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setUserData = (_id: Nullable<string>, name: Nullable<string>) =>\r\n  ({\r\n    type: 'SET_USER_DATA',\r\n    payload: { _id, name },\r\n  } as const);\r\n\r\nexport const setErrorMessage = (error: Nullable<string>) =>\r\n  ({ type: 'SET_ERROR_MESSAGE', error } as const);\r\n\r\n// export const getAuthLoginData = () => (dispatch: ThunkDispatch<AppStateType, undefined, ActionTypes>) => {\r\n//   return authAPI.me()\r\n//     .then(response => {\r\n//       if (response.data.resultCode === 0) {                     //проверка залогинен пользователь или нет\r\n//         let {id, login, email} = response.data.data\r\n//         dispatch(setAuthUserData(id, login, email, true));\r\n//\r\n//       }\r\n//     });\r\n// }\r\n\r\n// export const logIn =\r\n//   (data: LoginParamsType) =>\r\n//     (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n//       authAPI\r\n//         .login(data)\r\n//         .then(response => {\r\n//           const { email, rememberMe } = response.data;\r\n//           dispatch(setAuthLoginData(email, rememberMe, true));\r\n//         })\r\n//         .catch(e => {\r\n//           const error = e.response\r\n//             ? e.response.data.error\r\n//             : `${e.message}, more details in the console`;\r\n//           dispatch(setErrorMessage(error));\r\n//         });\r\n//     };\r\n//\r\n// export const getUserData = () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n//   (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\r\n//     authAPI.logOut().then(() => {\r\n//       const { _id, name, verified } = response.data;\r\n//       dispatch(setUserData(_id, name, verified));\r\n//     }\r\n//     });\r\n// }\r\n\r\n// type;\r\ntype setAuthUserData = ReturnType<typeof setUserData>;\r\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessage>;\r\ntype ActionTypes = setAuthUserData | setErrorMessageLogin;\r\n","import React, { ChangeEvent, useState } from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\nimport { RootStoreType, logInTC } from '../../store';\r\nimport style from '../../style/Common.module.css';\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport st from './Login.module.css';\r\n\r\nexport const Login = (): ReturnComponentType => {\r\n  const [email, setEmail] = useState<string>('');\r\n  const [password, setPassword] = useState<string>('');\r\n  const [rememberMe, setRememberMe] = useState<boolean>(false);\r\n  const dispatch = useDispatch();\r\n  const isDataLoaded = useSelector<RootStoreType, boolean>(state => state.login.isAuth);\r\n  const errorMessage = useSelector<RootStoreType>(state => state.login.error);\r\n\r\n  const onChangeEmail = (e: ChangeEvent<HTMLInputElement>): void =>\r\n    setEmail(e.currentTarget.value);\r\n  const onChangePassword = (e: ChangeEvent<HTMLInputElement>): void =>\r\n    setPassword(e.currentTarget.value);\r\n  const onChangeCheckBox = (e: ChangeEvent<HTMLInputElement>): void =>\r\n    setRememberMe(e.currentTarget.checked);\r\n\r\n  const onClickHandlerLogin = (): void => {\r\n    dispatch(logInTC({ email, password, rememberMe }));\r\n  };\r\n\r\n  if (isDataLoaded) {\r\n    return <Navigate to=\"/profile\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      <div className={style.content}>\r\n        <div className={style.contentWrap}>\r\n          <h2> Login </h2>\r\n          {errorMessage ? <span style={{ color: 'red' }}> {errorMessage} </span> : ''}\r\n          <input\r\n            type=\"text\"\r\n            onChange={onChangeEmail}\r\n            value={email}\r\n            placeholder=\"Email\"\r\n            className={style.inputEmail}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            onChange={onChangePassword}\r\n            value={password}\r\n            placeholder=\"Password\"\r\n            className={style.inputEmail}\r\n          />\r\n          <div className={st.rememberMeInput}>\r\n            remember me\r\n            <input type=\"checkbox\" checked={rememberMe} onChange={onChangeCheckBox} />\r\n          </div>\r\n          <div>\r\n            <Link to=\"/confirmPassword\"> Forgot password </Link>\r\n          </div>\r\n          <button onClick={onClickHandlerLogin} className={style.btn}>\r\n            Sign In\r\n          </button>\r\n          <p> Do not have an account? </p>\r\n          <Link to=\"/registration\"> Sign Up </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { useState } from 'react';\r\n\r\ntype useInputPropsType = {\r\n  value: string;\r\n  setValue: any;\r\n  reset: any;\r\n  bind: {\r\n    value: string;\r\n    onChange: (event: any) => void;\r\n  };\r\n};\r\n\r\nexport const useInput = (initialValue: string): useInputPropsType => {\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  return {\r\n    value,\r\n    setValue,\r\n    reset: () => setValue(''),\r\n    bind: {\r\n      value,\r\n      onChange: (event: any) => {\r\n        setValue(event.target.value);\r\n      },\r\n    },\r\n  };\r\n};\r\n","import { AxiosResponse } from 'axios';\r\n\r\nimport { Nullable } from '../types';\r\n\r\nimport { instance } from './apiConfig';\r\n\r\nexport type AddNewPassType = {\r\n  email: Nullable<string>;\r\n  from: Nullable<string>;\r\n  message: Nullable<string>;\r\n};\r\n\r\nexport type SetNewPassType = {\r\n  password: Nullable<string>;\r\n  resetPasswordToken: Nullable<string>;\r\n};\r\n\r\nexport type AddNewPassResponseType = {\r\n  info: Nullable<string>;\r\n  error: Nullable<string>;\r\n};\r\n\r\nexport const addNewPassAPI = {\r\n  addNewPass(params: AddNewPassType) {\r\n    return instance.post<AddNewPassType, AxiosResponse<AddNewPassResponseType>>(\r\n      'auth/forgot',\r\n      params,\r\n    );\r\n  },\r\n  setNewPass(params: SetNewPassType) {\r\n    return instance.post<SetNewPassType, AxiosResponse<AddNewPassResponseType>>(\r\n      'auth/set-new-password',\r\n      params,\r\n    );\r\n  },\r\n};\r\n","export default __webpack_public_path__ + \"static/media/loader.a6760d82.gif\";","import React from 'react';\r\n\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport style from './Preloader.module.css';\r\n\r\nimport loader from 'assets/loader.gif';\r\n\r\nexport const Preloader = (): ReturnComponentType => (\r\n  <div>\r\n    <img className={style.loader} src={loader} alt=\"preloader\" />\r\n  </div>\r\n);\r\n","import React, { useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link, Navigate } from 'react-router-dom';\r\n\r\nimport { AddNewPassType } from '../../api/forgotPasswordApi';\r\nimport { useInput } from '../../hooks/useInput/useInput';\r\nimport { forgotPassAddEmailTC } from '../../store/middlewares/forgotPassAddEmailTC';\r\nimport style from '../../style/Common.module.css';\r\nimport { isEmailValid } from '../../utils/emailValidation';\r\nimport { CustomInput } from '../customInput';\r\nimport { Preloader } from '../preloader/Preloader';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const ConfirmPassword = (): ReturnComponentType => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [isShown, setShowMessage] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const { value: email, bind: bindEmail, reset: resetEmail } = useInput('');\r\n\r\n  const dataPayload: AddNewPassType = {\r\n    email,\r\n    from: 'test-front-admin <samutic40@gmail.com>',\r\n    message: `<div style='background-color: #ffd500; \r\npadding: 15px; \r\nborder-color: #ff9900; \r\nwidth: 250px;\r\nheight: 30px'> \r\npassword recovery link: <a href='https://Or1ginald.github.io/gameCards/#/createNewPassword/$token$'> recovery link </a></div>`,\r\n  };\r\n\r\n  const onSendButtonClick = (): void => {\r\n    if (isEmailValid(email)) {\r\n      resetEmail('');\r\n      setLoading(true);\r\n      dispatch(forgotPassAddEmailTC(dataPayload, setLoading, setShowMessage));\r\n    } else {\r\n      console.log('ERROR EMAIL');\r\n    }\r\n  };\r\n\r\n  if (isShown) {\r\n    return <Navigate to=\"/popup\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {loading ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <div className={style.contentWrap}>\r\n            <h2>Forgot your password?</h2>\r\n            <div className={style.inputCentering}>\r\n              <CustomInput\r\n                bind={bindEmail}\r\n                placeholder=\"Email\"\r\n                typeInput=\"email\"\r\n                className={style.inputEmail}\r\n              />\r\n            </div>\r\n            <p> Enter your email and we will send you further instructions</p>\r\n            <div>\r\n              <button className={style.btn} onClick={onSendButtonClick}>\r\n                send instructions\r\n              </button>\r\n            </div>\r\n            <span>Did you remember your password?</span>\r\n            <Link to=\"/login\"> Try logging in </Link>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export const isEmailValid = (email: string): boolean => {\r\n  const EMAIL_REGEX =\r\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return EMAIL_REGEX.test(email);\r\n};\r\n","import { addNewPassAPI, AddNewPassType } from '../../api/forgotPasswordApi';\r\n\r\nexport const forgotPassAddEmailTC =\r\n  (dataPayload: AddNewPassType, setLoading: any, setShowMessage: any) => () => {\r\n    addNewPassAPI\r\n      .addNewPass(dataPayload)\r\n      .then(() => {\r\n        setLoading(false);\r\n        setShowMessage(true);\r\n      })\r\n      .catch(e =>\r\n        e.response ? e.response.data.error : `${e.message}, more details in the console`,\r\n      );\r\n  };\r\n","export default __webpack_public_path__ + \"static/media/error.6b88fd10.png\";","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport errorSign from '../../assets/error.png';\r\nimport style from '../../style/Common.module.css';\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport st from './ConfirmPassword.module.css';\r\n\r\ntype PopupErrorType = {\r\n  error: boolean;\r\n  setError: (error: boolean) => void;\r\n};\r\n\r\nexport const PopupError = ({ error, setError }: PopupErrorType): ReturnComponentType => {\r\n  const onLinkClick = (): void => setError(!error);\r\n  return (\r\n    <div>\r\n      <div className={style.mainContainer}>\r\n        <div className={style.content}>\r\n          <img className={st.errorImg} src={errorSign} alt=\"error\" />\r\n          <h2>Try again</h2>\r\n          <span>Something goes wrong</span>\r\n          <Link to=\"/confirmPassword\" onClick={onLinkClick}>\r\n            Create new password again\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n\r\nimport { SetNewPassType } from '../../api/forgotPasswordApi';\r\nimport { useInput } from '../../hooks/useInput/useInput';\r\nimport { forgotPassSetPassTC } from '../../store/middlewares/forgotPassSetPassTC';\r\nimport style from '../../style/Common.module.css';\r\nimport { isPasswordValid } from '../../utils';\r\nimport { CustomInput } from '../customInput';\r\n\r\nimport { PopupError } from './PopupError';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const CreateNewPassword = (): ReturnComponentType => {\r\n  const [isLoadedData, setLoadedData] = useState(false);\r\n  const [isError, setError] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const { value: newPassword, bind: bindPassword, reset: resetPassword } = useInput('');\r\n\r\n  const location = useLocation();\r\n  const lastElement = 1;\r\n  const token =\r\n    location.pathname.split('/')[location.pathname.split('/').length - lastElement];\r\n\r\n  const data: SetNewPassType = {\r\n    password: newPassword,\r\n    resetPasswordToken: token,\r\n  };\r\n\r\n  const onCreateButtonClick = (): void => {\r\n    if (isPasswordValid(newPassword)) {\r\n      resetPassword('');\r\n      dispatch(forgotPassSetPassTC(data, setLoadedData, setError));\r\n    } else {\r\n      console.log('error password');\r\n    }\r\n  };\r\n\r\n  if (isLoadedData) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      {isError ? (\r\n        <PopupError error={isError} setError={setError} />\r\n      ) : (\r\n        <div className={style.content}>\r\n          <div className={style.contentWrap}>\r\n            {' '}\r\n            <h2>Create new password</h2>\r\n            <div className={style.inputCentering}>\r\n              <CustomInput\r\n                placeholder=\"Password\"\r\n                typeInput=\"password\"\r\n                className={style.inputPassword}\r\n                bind={bindPassword}\r\n              />\r\n            </div>\r\n            <p> Create new password and we will send you further instructions to email</p>\r\n            <div>\r\n              <button className={style.btn} onClick={onCreateButtonClick}>\r\n                Create new password\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export const isPasswordValid = (password: string): boolean => {\r\n  const PASSWORD_REGEX = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\r\n  return PASSWORD_REGEX.test(password);\r\n};\r\n/* /^\r\n  (?=.*\\d)          // should contain at least one digit\r\n  (?=.*[a-z])       // should contain at least one lower case\r\n  (?=.*[A-Z])       // should contain at least one upper case\r\n  [a-zA-Z0-9]{8,}   // should contain at least 8 from the mentioned characters\r\n$/ */\r\n","import { addNewPassAPI, SetNewPassType } from '../../api/forgotPasswordApi';\r\n\r\nexport const forgotPassSetPassTC =\r\n  (data: SetNewPassType, setLoadedData: any, setError: any) => () => {\r\n    addNewPassAPI\r\n      .setNewPass(data)\r\n      .then(() => {\r\n        setLoadedData(true);\r\n      })\r\n      .catch(() => {\r\n        setError(true);\r\n        /*  e.response ? e.response.data.error : `${e.message}, more details in the console`; */\r\n      });\r\n  };\r\n","export default __webpack_public_path__ + \"static/media/letter.3761fe05.png\";","import React from 'react';\r\n\r\nimport letter from '../../assets/letter.png';\r\nimport style from '../../style/Common.module.css';\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport st from './ConfirmPassword.module.css';\r\n\r\nexport const Popup = (): ReturnComponentType => (\r\n  <div>\r\n    <div className={style.mainContainer}>\r\n      <div className={style.content}>\r\n        <img className={st.letterImg} src={letter} alt=\"letter\" />\r\n        <h2>Check Email</h2>\r\n        <p>We have sent the Email with instructions to your email </p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport style from './Navigation.module.css';\r\n\r\nexport const Navigation = (): ReturnComponentType => (\r\n  <div className={style.nav}>\r\n    <h3 className={style.menu}>Menu</h3>\r\n    <ul>\r\n      <li>\r\n        <NavLink className={style.navElement} to=\"/login\">\r\n          login\r\n        </NavLink>\r\n      </li>\r\n\r\n      <li>\r\n        <NavLink className={style.navElement} to=\"/registration\">\r\n          registration\r\n        </NavLink>\r\n      </li>\r\n\r\n      <li>\r\n        <NavLink className={style.navElement} to=\"/profile\">\r\n          profile\r\n        </NavLink>\r\n      </li>\r\n\r\n      <li>\r\n        <NavLink className={style.navElement} to=\"/createNewPassword/*\">\r\n          create new password\r\n        </NavLink>\r\n      </li>\r\n\r\n      <li>\r\n        <NavLink className={style.navElement} to=\"/confirmPassword\">\r\n          confirm password\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate, NavLink } from 'react-router-dom';\r\n\r\nimport style from '../../style/Common.module.css';\r\nimport { ReturnComponentType } from '../../types';\r\n\r\nimport { logOutTC, RootStoreType } from 'store';\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = (): ReturnComponentType => {\r\n  // const userName = useSelector<RootStoreType, any>(state => state.login.name);\r\n  const isAuthUser = useSelector<RootStoreType, boolean>(state => state.login.isAuth);\r\n  const dispatch = useDispatch();\r\n  const onClickLogOut = (): void => {\r\n    dispatch(logOutTC());\r\n  };\r\n  if (!isAuthUser) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      <div className={style.content}>\r\n        <h2> Profile </h2>\r\n        {isAuthUser ? (\r\n          <div>\r\n            <button className={style.btn} onClick={onClickLogOut}>\r\n              Log out\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <NavLink to=\"/login\">Login</NavLink>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type ProfilePropsType = {};\r\n","import React, { useState } from 'react';\r\n\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport { authAPI } from '../../api/loginApi';\r\nimport style from '../../style/Common.module.css';\r\n\r\nimport st from './Registrations.module.css';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Registrations = (): ReturnComponentType => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [isLoadedData, setLoadedData] = useState<boolean>(false);\r\n\r\n  const onEmailInputEnter = (e: any): void => {\r\n    setEmail(e.currentTarget.value);\r\n  };\r\n\r\n  const onPasswordInputEnter = (e: any): void => {\r\n    setPassword(e.currentTarget.value);\r\n  };\r\n  const onPasswordAgainInputEnter = (e: any): void => {\r\n    setConfirmPassword(e.currentTarget.value);\r\n  };\r\n\r\n  const data: any = {\r\n    email,\r\n    password,\r\n  };\r\n\r\n  const onSendButtonCLick = (): void => {\r\n    if (password === confirmPassword) {\r\n      authAPI.register(data).then(() => {\r\n        setLoadedData(true);\r\n      });\r\n    }\r\n  };\r\n  if (isLoadedData) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n  return (\r\n    <div className={style.mainContainer}>\r\n      <div className={style.content}>\r\n        <div className={style.contentWrap}>\r\n          <h2>Registration</h2>\r\n          <input\r\n            className={style.inputPassword}\r\n            type=\"Email\"\r\n            placeholder=\"Email\"\r\n            value={email}\r\n            onChange={onEmailInputEnter}\r\n            required\r\n          />\r\n          <input\r\n            className={style.inputPassword}\r\n            type=\"Password\"\r\n            placeholder=\"Password\"\r\n            value={password}\r\n            onChange={onPasswordInputEnter}\r\n            required\r\n          />\r\n          <input\r\n            className={style.inputPassword}\r\n            type=\"Password\"\r\n            placeholder=\"Confirm Password\"\r\n            value={confirmPassword}\r\n            onChange={onPasswordAgainInputEnter}\r\n            required\r\n          />\r\n          <p> Have fun! </p>\r\n          <div className={st.btns}>\r\n            <button className={style.btn}>cancel</button>\r\n            <button className={style.btn} onClick={onSendButtonCLick}>\r\n              send\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport style from '../style/Common.module.css';\r\n\r\nimport { ReturnComponentType } from 'types';\r\n\r\nexport const Test = (): ReturnComponentType => (\r\n  <div className={style.mainContainer}>\r\n    <div className={style.container}>\r\n      <p style={{ color: 'white' }}> Test page </p>\r\n    </div>\r\n  </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport { Route, Routes } from 'react-router-dom';\r\n\r\nimport s from './App.module.css';\r\nimport { ConfirmPassword, Login } from './components';\r\nimport { Navigation } from './components/navigation/Navigation';\r\nimport { Profile } from './components/profile/Profile';\r\nimport { Registrations } from './components/registrations/Registrations';\r\nimport { ReturnComponentType } from './types';\r\n\r\nimport { CreateNewPassword, Popup } from 'components';\r\nimport { Test } from 'components/Test';\r\n\r\nexport const App = (): ReturnComponentType => (\r\n  <div className={s.app}>\r\n    <Navigation />\r\n    {/*  <div className={s.wrap}> */}\r\n    <Routes>\r\n      <Route path=\"/login\" element={<Login />} />\r\n      <Route path=\"/registration\" element={<Registrations />} />\r\n      <Route path=\"/profile\" element={<Profile />} />\r\n      <Route path=\"/*\" element={<h1>404:page NOT found</h1>} />\r\n      <Route path=\"/confirmPassword\" element={<ConfirmPassword />} />\r\n      <Route path=\"/popup\" element={<Popup />} />\r\n      <Route path=\"/createNewPassword/*\" element={<CreateNewPassword />} />\r\n      <Route path=\"/\" element={<Test />} />\r\n    </Routes>\r\n  </div>\r\n  /*  </div> */\r\n);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport { cardReducer, loginReducer, profileReducer } from 'store';\r\n\r\nexport const rootReducer = combineReducers({\r\n  cards: cardReducer,\r\n  login: loginReducer,\r\n  profilePage: profileReducer,\r\n});\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type RootStoreType = ReturnType<typeof rootReducer>;\r\n\r\n// @ts-ignore\r\n\r\nwindow.store = store;\r\n","import React from 'react';\r\n\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store } from './store/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
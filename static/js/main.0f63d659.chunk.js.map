{"version":3,"sources":["components/navigation/Navigation.module.css","components/confirmPassword/ConfirmPassword.module.css","style/Common.module.css","App.module.css","components/loginPage/Login.module.css","components/preloader/Preloader.module.css","components/registrations/Registrations.module.css","enum/pathes.ts","components/customInput/CustomInput.tsx","hooks/useAppDispatch.ts","hooks/useAppSelector.ts","hooks/useInput/useInput.ts","store/reducers/cards.ts","api/apiConfig/index.ts","api/loginApi.ts","store/reducers/login.ts","store/reducers/profile.ts","store/selectors/login/loginSelectors.ts","utils/emailValidation.ts","utils/passwordValidation.ts","components/loginPage/Login.tsx","api/forgotPasswordApi.ts","assets/loader.gif","components/preloader/Preloader.tsx","components/confirmPassword/ConfirmPassword.tsx","store/middlewares/forgotPassAddEmailTC.ts","assets/error.png","components/confirmPassword/PopupError.tsx","components/confirmPassword/CreateNewPassword.tsx","store/middlewares/forgotPassSetPassTC.ts","assets/letter.png","components/confirmPassword/Popup.tsx","components/navigation/Navigation.tsx","components/profile/Profile.tsx","components/registrations/Registrations.tsx","components/Test.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","PATH","CustomInput","memo","placeholder","typeInput","className","bind","type","useAppSelector","useSelector","useInput","initialValue","useState","value","setValue","reset","onChange","event","target","initState","instance","axios","create","baseURL","process","withCredentials","authAPI","params","post","delete","initialState","isAuth","error","setAuthLoginDataAC","setErrorMessageAC","_id","avatar","name","email","rememberMe","getIsDataLoaded","state","login","getErrorMessage","isEmailValid","test","isPasswordValid","password","Login","setRememberMe","bindEmail","bindPassword","dispatch","useDispatch","isDataLoaded","errorMessage","to","PROFILE","style","mainContainer","content","contentWrap","color","inputEmail","inputPassword","st","rememberMeInput","checked","e","currentTarget","CONFIRM_PASSWORD","onClick","data","then","catch","response","message","console","log","btn","REGISTRATION","addNewPassAPI","Preloader","loader","src","alt","ConfirmPassword","loading","setLoading","isShown","setShowMessage","resetEmail","dataPayload","from","POPUP","inputCentering","forgotPassAddEmailTC","LOGIN","PopupError","setError","errorImg","errorSign","CreateNewPassword","isLoadedData","setLoadedData","isError","newPassword","resetPassword","location","useLocation","token","pathname","split","length","resetPasswordToken","forgotPassSetPassTC","Popup","letterImg","letter","Navigation","nav","menu","navElement","CREATE_NEW_PASSWORD","Profile","isAuthUser","Registrations","setEmail","setPassword","confirmPassword","setConfirmPassword","required","btns","Test","container","App","s","app","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","cards","action","profilePage","payload","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,IAAM,wBAAwB,WAAa,+BAA+B,KAAO,yBAAyB,EAAI,wB,mBCAhID,EAAOC,QAAU,CAAC,UAAY,mCAAmC,SAAW,oC,kBCA5ED,EAAOC,QAAU,CAAC,cAAgB,8BAA8B,YAAc,4BAA4B,QAAU,wBAAwB,IAAM,oBAAoB,WAAa,2BAA2B,cAAgB,8BAA8B,eAAiB,iC,mBCA7QD,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,gBAAkB,iC,mBCApCD,EAAOC,QAAU,CAAC,OAAS,4B,mBCA3BD,EAAOC,QAAU,CAAC,KAAO,8B,gECDbC,E,8FCWCC,EAAcC,gBACzB,gBACEC,EADF,EACEA,YADF,IAEEC,iBAFF,MAEc,OAFd,EAGEC,EAHF,EAGEA,UACAC,EAJF,EAIEA,KAJF,OAME,+CAAOC,KAAMH,GAAeE,GAA5B,IAAkCH,YAAaA,EAAaE,UAAWA,Q,kCDlB/DL,K,6BAAAA,E,eAAAA,E,mBAAAA,E,oCAAAA,E,eAAAA,E,4CAAAA,M,KEKL,ICDMQ,EAAsDC,ICQtDC,EAAW,SAACC,GACvB,MAA0BC,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KAEA,MAAO,CACLD,QACAC,WACAC,MAAO,kBAAMD,EAAS,KACtBR,KAAM,CACJO,QACAG,SAAU,SAACC,GACTH,EAASG,EAAMC,OAAOL,WCtBxBM,EAAY,G,QCILC,E,OAAWC,EAAMC,OAAO,CACnCC,QAHcC,sCAIdC,iBAAiB,ICFNC,EAAU,SACfC,GACJ,OAAOP,EAASQ,KAKd,aAAcD,IAPPD,EAAU,WAUnB,OAAON,EAASS,OAAqB,UAAW,KAVvCH,EAAU,SAeZC,GACP,OAAOP,EAASQ,KAA8B,gBAAiBD,ICT7DG,EAAqC,CACzCC,QAAQ,EACRC,MAAO,MAuBIC,EAAqB,SAACF,GAAD,MAC/B,CAAExB,KAAM,4BAA6BwB,WAE3BG,EAAoB,SAACF,GAAD,MAC9B,CAAEzB,KAAM,0BAA2ByB,UC9BhCF,EAAqC,CACzCK,IAAK,KACLC,OAAQ,KACRC,KAAM,KACNC,MAAO,KACPC,YAAY,GCbDC,EAAkB,SAACC,GAAD,OAAmCA,EAAMC,MAAMX,QACjEY,EAAkB,SAACF,GAAD,OAA+BA,EAAMC,MAAMV,O,gBCH7DY,EAAe,SAACN,GAG3B,MADE,uJACiBO,KAAKP,ICHbQ,EAAkB,SAACC,GAE9B,MADuB,kDACDF,KAAKE,ICgBhBC,EAAQ,WACnB,MAAoCpC,oBAAkB,GAAtD,mBAAO2B,EAAP,KAAmBU,EAAnB,KACA,EAA0CvC,EAAS,IAApC4B,EAAf,EAAQzB,MAAoBqC,EAA5B,EAAsB5C,KACtB,EAAgDI,EAAS,IAA1CqC,EAAf,EAAQlC,MAAuBsC,EAA/B,EAAyB7C,KACnB8C,EAAWC,cACXC,EAAe9C,EAAegC,GAC9Be,EAAe/C,EAAemC,GAWpC,OAAIW,EACK,cAAC,IAAD,CAAUE,GAAIxD,EAAKyD,UAI1B,qBAAKpD,UAAWqD,IAAMC,cAAtB,SACE,qBAAKtD,UAAWqD,IAAME,QAAtB,SACE,sBAAKvD,UAAWqD,IAAMG,YAAtB,UACE,yCACCN,EAAe,uBAAMG,MAAO,CAAEI,MAAO,OAAtB,cAAiCP,EAAjC,OAAyD,GACzE,cAACtD,EAAD,CACEK,KAAM4C,EACN/C,YAAY,QACZC,UAAU,QACVC,UAAWqD,IAAMK,aAEnB,cAAC9D,EAAD,CACEK,KAAM6C,EACNhD,YAAY,WACZC,UAAU,WACVC,UAAWqD,IAAMM,gBAEnB,sBAAK3D,UAAW4D,IAAGC,gBAAnB,wBAEE,uBAAO3D,KAAK,WAAW4D,QAAS5B,EAAYvB,SAlC7B,SAACoD,GAAD,OACvBnB,EAAcmB,EAAEC,cAAcF,eAmCxB,8BACE,cAAC,IAAD,CAAMX,GAAIxD,EAAKsE,iBAAf,iCAEF,wBAAQC,QApCY,WLe5B,IAACC,EKdK5B,EAAaN,IAAUQ,EAAgBC,GACzCK,GLaHoB,EKboB,CAAElC,QAAOS,WAAUR,cLcxC,SAACa,GACC1B,EACS8C,GACNC,MAAK,WACJrB,EAASnB,GAAmB,OAE7ByC,OAAM,SAAAN,GACL,IAAMpC,EAAQoC,EAAEO,SACZP,EAAEO,SAASH,KAAKxC,MADN,UAEPoC,EAAEQ,QAFK,iCAGdxB,EAASlB,EAAkBF,UKrB/B6C,QAAQC,IAAI,UA+BgCzE,UAAWqD,IAAMqB,IAAvD,qBAGA,0DACA,cAAC,IAAD,CAAMvB,GAAIxD,EAAKgF,aAAf,+BC9CGC,EAAgB,SAChBtD,GACT,OAAOP,EAASQ,KACd,cACAD,IAJOsD,EAAgB,SAOhBtD,GACT,OAAOP,EAASQ,KACd,wBACAD,I,iBChCS,MAA0B,mCCQ5BuD,EAAY,kBACvB,8BACE,qBAAK7E,UAAWqD,IAAMyB,OAAQC,IAAKD,EAAQE,IAAI,iBCMtCC,EAAkB,WAC7B,MAA8B1E,oBAAS,GAAvC,mBAAO2E,EAAP,KAAgBC,EAAhB,KACA,EAAkC5E,oBAAS,GAA3C,mBAAO6E,EAAP,KAAgBC,EAAhB,KAEMtC,EAAWC,cACjB,EAA6D3C,EAAS,IAAvD4B,EAAf,EAAQzB,MAAoBqC,EAA5B,EAAsB5C,KAAwBqF,EAA9C,EAAuC5E,MAEjC6E,EAA8B,CAClCtD,QACAuD,KAAM,yCACNjB,QAAQ,oOAkBV,OAAIa,EACK,cAAC,IAAD,CAAUjC,GAAIxD,EAAK8F,QAI1B,qBAAKzF,UAAWqD,IAAMC,cAAtB,SACG4B,EACC,cAAC,EAAD,IAEA,qBAAKlF,UAAWqD,IAAME,QAAtB,SACE,sBAAKvD,UAAWqD,IAAMG,YAAtB,UACE,uDACA,qBAAKxD,UAAWqD,IAAMqC,eAAtB,SACE,cAAC9F,EAAD,CACEK,KAAM4C,EACN/C,YAAY,QACZC,UAAU,QACVC,UAAWqD,IAAMK,eAGrB,4FACA,8BACE,wBAAQ1D,UAAWqD,IAAMqB,IAAKR,QAhChB,WACpB3B,EAAaN,IACfqD,EAAW,IACXH,GAAW,GACXpC,ECnCJ,SAACwC,EAA6BJ,EAAiBE,GAA/C,OAAuE,WACrET,EACcW,GACXnB,MAAK,WACJe,GAAW,GACXE,GAAe,MAEhBhB,OAAM,SAAAN,GAAC,OACNA,EAAEO,SAAWP,EAAEO,SAASH,KAAKxC,MAA7B,UAAwCoC,EAAEQ,QAA1C,qCD2BOoB,CAAqBJ,EAAaJ,EAAYE,KAEvDb,QAAQC,IAAI,gBA0BJ,iCAIF,mEACA,cAAC,IAAD,CAAMtB,GAAIxD,EAAKiG,MAAf,sCEvEG,MAA0B,kC,iBCgB5BC,EAAa,SAAC,GAA8D,IAA5DlE,EAA2D,EAA3DA,MAAOmE,EAAoD,EAApDA,SAElC,OACE,8BACE,qBAAK9F,UAAWqD,IAAMC,cAAtB,SACE,sBAAKtD,UAAWqD,IAAME,QAAtB,UACE,qBAAKvD,UAAW4D,IAAGmC,SAAUhB,IAAKiB,EAAWhB,IAAI,UACjD,2CACA,wDACA,cAAC,IAAD,CAAM7B,GAAIxD,EAAKsE,iBAAkBC,QARrB,kBAAY4B,GAAUnE,IAQlC,+CCRGsE,EAAoB,WAC/B,MAAsC1F,oBAAS,GAA/C,mBAAO2F,EAAP,KAAqBC,EAArB,KACA,EAA4B5F,oBAAS,GAArC,mBAAO6F,EAAP,KAAgBN,EAAhB,KAEM/C,EAAWC,cACjB,EAAyE3C,EAAS,IAAnEgG,EAAf,EAAQ7F,MAA0BsC,EAAlC,EAA4B7C,KAA2BqG,EAAvD,EAAgD5F,MAE1C6F,EAAWC,cAEXC,EACJF,EAASG,SAASC,MAAM,KAAKJ,EAASG,SAASC,MAAM,KAAKC,OAFxC,GAIdzC,EAAuB,CAC3BzB,SAAU2D,EACVQ,mBAAoBJ,GAYtB,OAAIP,EACK,cAAC,IAAD,CAAU/C,GAAIxD,EAAKiG,QAI1B,qBAAK5F,UAAWqD,IAAMC,cAAtB,SACG8C,EACC,cAAC,EAAD,CAAYzE,MAAOyE,EAASN,SAAUA,IAEtC,qBAAK9F,UAAWqD,IAAME,QAAtB,SACE,sBAAKvD,UAAWqD,IAAMG,YAAtB,UACG,IACD,qDACA,qBAAKxD,UAAWqD,IAAMqC,eAAtB,SACE,cAAC9F,EAAD,CACEE,YAAY,WACZC,UAAU,WACVC,UAAWqD,IAAMM,cACjB1D,KAAM6C,MAGV,wGACA,8BACE,wBAAQ9C,UAAWqD,IAAMqB,IAAKR,QAhCd,WACtBzB,EAAgB4D,IAClBC,EAAc,IACdvD,EClCJ,SAACoB,EAAsBgC,EAAoBL,GAA3C,OAA6D,WAC3DlB,EACcT,GACXC,MAAK,WACJ+B,GAAc,MAEf9B,OAAM,WACLyB,GAAS,OD2BFgB,CAAoB3C,EAAMgC,EAAeL,KAElDtB,QAAQC,IAAI,mBA2BJ,2CElEC,MAA0B,mCCQ5BsC,EAAQ,kBACnB,8BACE,qBAAK/G,UAAWqD,IAAMC,cAAtB,SACE,sBAAKtD,UAAWqD,IAAME,QAAtB,UACE,qBAAKvD,UAAW4D,IAAGoD,UAAWjC,IAAKkC,EAAQjC,IAAI,WAC/C,6CACA,gG,iBCLKkC,GAAa,kBACxB,sBAAKlH,UAAWqD,IAAM8D,IAAtB,UACE,oBAAInH,UAAWqD,IAAM+D,KAArB,kBACA,+BACE,6BACE,cAAC,IAAD,CAASpH,UAAWqD,IAAMgE,WAAYlE,GAAIxD,EAAKiG,MAA/C,qBAKF,6BACE,cAAC,IAAD,CAAS5F,UAAWqD,IAAMgE,WAAYlE,GAAIxD,EAAKgF,aAA/C,4BAKF,6BACE,cAAC,IAAD,CAAS3E,UAAWqD,IAAMgE,WAAYlE,GAAIxD,EAAKyD,QAA/C,uBAKF,6BACE,cAAC,IAAD,CAASpD,UAAWqD,IAAMgE,WAAYlE,GAAIxD,EAAK2H,oBAA/C,mCAKF,6BACE,cAAC,IAAD,CAAStH,UAAWqD,IAAMgE,WAAYlE,GAAIxD,EAAKsE,iBAA/C,uCCzBKsD,GAAU,WAErB,IAAMC,EAAarH,EAAegC,GAC5BY,EAAWC,cAIjB,OAAKwE,EAIH,qBAAKxH,UAAWqD,IAAMC,cAAtB,SACE,sBAAKtD,UAAWqD,IAAME,QAAtB,UACE,2CACCiE,EACC,8BACE,wBAAQxH,UAAWqD,IAAMqB,IAAKR,QAZlB,WACpBnB,GlByCI,SAACA,GACL1B,IAAiB+C,MAAK,WACpBrB,EAASnB,GAAmB,IAC5BmB,EAASlB,EAAkB,YkBjCrB,uBAKF,cAAC,IAAD,CAASsB,GAAIxD,EAAKiG,MAAlB,wBAbC,cAAC,IAAD,CAAUzC,GAAIxD,EAAKiG,S,oBCTjB6B,GAAgB,WAC3B,MAA0BlH,mBAAS,IAAnC,mBAAO0B,EAAP,KAAcyF,EAAd,KACA,EAAgCnH,mBAAS,IAAzC,mBAAOmC,EAAP,KAAiBiF,EAAjB,KACA,EAA8CpH,mBAAS,IAAvD,mBAAOqH,EAAP,KAAwBC,EAAxB,KACA,EAAsCtH,oBAAkB,GAAxD,mBAAO2F,EAAP,KAAqBC,EAArB,KAaMhC,EAAY,CAChBlC,QACAS,YAUF,OAAIwD,EACK,cAAC,IAAD,CAAU/C,GAAIxD,EAAKiG,QAG1B,qBAAK5F,UAAWqD,IAAMC,cAAtB,SACE,qBAAKtD,UAAWqD,IAAME,QAAtB,SACE,sBAAKvD,UAAWqD,IAAMG,YAAtB,UACE,8CACA,uBACExD,UAAWqD,IAAMM,cACjBzD,KAAK,QACLJ,YAAY,QACZU,MAAOyB,EACPtB,SApCgB,SAACoD,GACzB2D,EAAS3D,EAAEC,cAAcxD,QAoCjBsH,UAAQ,IAEV,uBACE9H,UAAWqD,IAAMM,cACjBzD,KAAK,WACLJ,YAAY,WACZU,MAAOkC,EACP/B,SAxCmB,SAACoD,GAC5B4D,EAAY5D,EAAEC,cAAcxD,QAwCpBsH,UAAQ,IAEV,uBACE9H,UAAWqD,IAAMM,cACjBzD,KAAK,WACLJ,YAAY,mBACZU,MAAOoH,EACPjH,SA7CwB,SAACoD,GACjC8D,EAAmB9D,EAAEC,cAAcxD,QA6C3BsH,UAAQ,IAEV,4CACA,sBAAK9H,UAAW4D,KAAGmE,KAAnB,UACE,wBAAQ/H,UAAWqD,IAAMqB,IAAzB,oBACA,wBAAQ1E,UAAWqD,IAAMqB,IAAKR,QA1Cd,WACpBxB,IAAakF,GACfvG,EAAiB8C,GAAMC,MAAK,WAC1B+B,GAAc,OAuCV,6BCtEC6B,GAAO,kBAClB,qBAAKhI,UAAWqD,IAAMC,cAAtB,SACE,qBAAKtD,UAAWqD,IAAM4E,UAAtB,SACE,mBAAG5E,MAAO,CAAEI,MAAO,SAAnB,8BCMOyE,GAAM,kBACjB,sBAAKlI,UAAWmI,IAAEC,IAAlB,UACE,cAAC,GAAD,IAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAM1I,EAAKiG,MAAO0C,QAAS,cAAC,EAAD,MAClC,cAAC,IAAD,CAAOD,KAAM1I,EAAKgF,aAAc2D,QAAS,cAAC,GAAD,MACzC,cAAC,IAAD,CAAOD,KAAM1I,EAAKyD,QAASkF,QAAS,cAAC,GAAD,MACpC,cAAC,IAAD,CAAOD,KAAK,KAAKC,QAAS,sDAC1B,cAAC,IAAD,CAAOD,KAAM1I,EAAKsE,iBAAkBqE,QAAS,cAAC,EAAD,MAC7C,cAAC,IAAD,CAAOD,KAAM1I,EAAK8F,MAAO6C,QAAS,cAAC,EAAD,MAClC,cAAC,IAAD,CAAOD,KAAM1I,EAAK2H,oBAAqBgB,QAAS,cAAC,EAAD,MAChD,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,GAAD,aCbhBC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBrE,MAAK,YAAkD,IAA/CsE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,kBCJDO,GAAcC,aAAgB,CACzCC,M1BFyB,WAGN,IAFnB7G,EAEkB,uDAFKtB,EACvBoI,EACkB,uCAMd,OALIA,EAAOhJ,KAKJkC,G0BNXC,MvBS0B,WAGA,IAF1BD,EAEyB,uDAFKX,EAC9ByH,EACyB,uCACzB,OAAQA,EAAOhJ,MACb,IAAK,4BACH,OAAO,2BACFkC,GADL,IAEEV,OAAQwH,EAAOxH,SAEnB,IAAK,0BACH,OAAO,2BACFU,GADL,IAEET,MAAOuH,EAAOvH,QAElB,QACE,OAAOS,IuBxBX+G,YtBU4B,WAGF,IAF1B/G,EAEyB,uDAFKX,EAC9ByH,EACyB,uCACzB,MACO,kBADCA,EAAOhJ,KAEJ,2BACFkC,GACA8G,EAAOE,SAQLhH,KsBxBAiH,GAAQC,aAAYP,GAAaQ,aAAgBC,OAM9DC,OAAOJ,MAAQA,GCLfK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACE,cAAC,GAAD,UAINQ,SAASC,eAAe,SAM1BvB,O","file":"static/js/main.0f63d659.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navigation_nav__3CXyF\",\"navElement\":\"Navigation_navElement__3VPMA\",\"menu\":\"Navigation_menu__VUGMY\",\"p\":\"Navigation_p__3EbMI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"letterImg\":\"ConfirmPassword_letterImg__3UhNI\",\"errorImg\":\"ConfirmPassword_errorImg__1CPVm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Common_mainContainer__1YbqG\",\"contentWrap\":\"Common_contentWrap__3cz03\",\"content\":\"Common_content__2nJCL\",\"btn\":\"Common_btn__3a_wE\",\"inputEmail\":\"Common_inputEmail__3iLZ5\",\"inputPassword\":\"Common_inputPassword__yLVis\",\"inputCentering\":\"Common_inputCentering__1z1RO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rememberMeInput\":\"Login_rememberMeInput__2wEHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__3R_QX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btns\":\"Registrations_btns__17Wql\"};","export enum PATH {\n  REGISTRATION = '/registration',\n  LOGIN = '/login',\n  PROFILE = '/profile',\n  CONFIRM_PASSWORD = '/confirmPassword',\n  POPUP = '/popup',\n  CREATE_NEW_PASSWORD = '/createNewPassword/*',\n}\n","import { memo } from 'react';\n\nimport { ReturnComponentType } from 'types';\n\ntype InputProps = {\n  placeholder: string;\n  typeInput: string;\n  className: string;\n  bind: any;\n};\n\nexport const CustomInput = memo(\n  ({\n    placeholder,\n    typeInput = 'text',\n    className,\n    bind,\n  }: InputProps): ReturnComponentType => (\n    <input type={typeInput} {...bind} placeholder={placeholder} className={className} />\n  ),\n);\n","import { useDispatch } from 'react-redux';\n\nimport { AppDispatch } from 'store/types';\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\n\nimport { RootStateType } from 'store/types';\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;\n","import { useState } from 'react';\n\ntype useInputPropsType = {\n  value: string;\n  setValue: any;\n  reset: any;\n  bind: {\n    value: string;\n    onChange: (event: any) => void;\n  };\n};\n\nexport const useInput = (initialValue: string): useInputPropsType => {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(''),\n    bind: {\n      value,\n      onChange: (event: any) => {\n        setValue(event.target.value);\n      },\n    },\n  };\n};\n","const initState = {};\n\ntype initStateType = {};\n\nexport const cardReducer = (\n  state: initStateType = initState,\n  action: any,\n): initStateType => {\n  switch (action.type) {\n    case '': {\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n","import axios from 'axios';\n\nconst baseUrl = process.env.REACT_APP_BASE_URL; // Достаем базовый юрл из .env(ссылка на хироку)\n\nexport const instance = axios.create({\n  baseURL: baseUrl,\n  withCredentials: true,\n});\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from './apiConfig';\n\nexport const authAPI = {\n  login(params: LoginParamsType) {\n    return instance.post<\n      LoginParamsType,\n      /* 'сам объект сервера который отправляет игнат' */\n      /* AxiosResponse нужен только у методов put и post */\n      AxiosResponse<ResponseType>\n    >('auth/login', params);\n  },\n  logOut() {\n    return instance.delete<ResponseType>('auth/me', {});\n  },\n  me() {\n    return instance.post<any>('auth/me');\n  },\n  register(params: RegisterParamsType) {\n    return instance.post<RegisterParamsType, any>('auth/register', params);\n  },\n};\n\n// types\n\nexport type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n};\nexport type RegisterParamsType = {\n  email: string;\n  password: string;\n};\n\nexport type ResponseType = {\n  _id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  token: string;\n  publicCardPacksCount: number;\n  created: Date;\n  updated: Date;\n  verified: boolean;\n  rememberMe: boolean;\n};\n","import { ThunkDispatch } from 'redux-thunk';\n\nimport { authAPI, LoginParamsType } from '../../api/loginApi';\nimport { Nullable } from '../../types';\nimport { RootStoreType } from '../store';\n\nexport type InitialStateDataType = {\n  isAuth: boolean;\n  error?: Nullable<string>;\n};\n\nconst initialState: InitialStateDataType = {\n  isAuth: false,\n  error: null,\n};\n\nexport const loginReducer = (\n  state: InitialStateDataType = initialState,\n  action: ActionTypes,\n): InitialStateDataType => {\n  switch (action.type) {\n    case 'LOGIN/SET_AUTH_LOGIN_DATA':\n      return {\n        ...state,\n        isAuth: action.isAuth,\n      };\n    case 'LOGIN/SET_ERROR_MESSAGE':\n      return {\n        ...state,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setAuthLoginDataAC = (isAuth: boolean) =>\n  ({ type: 'LOGIN/SET_AUTH_LOGIN_DATA', isAuth } as const);\n\nexport const setErrorMessageAC = (error: Nullable<string>) =>\n  ({ type: 'LOGIN/SET_ERROR_MESSAGE', error } as const);\n\nexport const logInTC =\n  (data: LoginParamsType) =>\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n    authAPI\n      .login(data)\n      .then(() => {\n        dispatch(setAuthLoginDataAC(true));\n      })\n      .catch(e => {\n        const error = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n        dispatch(setErrorMessageAC(error));\n      });\n  };\n\nexport const logOutTC =\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n    authAPI.logOut().then(() => {\n      dispatch(setAuthLoginDataAC(false));\n      dispatch(setErrorMessageAC(''));\n    });\n  };\n\n// type;\ntype setLoginData = ReturnType<typeof setAuthLoginDataAC>;\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessageAC>;\ntype ActionTypes = setLoginData | setErrorMessageLogin;\n","import { Nullable } from '../../types';\n\nexport type InitialStateDataType = {\n  _id: Nullable<string>;\n  avatar?: Nullable<string>;\n  name: Nullable<string>;\n  email: Nullable<string>;\n  rememberMe: boolean;\n};\n\nconst initialState: InitialStateDataType = {\n  _id: null,\n  avatar: null,\n  name: null,\n  email: null,\n  rememberMe: false,\n};\n\nexport const profileReducer = (\n  state: InitialStateDataType = initialState,\n  action: ActionTypes,\n): InitialStateDataType => {\n  switch (action.type) {\n    case 'SET_USER_DATA':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    // case 'SET_ERROR_MESSAGE':\n    //   return {\n    //     ...state,\n    //     error: action.error,\n    //   };\n    default:\n      return state;\n  }\n};\n\nexport const setUserData = (_id: Nullable<string>, name: Nullable<string>) =>\n  ({\n    type: 'SET_USER_DATA',\n    payload: { _id, name },\n  } as const);\n\nexport const setErrorMessage = (error: Nullable<string>) =>\n  ({ type: 'SET_ERROR_MESSAGE', error } as const);\n\n// export const getAuthLoginData = () => (dispatch: ThunkDispatch<AppStateType, undefined, ActionTypes>) => {\n//   return authAPI.me()\n//     .then(response => {\n//       if (response.data.resultCode === 0) {                     //проверка залогинен пользователь или нет\n//         let {id, login, email} = response.data.data\n//         dispatch(setAuthUserData(id, login, email, true));\n//\n//       }\n//     });\n// }\n\n// export const logIn =\n//   (data: LoginParamsType) =>\n//     (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//       authAPI\n//         .login(data)\n//         .then(response => {\n//           const { email, rememberMe } = response.data;\n//           dispatch(setAuthLoginData(email, rememberMe, true));\n//         })\n//         .catch(e => {\n//           const error = e.response\n//             ? e.response.data.error\n//             : `${e.message}, more details in the console`;\n//           dispatch(setErrorMessage(error));\n//         });\n//     };\n//\n// export const getUserData = () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//   (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n//     authAPI.logOut().then(() => {\n//       const { _id, name, verified } = response.data;\n//       dispatch(setUserData(_id, name, verified));\n//     }\n//     });\n// }\n\n// type;\ntype setAuthUserData = ReturnType<typeof setUserData>;\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessage>;\ntype ActionTypes = setAuthUserData | setErrorMessageLogin;\n","import { RootStateType } from '../../types';\n\nexport const getIsDataLoaded = (state: RootStateType): boolean => state.login.isAuth;\nexport const getErrorMessage = (state: RootStateType): any => state.login.error;\n","export const isEmailValid = (email: string): boolean => {\n  const EMAIL_REGEX =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return EMAIL_REGEX.test(email);\n};\n","export const isPasswordValid = (password: string): boolean => {\n  const PASSWORD_REGEX = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\n  return PASSWORD_REGEX.test(password);\n};\n/* /^\n  (?=.*\\d)          // should contain at least one digit\n  (?=.*[a-z])       // should contain at least one lower case\n  (?=.*[A-Z])       // should contain at least one upper case\n  [a-zA-Z0-9]{8,}   // should contain at least 8 from the mentioned characters\n$/ */\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Link, Navigate } from 'react-router-dom';\n\nimport { CustomInput } from '../customInput';\n\nimport st from './Login.module.css';\n\nimport { PATH } from 'enum';\nimport { useAppSelector } from 'hooks';\nimport { useInput } from 'hooks/useInput/useInput';\nimport { logInTC } from 'store';\nimport { getErrorMessage, getIsDataLoaded } from 'store/selectors';\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types';\nimport { isEmailValid, isPasswordValid } from 'utils';\n\nexport const Login = (): ReturnComponentType => {\n  const [rememberMe, setRememberMe] = useState<boolean>(false);\n  const { value: email, bind: bindEmail } = useInput('');\n  const { value: password, bind: bindPassword } = useInput('');\n  const dispatch = useDispatch();\n  const isDataLoaded = useAppSelector(getIsDataLoaded);\n  const errorMessage = useAppSelector(getErrorMessage);\n  const onChangeCheckBox = (e: ChangeEvent<HTMLInputElement>): void =>\n    setRememberMe(e.currentTarget.checked);\n\n  const onClickHandlerLogin = (): void => {\n    if (isEmailValid(email) && isPasswordValid(password)) {\n      dispatch(logInTC({ email, password, rememberMe }));\n      return;\n    }\n    console.log('error');\n  };\n  if (isDataLoaded) {\n    return <Navigate to={PATH.PROFILE} />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <div className={style.contentWrap}>\n          <h2> Login </h2>\n          {errorMessage ? <span style={{ color: 'red' }}> {errorMessage} </span> : ''}\n          <CustomInput\n            bind={bindEmail}\n            placeholder=\"Email\"\n            typeInput=\"email\"\n            className={style.inputEmail}\n          />\n          <CustomInput\n            bind={bindPassword}\n            placeholder=\"password\"\n            typeInput=\"password\"\n            className={style.inputPassword}\n          />\n          <div className={st.rememberMeInput}>\n            remember me\n            <input type=\"checkbox\" checked={rememberMe} onChange={onChangeCheckBox} />\n          </div>\n          <div>\n            <Link to={PATH.CONFIRM_PASSWORD}> Forgot password </Link>\n          </div>\n          <button onClick={onClickHandlerLogin} className={style.btn}>\n            Sign In\n          </button>\n          <p> Do not have an account? </p>\n          <Link to={PATH.REGISTRATION}> Sign Up </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { AxiosResponse } from 'axios';\n\nimport { Nullable } from '../types';\n\nimport { instance } from './apiConfig';\n\nexport type AddNewPassType = {\n  email: Nullable<string>;\n  from: Nullable<string>;\n  message: Nullable<string>;\n};\n\nexport type SetNewPassType = {\n  password: Nullable<string>;\n  resetPasswordToken: Nullable<string>;\n};\n\nexport type AddNewPassResponseType = {\n  info: Nullable<string>;\n  error: Nullable<string>;\n};\n\nexport const addNewPassAPI = {\n  addNewPass(params: AddNewPassType) {\n    return instance.post<AddNewPassType, AxiosResponse<AddNewPassResponseType>>(\n      'auth/forgot',\n      params,\n    );\n  },\n  setNewPass(params: SetNewPassType) {\n    return instance.post<SetNewPassType, AxiosResponse<AddNewPassResponseType>>(\n      'auth/set-new-password',\n      params,\n    );\n  },\n};\n","export default __webpack_public_path__ + \"static/media/loader.a6760d82.gif\";","import React from 'react';\n\nimport { ReturnComponentType } from '../../types';\n\nimport style from './Preloader.module.css';\n\nimport loader from 'assets/loader.gif';\n\nexport const Preloader = (): ReturnComponentType => (\n  <div>\n    <img className={style.loader} src={loader} alt=\"preloader\" />\n  </div>\n);\n","import React, { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Link, Navigate } from 'react-router-dom';\n\nimport { AddNewPassType } from '../../api/forgotPasswordApi';\nimport { useInput } from '../../hooks/useInput/useInput';\nimport { forgotPassAddEmailTC } from '../../store/middlewares/forgotPassAddEmailTC';\nimport style from '../../style/Common.module.css';\nimport { isEmailValid } from '../../utils/emailValidation';\nimport { CustomInput } from '../customInput';\nimport { Preloader } from '../preloader/Preloader';\n\nimport { PATH } from 'enum/pathes';\nimport { ReturnComponentType } from 'types';\n\nexport const ConfirmPassword = (): ReturnComponentType => {\n  const [loading, setLoading] = useState(false);\n  const [isShown, setShowMessage] = useState(false);\n\n  const dispatch = useDispatch();\n  const { value: email, bind: bindEmail, reset: resetEmail } = useInput('');\n\n  const dataPayload: AddNewPassType = {\n    email,\n    from: 'test-front-admin <samutic40@gmail.com>',\n    message: `<div style='background-color: #ffd500; \npadding: 15px; \nborder-color: #ff9900; \nwidth: 250px;\nheight: 30px'> \npassword recovery link: <a href='http://localhost:3000/#/createNewPassword/$token$'> recovery link </a></div>`,\n  };\n\n  const onSendButtonClick = (): void => {\n    if (isEmailValid(email)) {\n      resetEmail('');\n      setLoading(true);\n      dispatch(forgotPassAddEmailTC(dataPayload, setLoading, setShowMessage));\n    } else {\n      console.log('ERROR EMAIL');\n    }\n  };\n\n  if (isShown) {\n    return <Navigate to={PATH.POPUP} />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {loading ? (\n        <Preloader />\n      ) : (\n        <div className={style.content}>\n          <div className={style.contentWrap}>\n            <h2>Forgot your password?</h2>\n            <div className={style.inputCentering}>\n              <CustomInput\n                bind={bindEmail}\n                placeholder=\"Email\"\n                typeInput=\"email\"\n                className={style.inputEmail}\n              />\n            </div>\n            <p> Enter your email and we will send you further instructions</p>\n            <div>\n              <button className={style.btn} onClick={onSendButtonClick}>\n                send instructions\n              </button>\n            </div>\n            <span>Did you remember your password?</span>\n            <Link to={PATH.LOGIN}> Try logging in </Link>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { addNewPassAPI, AddNewPassType } from '../../api/forgotPasswordApi';\n\nexport const forgotPassAddEmailTC =\n  (dataPayload: AddNewPassType, setLoading: any, setShowMessage: any) => () => {\n    addNewPassAPI\n      .addNewPass(dataPayload)\n      .then(() => {\n        setLoading(false);\n        setShowMessage(true);\n      })\n      .catch(e =>\n        e.response ? e.response.data.error : `${e.message}, more details in the console`,\n      );\n  };\n","export default __webpack_public_path__ + \"static/media/error.6b88fd10.png\";","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport errorSign from '../../assets/error.png';\nimport { PATH } from '../../enum/pathes';\nimport style from '../../style/Common.module.css';\nimport { ReturnComponentType } from '../../types';\n\nimport st from './ConfirmPassword.module.css';\n\ntype PopupErrorType = {\n  error: boolean;\n  setError: (error: boolean) => void;\n};\n\nexport const PopupError = ({ error, setError }: PopupErrorType): ReturnComponentType => {\n  const onLinkClick = (): void => setError(!error);\n  return (\n    <div>\n      <div className={style.mainContainer}>\n        <div className={style.content}>\n          <img className={st.errorImg} src={errorSign} alt=\"error\" />\n          <h2>Try again</h2>\n          <span>Something goes wrong</span>\n          <Link to={PATH.CONFIRM_PASSWORD} onClick={onLinkClick}>\n            Create new password again\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Navigate, useLocation } from 'react-router-dom';\n\nimport { SetNewPassType } from '../../api/forgotPasswordApi';\nimport { useInput } from '../../hooks/useInput/useInput';\nimport { forgotPassSetPassTC } from '../../store/middlewares/forgotPassSetPassTC';\nimport style from '../../style/Common.module.css';\nimport { isPasswordValid } from '../../utils';\nimport { CustomInput } from '../customInput';\n\nimport { PopupError } from './PopupError';\n\nimport { PATH } from 'enum/pathes';\nimport { ReturnComponentType } from 'types';\n\nexport const CreateNewPassword = (): ReturnComponentType => {\n  const [isLoadedData, setLoadedData] = useState(false);\n  const [isError, setError] = useState(false);\n\n  const dispatch = useDispatch();\n  const { value: newPassword, bind: bindPassword, reset: resetPassword } = useInput('');\n\n  const location = useLocation();\n  const lastElement = 1;\n  const token =\n    location.pathname.split('/')[location.pathname.split('/').length - lastElement];\n\n  const data: SetNewPassType = {\n    password: newPassword,\n    resetPasswordToken: token,\n  };\n\n  const onCreateButtonClick = (): void => {\n    if (isPasswordValid(newPassword)) {\n      resetPassword('');\n      dispatch(forgotPassSetPassTC(data, setLoadedData, setError));\n    } else {\n      console.log('error password');\n    }\n  };\n\n  if (isLoadedData) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {isError ? (\n        <PopupError error={isError} setError={setError} />\n      ) : (\n        <div className={style.content}>\n          <div className={style.contentWrap}>\n            {' '}\n            <h2>Create new password</h2>\n            <div className={style.inputCentering}>\n              <CustomInput\n                placeholder=\"Password\"\n                typeInput=\"password\"\n                className={style.inputPassword}\n                bind={bindPassword}\n              />\n            </div>\n            <p> Create new password and we will send you further instructions to email</p>\n            <div>\n              <button className={style.btn} onClick={onCreateButtonClick}>\n                Create new password\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { addNewPassAPI, SetNewPassType } from '../../api/forgotPasswordApi';\n\nexport const forgotPassSetPassTC =\n  (data: SetNewPassType, setLoadedData: any, setError: any) => () => {\n    addNewPassAPI\n      .setNewPass(data)\n      .then(() => {\n        setLoadedData(true);\n      })\n      .catch(() => {\n        setError(true);\n        /*  e.response ? e.response.data.error : `${e.message}, more details in the console`; */\n      });\n  };\n","export default __webpack_public_path__ + \"static/media/letter.3761fe05.png\";","import React from 'react';\n\nimport letter from '../../assets/letter.png';\nimport style from '../../style/Common.module.css';\nimport { ReturnComponentType } from '../../types';\n\nimport st from './ConfirmPassword.module.css';\n\nexport const Popup = (): ReturnComponentType => (\n  <div>\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <img className={st.letterImg} src={letter} alt=\"letter\" />\n        <h2>Check Email</h2>\n        <p>We have sent the Email with instructions to your email </p>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport { NavLink } from 'react-router-dom';\n\nimport { PATH } from '../../enum/pathes';\nimport { ReturnComponentType } from '../../types';\n\nimport style from './Navigation.module.css';\n\nexport const Navigation = (): ReturnComponentType => (\n  <div className={style.nav}>\n    <h3 className={style.menu}>Menu</h3>\n    <ul>\n      <li>\n        <NavLink className={style.navElement} to={PATH.LOGIN}>\n          login\n        </NavLink>\n      </li>\n\n      <li>\n        <NavLink className={style.navElement} to={PATH.REGISTRATION}>\n          registration\n        </NavLink>\n      </li>\n\n      <li>\n        <NavLink className={style.navElement} to={PATH.PROFILE}>\n          profile\n        </NavLink>\n      </li>\n\n      <li>\n        <NavLink className={style.navElement} to={PATH.CREATE_NEW_PASSWORD}>\n          create new password\n        </NavLink>\n      </li>\n\n      <li>\n        <NavLink className={style.navElement} to={PATH.CONFIRM_PASSWORD}>\n          confirm password\n        </NavLink>\n      </li>\n    </ul>\n  </div>\n);\n","import React from 'react';\n\nimport { useDispatch } from 'react-redux';\nimport { Navigate, NavLink } from 'react-router-dom';\n\nimport { useAppSelector } from '../../hooks';\nimport { getIsDataLoaded } from '../../store/selectors';\n\nimport { PATH } from 'enum/pathes';\nimport { logOutTC } from 'store';\nimport style from 'style/Common.module.css';\nimport { ReturnComponentType } from 'types';\n\nexport const Profile = (): ReturnComponentType => {\n  // const userName = useSelector<RootStoreType, any>(state => state.login.name);\n  const isAuthUser = useAppSelector(getIsDataLoaded);\n  const dispatch = useDispatch();\n  const onClickLogOut = (): void => {\n    dispatch(logOutTC());\n  };\n  if (!isAuthUser) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n  return (\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <h2> Profile </h2>\n        {isAuthUser ? (\n          <div>\n            <button className={style.btn} onClick={onClickLogOut}>\n              Log out\n            </button>\n          </div>\n        ) : (\n          <NavLink to={PATH.LOGIN}>Login</NavLink>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Navigate } from 'react-router-dom';\n\nimport { authAPI } from '../../api/loginApi';\nimport style from '../../style/Common.module.css';\n\nimport st from './Registrations.module.css';\n\nimport { PATH } from 'enum/pathes';\nimport { ReturnComponentType } from 'types';\n\nexport const Registrations = (): ReturnComponentType => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [isLoadedData, setLoadedData] = useState<boolean>(false);\n\n  const onEmailInputEnter = (e: any): void => {\n    setEmail(e.currentTarget.value);\n  };\n\n  const onPasswordInputEnter = (e: any): void => {\n    setPassword(e.currentTarget.value);\n  };\n  const onPasswordAgainInputEnter = (e: any): void => {\n    setConfirmPassword(e.currentTarget.value);\n  };\n\n  const data: any = {\n    email,\n    password,\n  };\n\n  const onSendButtonCLick = (): void => {\n    if (password === confirmPassword) {\n      authAPI.register(data).then(() => {\n        setLoadedData(true);\n      });\n    }\n  };\n  if (isLoadedData) {\n    return <Navigate to={PATH.LOGIN} />;\n  }\n  return (\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <div className={style.contentWrap}>\n          <h2>Registration</h2>\n          <input\n            className={style.inputPassword}\n            type=\"Email\"\n            placeholder=\"Email\"\n            value={email}\n            onChange={onEmailInputEnter}\n            required\n          />\n          <input\n            className={style.inputPassword}\n            type=\"Password\"\n            placeholder=\"Password\"\n            value={password}\n            onChange={onPasswordInputEnter}\n            required\n          />\n          <input\n            className={style.inputPassword}\n            type=\"Password\"\n            placeholder=\"Confirm Password\"\n            value={confirmPassword}\n            onChange={onPasswordAgainInputEnter}\n            required\n          />\n          <p> Have fun! </p>\n          <div className={st.btns}>\n            <button className={style.btn}>cancel</button>\n            <button className={style.btn} onClick={onSendButtonCLick}>\n              send\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport style from '../style/Common.module.css';\n\nimport { ReturnComponentType } from 'types';\n\nexport const Test = (): ReturnComponentType => (\n  <div className={style.mainContainer}>\n    <div className={style.container}>\n      <p style={{ color: 'white' }}> Test page </p>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport { Route, Routes } from 'react-router-dom';\n\nimport s from './App.module.css';\nimport { ConfirmPassword, Login } from './components';\nimport { Navigation } from './components/navigation/Navigation';\nimport { Profile } from './components/profile/Profile';\nimport { Registrations } from './components/registrations/Registrations';\nimport { PATH } from './enum/pathes';\nimport { ReturnComponentType } from './types';\n\nimport { CreateNewPassword, Popup } from 'components';\nimport { Test } from 'components/Test';\n\nexport const App = (): ReturnComponentType => (\n  <div className={s.app}>\n    <Navigation />\n    {/*  <div className={s.wrap}> */}\n    <Routes>\n      <Route path={PATH.LOGIN} element={<Login />} />\n      <Route path={PATH.REGISTRATION} element={<Registrations />} />\n      <Route path={PATH.PROFILE} element={<Profile />} />\n      <Route path=\"/*\" element={<h1>404:page NOT found</h1>} />\n      <Route path={PATH.CONFIRM_PASSWORD} element={<ConfirmPassword />} />\n      <Route path={PATH.POPUP} element={<Popup />} />\n      <Route path={PATH.CREATE_NEW_PASSWORD} element={<CreateNewPassword />} />\n      <Route path=\"/\" element={<Test />} />\n    </Routes>\n  </div>\n  /*  </div> */\n);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { cardReducer, loginReducer, profileReducer } from 'store';\n\nexport const rootReducer = combineReducers({\n  cards: cardReducer,\n  login: loginReducer,\n  profilePage: profileReducer,\n});\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStoreType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\n\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
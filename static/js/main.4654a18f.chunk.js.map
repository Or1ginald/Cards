{"version":3,"sources":["components/customButton/CustomButton.module.css","App.module.css","components/customCheckBox/CustomCheckbox.module.css","components/confirmPassword/ConfirmPassword.module.css","store/reducers/cards.ts","api/apiConfig/index.ts","api/loginApi.ts","store/reducers/login.ts","components/loginPage/Login.tsx","api/forgotPasswordApi.ts","components/confirmPassword/ConfirmPassword.tsx","assets/error.png","assets/letter.png","components/confirmPassword/Popup.tsx","components/confirmPassword/CreateNewPassword.tsx","components/profile/Profile.tsx","components/Test.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","initState","instance","axios","create","baseURL","process","withCredentials","authAPI","params","post","delete","initialState","_id","avatar","name","email","password","rememberMe","isAuth","verified","error","Login","useState","setEmail","setPassword","setRememberMe","dispatch","useDispatch","isDataLoaded","useSelector","state","login","errorMessage","data","authLogin","useCallback","dataItem","then","response","type","payload","setUserData","catch","e","message","setErrorMessage","logIn","to","className","style","mainContainer","content","color","onChange","currentTarget","value","placeholder","inputEmail","checked","onClick","btn","addNewPassAPI","ConfirmPassword","loading","setLoading","isShown","setShowMessage","dataPayload","from","required","console","log","Popup","closeBtn","spanClose","letterImg","src","letter","alt","PopupError","setError","errorImg","errorSign","CreateNewPassword","newPassword","isData","setData","isError","location","useLocation","resetPasswordToken","pathname","split","length","inputPassword","Profile","userName","isAuthUser","Test","textAlign","width","margin","App","s","app","wrap","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","cards","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4654a18f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"CustomButton_default__3mziG\",\"red\":\"CustomButton_red__LqAzu\",\"button\":\"CustomButton_button__1kKFn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"wrap\":\"App_wrap__29kNz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"CustomCheckbox_checkbox__34nPX\",\"spanClassName\":\"CustomCheckbox_spanClassName__1DG_h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"ConfirmPassword_mainContainer__37LgT\",\"content\":\"ConfirmPassword_content__3I2Of\",\"btn\":\"ConfirmPassword_btn__15tKx\",\"inputEmail\":\"ConfirmPassword_inputEmail__dmZdh\",\"inputPassword\":\"ConfirmPassword_inputPassword__rDF5N\",\"letterImg\":\"ConfirmPassword_letterImg__3UhNI\",\"errorImg\":\"ConfirmPassword_errorImg__1CPVm\"};","const initState = {};\n\ntype initStateType = {};\n\nexport const cardReducer = (\n  state: initStateType = initState,\n  action: any,\n): initStateType => {\n  switch (action.type) {\n    case '': {\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n","import axios from 'axios';\n\nconst baseUrl = process.env.REACT_APP_BASE_URL; // Достаем базовый юрл из .env(ссылка на хироку)\n\nexport const instance = axios.create({\n  baseURL: baseUrl,\n  withCredentials: true,\n});\n","import { AxiosResponse } from 'axios';\n\nimport { instance } from './apiConfig';\n\nexport const authAPI = {\n  login(params: LoginParamsType) {\n    return instance.post<\n      LoginParamsType,\n      /* 'сам объект сервера который отправляет игнат' */\n      /* AxiosResponse нужен только у методов put и post */\n      AxiosResponse<ResponseType>\n    >('auth/login', params);\n  },\n  logOut() {\n    return instance.delete<ResponseType>('auth/login');\n  },\n  me() {\n    return instance.post<any>('auth/me');\n  },\n  register(data: DataType) {\n    return instance.post<any>('auth/register', data);\n  },\n};\n\n// types\n\nexport type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n};\nexport type DataType = {\n  email: string;\n  password: string;\n};\n\nexport type ResponseType = {\n  _id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  token: string;\n  publicCardPacksCount: number;\n  created: Date;\n  updated: Date;\n  verified: boolean;\n  rememberMe: boolean;\n};\n","import { ThunkDispatch } from 'redux-thunk';\n\nimport { authAPI, LoginParamsType } from '../../api/loginApi';\nimport { Nullable } from '../../types';\nimport { RootStoreType } from '../store';\n\nexport type InitialStateDataType = {\n  _id: Nullable<string>;\n  avatar?: Nullable<string>;\n  name: Nullable<string>;\n  email: Nullable<string>;\n  password: Nullable<string>;\n  rememberMe: boolean;\n  isAuth: boolean;\n  verified: boolean;\n  error?: Nullable<string>;\n};\n\nconst initialState: InitialStateDataType = {\n  _id: null,\n  avatar: null,\n  name: null,\n  email: null,\n  password: null,\n  rememberMe: false,\n  isAuth: false,\n  verified: false,\n  error: null,\n};\n\nexport const loginReducer = (\n  state: InitialStateDataType = initialState,\n  action: ActionTypes,\n): InitialStateDataType => {\n  switch (action.type) {\n    case 'SET_LOGIN_DATA':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    case 'SET_USER_DATA':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    case 'SET_ERROR_MESSAGE':\n      return {\n        ...state,\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setLoginData = (\n  email: Nullable<string>,\n  password: Nullable<string>,\n  rememberMe: boolean,\n) =>\n  ({\n    type: 'SET_LOGIN_DATA',\n    payload: { email, password, rememberMe },\n  } as const);\n\nexport const setUserData = (\n  _id: Nullable<string>,\n  name: Nullable<string>,\n  verified: boolean,\n) =>\n  ({\n    type: 'SET_USER_DATA',\n    payload: { _id, name, verified },\n  } as const);\n\nexport const setErrorMessage = (error: Nullable<string>) =>\n  ({ type: 'SET_ERROR_MESSAGE', error } as const);\n\n// export const getAuthLoginData = () => (dispatch: ThunkDispatch<AppStateType, undefined, ActionTypes>) => {\n//   return authAPI.me()\n//     .then(response => {\n//       if (response.data.resultCode === 0) {                     //проверка залогинен пользователь или нет\n//         let {id, login, email} = response.data.data\n//         dispatch(setAuthUserData(id, login, email, true));\n//\n//       }\n//     });\n// }\n\nexport const logIn =\n  (data: LoginParamsType) =>\n  (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n    authAPI\n      .login(data)\n      .then(response => {\n        const { _id, name, verified } = response.data;\n        dispatch(setUserData(_id, name, verified));\n      })\n      .catch(e => {\n        const error = e.response\n          ? e.response.data.error\n          : `${e.message}, more details in the console`;\n        dispatch(setErrorMessage(error));\n      });\n  };\n\nexport const logOut =\n  () => (dispatch: ThunkDispatch<RootStoreType, undefined, ActionTypes>) => {\n    authAPI.logOut().then(() => {\n      dispatch(setLoginData(null, null, false));\n    });\n  };\n\n// type;\ntype setAuthLoginData = ReturnType<typeof setLoginData>;\ntype setAuthUserData = ReturnType<typeof setUserData>;\ntype setErrorMessageLogin = ReturnType<typeof setErrorMessage>;\ntype ActionTypes = setAuthLoginData | setAuthUserData | setErrorMessageLogin;\n","import React, { ChangeEvent, useCallback, useState } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, Navigate } from 'react-router-dom';\n\nimport { LoginParamsType } from '../../api/loginApi';\nimport { RootStoreType, logIn } from '../../store';\nimport { ReturnComponentType } from '../../types';\nimport style from '../confirmPassword/ConfirmPassword.module.css';\n\nexport const Login = (): ReturnComponentType => {\n  const [email, setEmail] = useState<string>('');\n  const [password, setPassword] = useState<string>('');\n  const [rememberMe, setRememberMe] = useState<boolean>(false);\n  const dispatch = useDispatch();\n  const isDataLoaded = useSelector<RootStoreType, boolean>(state => state.login.verified);\n  const errorMessage = useSelector<RootStoreType>(state => state.login.error);\n  const data = { email, password, rememberMe: true };\n\n  const onChangeEmail = (e: ChangeEvent<HTMLInputElement>): void =>\n    setEmail(e.currentTarget.value);\n  const onChangePassword = (e: ChangeEvent<HTMLInputElement>): void =>\n    setPassword(e.currentTarget.value);\n  const onChangeCheckBox = (e: ChangeEvent<HTMLInputElement>): void =>\n    setRememberMe(e.currentTarget.checked);\n\n  const authLogin = useCallback(\n    (dataItem: LoginParamsType): any => {\n      dispatch(logIn(dataItem));\n    },\n    [dispatch],\n  );\n  const onClickHandlerSignIn = (): void => {\n    if (data) {\n      authLogin(data);\n      // } else {\n      //   setErrorMessage('Fill correct field');\n    }\n  };\n\n  if (isDataLoaded) {\n    return <Navigate to=\"/profile\" />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <h3> LOGIN </h3>\n        {errorMessage ? <span style={{ color: 'red' }}> {errorMessage} </span> : ''}\n        <input\n          type=\"text\"\n          onChange={onChangeEmail}\n          value={email}\n          placeholder=\"Email\"\n          className={style.inputEmail}\n        />\n        <input\n          type=\"password\"\n          onChange={onChangePassword}\n          value={password}\n          placeholder=\"Password\"\n          className={style.inputEmail}\n        />\n        <div>\n          remember me\n          <input type=\"checkbox\" checked={rememberMe} onChange={onChangeCheckBox} />\n        </div>\n        <div>\n          <Link to=\"/confirmPassword\"> forgot password </Link>\n        </div>\n        <button onClick={onClickHandlerSignIn} className={style.btn}>\n          Sign In\n        </button>\n        <span> Don`t have an account? </span>\n        <Link to=\"/registration\"> Sign Up </Link>\n      </div>\n    </div>\n  );\n};\n","import { AxiosResponse } from 'axios';\n\nimport { Nullable } from '../types';\n\nimport { instance } from './apiConfig';\n\nexport type AddNewPassType = {\n  email: Nullable<string>;\n  from: Nullable<string>;\n  message: Nullable<string>;\n};\n\nexport type SetNewPassType = {\n  password: Nullable<string>;\n  resetPasswordToken: Nullable<string>;\n};\n\nexport const addNewPassAPI = {\n  addNewPass(params: AddNewPassType) {\n    return instance.post<AddNewPassType, AxiosResponse<any>>('auth/forgot', params);\n  },\n  setNewPass(params: SetNewPassType) {\n    return instance.post<SetNewPassType, AxiosResponse<any>>(\n      'auth/set-new-password',\n      params,\n    );\n  },\n};\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { Link, Navigate } from 'react-router-dom';\n\nimport { addNewPassAPI, AddNewPassType } from '../../api/forgotPasswordApi';\n\nimport style from './ConfirmPassword.module.css';\n\nimport { ReturnComponentType } from 'types';\n\nexport const ConfirmPassword = (): ReturnComponentType => {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isShown, setShowMessage] = useState(false);\n\n  const dataPayload: AddNewPassType = {\n    email,\n    from: 'test-front-admin <samutic40@gmail.com>',\n    message: `<div style='background-color: #ffd500; \npadding: 15px; \nborder-color: #ff9900; \nwidth: 250px;\nheight: 30px'> \npassword recovery link: <a href='http://localhost:3000/#/createNewPassword/$token$'> recovery link </a></div>`,\n  };\n\n  const onSendButtonClick = (): void => {\n    setEmail('');\n    setLoading(true);\n    addNewPassAPI\n      .addNewPass(dataPayload)\n      .then(() => {\n        setLoading(false);\n        setShowMessage(true);\n      })\n      .catch(error => {\n        console.log(error.data);\n      });\n  };\n  const onEmailInputEnter = (e: ChangeEvent<HTMLInputElement>): void => {\n    setEmail(e.currentTarget.value);\n  };\n\n  if (isShown) {\n    return <Navigate to=\"/popup\" />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {loading ? (\n        <div>Sending...</div>\n      ) : (\n        <div className={style.content}>\n          <span>it-incubator</span>\n          <span>Forgot your password?</span>\n          {/* <CustomInput title=\"Email\" /> */}\n\n          <input\n            className={style.inputEmail}\n            type=\"email\"\n            placeholder=\"Email\"\n            value={email}\n            onChange={onEmailInputEnter}\n            required\n          />\n          <p> Enter your email and we will send you further instructions</p>\n          <div>\n            <button className={style.btn} onClick={onSendButtonClick}>\n              send instructions\n            </button>\n          </div>\n          <span>Did you remember your password?</span>\n          <Link to=\"/login\"> Try logging in </Link>\n        </div>\n      )}\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/error.6b88fd10.png\";","export default __webpack_public_path__ + \"static/media/letter.3761fe05.png\";","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport errorSign from '../../assets/error.png';\nimport letter from '../../assets/letter.png';\nimport { ReturnComponentType } from '../../types';\n\nimport style from './ConfirmPassword.module.css';\n\nexport const Popup = (): ReturnComponentType => (\n  <div>\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <div className={style.closeBtn}>\n          <span className={style.spanClose}>it-incubator</span>\n        </div>\n        <img className={style.letterImg} src={letter} alt=\"letter\" />\n        <span>Check Email</span>\n        <p>We have sent the Email with instructions to your email </p>\n      </div>\n    </div>\n  </div>\n);\n\ntype PopupErrorType = {\n  error: boolean;\n  setError: (error: boolean) => void;\n};\n\nexport const PopupError = ({ error, setError }: PopupErrorType): ReturnComponentType => (\n  <div>\n    <div className={style.mainContainer}>\n      <div className={style.content}>\n        <span className={style.spanClose}>it-incubator</span>\n\n        <img className={style.errorImg} src={errorSign} alt=\"error\" />\n        <span>Try again</span>\n        <span>Something goes wrong</span>\n        <Link\n          to=\"/confirmPassword\"\n          onClick={() => {\n            setError(!error);\n          }}\n        >\n          Create new password again\n        </Link>\n      </div>\n    </div>\n  </div>\n);\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { Navigate, useLocation } from 'react-router-dom';\n\nimport { addNewPassAPI, SetNewPassType } from '../../api/forgotPasswordApi';\n\nimport style from './ConfirmPassword.module.css';\nimport { PopupError } from './Popup';\n\nimport { ReturnComponentType } from 'types';\n\nexport const CreateNewPassword = (): ReturnComponentType => {\n  const [newPassword, setPassword] = useState('');\n  const [isData, setData] = useState(false);\n  const [isError, setError] = useState(false);\n\n  const onPasswordInputEnter = (e: ChangeEvent<HTMLInputElement>): void => {\n    setPassword(e.currentTarget.value);\n  };\n\n  const location = useLocation();\n  const lastElement = 1;\n  const token =\n    location.pathname.split('/')[location.pathname.split('/').length - lastElement];\n\n  const data: SetNewPassType = {\n    password: newPassword,\n    resetPasswordToken: token,\n  };\n\n  const onCreateButtonClick = (): void => {\n    addNewPassAPI\n      .setNewPass(data)\n      .then(() => {\n        setData(true);\n      })\n      .catch(() => {\n        setError(true);\n      });\n  };\n\n  if (isData) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  return (\n    <div className={style.mainContainer}>\n      {isError ? (\n        <PopupError error={isError} setError={setError} />\n      ) : (\n        <div className={style.content}>\n          <span>it-incubator</span>\n          <span>Create new password</span>\n          <input\n            className={style.inputPassword}\n            type=\"password\"\n            placeholder=\"Password\"\n            value={newPassword}\n            onChange={onPasswordInputEnter}\n            required\n          />\n\n          <p> Create new password and we will send you further instructions to email</p>\n          <div>\n            <button className={style.btn} onClick={onCreateButtonClick}>\n              create new password\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\n\nimport { RootStoreType, logOut } from '../../store';\nimport { ReturnComponentType } from '../../types';\n\nexport const Profile: React.FC<ProfilePropsType> = (): ReturnComponentType => {\n  const userName = useSelector<RootStoreType, any>(state => state.login.name);\n  const isAuthUser = useSelector<RootStoreType, boolean>(state => state.login.verified);\n  const dispatch = useDispatch();\n  const onClickLogOut = (): void => {\n    dispatch(logOut());\n  };\n  return (\n    <div>\n      <h1> Profile </h1>\n      <span>{userName}</span>\n      {isAuthUser ? (\n        <div>\n          <button onClick={onClickLogOut}>LOG OUT</button>\n        </div>\n      ) : (\n        <NavLink to=\"/login\">Login</NavLink>\n      )}\n    </div>\n  );\n};\n\nexport type ProfilePropsType = {};\n","import React from 'react';\n\nimport { ReturnComponentType } from 'types';\n\nconst Test = (): ReturnComponentType => (\n  <div style={{ textAlign: 'center', width: '700px', margin: '50px' }}>\n    <p> We think a lot about CustomInput and decided to use customInputHook</p>\n  </div>\n);\n\nexport default Test;\n","import React from 'react';\n\nimport { NavLink, Route, Routes } from 'react-router-dom';\n\nimport s from './App.module.css';\nimport { ConfirmPassword, Login } from './components';\nimport { Profile } from './components/profile/Profile';\nimport Test from './components/Test';\nimport { ReturnComponentType } from './types';\n\nimport { Popup, CreateNewPassword } from 'components';\n\nexport const App = (): ReturnComponentType => (\n  // useEffect(() => {\n  //   authAPI\n  //     .register({ email: 'samutic40@gmail.com', password: '123456789' })\n  //     .then(res => {\n  //       console.log(res.data);\n  //     });\n  //\n  //   authAPI.me().then(res => {\n  //     console.log(res.data);\n  //   });\n  // }, []);\n  <div className={s.app}>\n    <NavLink to=\"/createNewPassword/*\"> create new password</NavLink>---\n    <NavLink to=\"/confirmPassword\"> confirm password</NavLink>---\n    <NavLink to=\"/login\"> login </NavLink>---\n    <NavLink to=\"/registration\"> registration </NavLink>---\n    <NavLink to=\"/profile\"> profile </NavLink>---\n    <div className={s.wrap}>\n      <Routes>\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/registration\" element={<h1>registration</h1>} />\n        <Route path=\"/profile\" element={<Profile />} />\n        <Route path={'/*'} element={<h1>404:page NOT found</h1>} />\n        <Route path=\"/confirmPassword\" element={<ConfirmPassword />} />\n        <Route path=\"/popup\" element={<Popup />} />\n        <Route path=\"/createNewPassword/*\" element={<CreateNewPassword />} />\n        <Route path=\"/\" element={<Test />} />\n      </Routes>\n    </div>\n  </div>\n);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { cardReducer, loginReducer } from 'store';\n\nexport const rootReducer = combineReducers({\n  cards: cardReducer,\n  login: loginReducer,\n});\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStoreType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\n\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}